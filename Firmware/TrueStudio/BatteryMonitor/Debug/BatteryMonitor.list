
BatteryMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08004170  08004170  00014170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004270  08004270  00014270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004274  08004274  00014274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08004278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000016c  20000004  0800427c  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000170  0800427c  00020170  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000102d9  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000202f  00000000  00000000  00030305  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a28  00000000  00000000  00032338  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000950  00000000  00000000  00032d60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005549  00000000  00000000  000336b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003327  00000000  00000000  00038bf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003bf20  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002530  00000000  00000000  0003bf9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004158 	.word	0x08004158

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08004158 	.word	0x08004158

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb73 	bl	8000914 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fb05 	bl	8000848 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb65 	bl	8000914 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb5b 	bl	8000914 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb11 	bl	8000894 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fb07 	bl	8000894 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fadd>:
 8000294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000296:	46c6      	mov	lr, r8
 8000298:	024e      	lsls	r6, r1, #9
 800029a:	0247      	lsls	r7, r0, #9
 800029c:	0a76      	lsrs	r6, r6, #9
 800029e:	0a7b      	lsrs	r3, r7, #9
 80002a0:	0044      	lsls	r4, r0, #1
 80002a2:	0fc5      	lsrs	r5, r0, #31
 80002a4:	00f7      	lsls	r7, r6, #3
 80002a6:	0048      	lsls	r0, r1, #1
 80002a8:	4698      	mov	r8, r3
 80002aa:	b500      	push	{lr}
 80002ac:	0e24      	lsrs	r4, r4, #24
 80002ae:	002a      	movs	r2, r5
 80002b0:	00db      	lsls	r3, r3, #3
 80002b2:	0e00      	lsrs	r0, r0, #24
 80002b4:	0fc9      	lsrs	r1, r1, #31
 80002b6:	46bc      	mov	ip, r7
 80002b8:	428d      	cmp	r5, r1
 80002ba:	d067      	beq.n	800038c <__aeabi_fadd+0xf8>
 80002bc:	1a22      	subs	r2, r4, r0
 80002be:	2a00      	cmp	r2, #0
 80002c0:	dc00      	bgt.n	80002c4 <__aeabi_fadd+0x30>
 80002c2:	e0a5      	b.n	8000410 <__aeabi_fadd+0x17c>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d13a      	bne.n	800033e <__aeabi_fadd+0xaa>
 80002c8:	2f00      	cmp	r7, #0
 80002ca:	d100      	bne.n	80002ce <__aeabi_fadd+0x3a>
 80002cc:	e093      	b.n	80003f6 <__aeabi_fadd+0x162>
 80002ce:	1e51      	subs	r1, r2, #1
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d000      	beq.n	80002d6 <__aeabi_fadd+0x42>
 80002d4:	e0bc      	b.n	8000450 <__aeabi_fadd+0x1bc>
 80002d6:	2401      	movs	r4, #1
 80002d8:	1bdb      	subs	r3, r3, r7
 80002da:	015a      	lsls	r2, r3, #5
 80002dc:	d546      	bpl.n	800036c <__aeabi_fadd+0xd8>
 80002de:	019b      	lsls	r3, r3, #6
 80002e0:	099e      	lsrs	r6, r3, #6
 80002e2:	0030      	movs	r0, r6
 80002e4:	f000 fd0e 	bl	8000d04 <__clzsi2>
 80002e8:	3805      	subs	r0, #5
 80002ea:	4086      	lsls	r6, r0
 80002ec:	4284      	cmp	r4, r0
 80002ee:	dd00      	ble.n	80002f2 <__aeabi_fadd+0x5e>
 80002f0:	e09d      	b.n	800042e <__aeabi_fadd+0x19a>
 80002f2:	1b04      	subs	r4, r0, r4
 80002f4:	0032      	movs	r2, r6
 80002f6:	2020      	movs	r0, #32
 80002f8:	3401      	adds	r4, #1
 80002fa:	40e2      	lsrs	r2, r4
 80002fc:	1b04      	subs	r4, r0, r4
 80002fe:	40a6      	lsls	r6, r4
 8000300:	0033      	movs	r3, r6
 8000302:	1e5e      	subs	r6, r3, #1
 8000304:	41b3      	sbcs	r3, r6
 8000306:	2400      	movs	r4, #0
 8000308:	4313      	orrs	r3, r2
 800030a:	075a      	lsls	r2, r3, #29
 800030c:	d004      	beq.n	8000318 <__aeabi_fadd+0x84>
 800030e:	220f      	movs	r2, #15
 8000310:	401a      	ands	r2, r3
 8000312:	2a04      	cmp	r2, #4
 8000314:	d000      	beq.n	8000318 <__aeabi_fadd+0x84>
 8000316:	3304      	adds	r3, #4
 8000318:	015a      	lsls	r2, r3, #5
 800031a:	d529      	bpl.n	8000370 <__aeabi_fadd+0xdc>
 800031c:	3401      	adds	r4, #1
 800031e:	2cff      	cmp	r4, #255	; 0xff
 8000320:	d100      	bne.n	8000324 <__aeabi_fadd+0x90>
 8000322:	e081      	b.n	8000428 <__aeabi_fadd+0x194>
 8000324:	002a      	movs	r2, r5
 8000326:	019b      	lsls	r3, r3, #6
 8000328:	0a5b      	lsrs	r3, r3, #9
 800032a:	b2e4      	uxtb	r4, r4
 800032c:	025b      	lsls	r3, r3, #9
 800032e:	05e4      	lsls	r4, r4, #23
 8000330:	0a58      	lsrs	r0, r3, #9
 8000332:	07d2      	lsls	r2, r2, #31
 8000334:	4320      	orrs	r0, r4
 8000336:	4310      	orrs	r0, r2
 8000338:	bc04      	pop	{r2}
 800033a:	4690      	mov	r8, r2
 800033c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800033e:	2cff      	cmp	r4, #255	; 0xff
 8000340:	d0e3      	beq.n	800030a <__aeabi_fadd+0x76>
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	0038      	movs	r0, r7
 8000346:	04c9      	lsls	r1, r1, #19
 8000348:	4308      	orrs	r0, r1
 800034a:	4684      	mov	ip, r0
 800034c:	2a1b      	cmp	r2, #27
 800034e:	dd00      	ble.n	8000352 <__aeabi_fadd+0xbe>
 8000350:	e082      	b.n	8000458 <__aeabi_fadd+0x1c4>
 8000352:	2020      	movs	r0, #32
 8000354:	4661      	mov	r1, ip
 8000356:	40d1      	lsrs	r1, r2
 8000358:	1a82      	subs	r2, r0, r2
 800035a:	4660      	mov	r0, ip
 800035c:	4090      	lsls	r0, r2
 800035e:	0002      	movs	r2, r0
 8000360:	1e50      	subs	r0, r2, #1
 8000362:	4182      	sbcs	r2, r0
 8000364:	430a      	orrs	r2, r1
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	015a      	lsls	r2, r3, #5
 800036a:	d4b8      	bmi.n	80002de <__aeabi_fadd+0x4a>
 800036c:	075a      	lsls	r2, r3, #29
 800036e:	d1ce      	bne.n	800030e <__aeabi_fadd+0x7a>
 8000370:	08de      	lsrs	r6, r3, #3
 8000372:	002a      	movs	r2, r5
 8000374:	2cff      	cmp	r4, #255	; 0xff
 8000376:	d13a      	bne.n	80003ee <__aeabi_fadd+0x15a>
 8000378:	2e00      	cmp	r6, #0
 800037a:	d100      	bne.n	800037e <__aeabi_fadd+0xea>
 800037c:	e0ae      	b.n	80004dc <__aeabi_fadd+0x248>
 800037e:	2380      	movs	r3, #128	; 0x80
 8000380:	03db      	lsls	r3, r3, #15
 8000382:	4333      	orrs	r3, r6
 8000384:	025b      	lsls	r3, r3, #9
 8000386:	0a5b      	lsrs	r3, r3, #9
 8000388:	24ff      	movs	r4, #255	; 0xff
 800038a:	e7cf      	b.n	800032c <__aeabi_fadd+0x98>
 800038c:	1a21      	subs	r1, r4, r0
 800038e:	2900      	cmp	r1, #0
 8000390:	dd52      	ble.n	8000438 <__aeabi_fadd+0x1a4>
 8000392:	2800      	cmp	r0, #0
 8000394:	d031      	beq.n	80003fa <__aeabi_fadd+0x166>
 8000396:	2cff      	cmp	r4, #255	; 0xff
 8000398:	d0b7      	beq.n	800030a <__aeabi_fadd+0x76>
 800039a:	2080      	movs	r0, #128	; 0x80
 800039c:	003e      	movs	r6, r7
 800039e:	04c0      	lsls	r0, r0, #19
 80003a0:	4306      	orrs	r6, r0
 80003a2:	46b4      	mov	ip, r6
 80003a4:	291b      	cmp	r1, #27
 80003a6:	dd00      	ble.n	80003aa <__aeabi_fadd+0x116>
 80003a8:	e0aa      	b.n	8000500 <__aeabi_fadd+0x26c>
 80003aa:	2620      	movs	r6, #32
 80003ac:	4660      	mov	r0, ip
 80003ae:	40c8      	lsrs	r0, r1
 80003b0:	1a71      	subs	r1, r6, r1
 80003b2:	4666      	mov	r6, ip
 80003b4:	408e      	lsls	r6, r1
 80003b6:	0031      	movs	r1, r6
 80003b8:	1e4e      	subs	r6, r1, #1
 80003ba:	41b1      	sbcs	r1, r6
 80003bc:	4301      	orrs	r1, r0
 80003be:	185b      	adds	r3, r3, r1
 80003c0:	0159      	lsls	r1, r3, #5
 80003c2:	d5d3      	bpl.n	800036c <__aeabi_fadd+0xd8>
 80003c4:	3401      	adds	r4, #1
 80003c6:	2cff      	cmp	r4, #255	; 0xff
 80003c8:	d100      	bne.n	80003cc <__aeabi_fadd+0x138>
 80003ca:	e087      	b.n	80004dc <__aeabi_fadd+0x248>
 80003cc:	2201      	movs	r2, #1
 80003ce:	4978      	ldr	r1, [pc, #480]	; (80005b0 <__aeabi_fadd+0x31c>)
 80003d0:	401a      	ands	r2, r3
 80003d2:	085b      	lsrs	r3, r3, #1
 80003d4:	400b      	ands	r3, r1
 80003d6:	4313      	orrs	r3, r2
 80003d8:	e797      	b.n	800030a <__aeabi_fadd+0x76>
 80003da:	2c00      	cmp	r4, #0
 80003dc:	d000      	beq.n	80003e0 <__aeabi_fadd+0x14c>
 80003de:	e0a7      	b.n	8000530 <__aeabi_fadd+0x29c>
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d000      	beq.n	80003e6 <__aeabi_fadd+0x152>
 80003e4:	e0b6      	b.n	8000554 <__aeabi_fadd+0x2c0>
 80003e6:	1e3b      	subs	r3, r7, #0
 80003e8:	d162      	bne.n	80004b0 <__aeabi_fadd+0x21c>
 80003ea:	2600      	movs	r6, #0
 80003ec:	2200      	movs	r2, #0
 80003ee:	0273      	lsls	r3, r6, #9
 80003f0:	0a5b      	lsrs	r3, r3, #9
 80003f2:	b2e4      	uxtb	r4, r4
 80003f4:	e79a      	b.n	800032c <__aeabi_fadd+0x98>
 80003f6:	0014      	movs	r4, r2
 80003f8:	e787      	b.n	800030a <__aeabi_fadd+0x76>
 80003fa:	2f00      	cmp	r7, #0
 80003fc:	d04d      	beq.n	800049a <__aeabi_fadd+0x206>
 80003fe:	1e48      	subs	r0, r1, #1
 8000400:	2800      	cmp	r0, #0
 8000402:	d157      	bne.n	80004b4 <__aeabi_fadd+0x220>
 8000404:	4463      	add	r3, ip
 8000406:	2401      	movs	r4, #1
 8000408:	015a      	lsls	r2, r3, #5
 800040a:	d5af      	bpl.n	800036c <__aeabi_fadd+0xd8>
 800040c:	2402      	movs	r4, #2
 800040e:	e7dd      	b.n	80003cc <__aeabi_fadd+0x138>
 8000410:	2a00      	cmp	r2, #0
 8000412:	d124      	bne.n	800045e <__aeabi_fadd+0x1ca>
 8000414:	1c62      	adds	r2, r4, #1
 8000416:	b2d2      	uxtb	r2, r2
 8000418:	2a01      	cmp	r2, #1
 800041a:	ddde      	ble.n	80003da <__aeabi_fadd+0x146>
 800041c:	1bde      	subs	r6, r3, r7
 800041e:	0172      	lsls	r2, r6, #5
 8000420:	d535      	bpl.n	800048e <__aeabi_fadd+0x1fa>
 8000422:	1afe      	subs	r6, r7, r3
 8000424:	000d      	movs	r5, r1
 8000426:	e75c      	b.n	80002e2 <__aeabi_fadd+0x4e>
 8000428:	002a      	movs	r2, r5
 800042a:	2300      	movs	r3, #0
 800042c:	e77e      	b.n	800032c <__aeabi_fadd+0x98>
 800042e:	0033      	movs	r3, r6
 8000430:	4a60      	ldr	r2, [pc, #384]	; (80005b4 <__aeabi_fadd+0x320>)
 8000432:	1a24      	subs	r4, r4, r0
 8000434:	4013      	ands	r3, r2
 8000436:	e768      	b.n	800030a <__aeabi_fadd+0x76>
 8000438:	2900      	cmp	r1, #0
 800043a:	d163      	bne.n	8000504 <__aeabi_fadd+0x270>
 800043c:	1c61      	adds	r1, r4, #1
 800043e:	b2c8      	uxtb	r0, r1
 8000440:	2801      	cmp	r0, #1
 8000442:	dd4e      	ble.n	80004e2 <__aeabi_fadd+0x24e>
 8000444:	29ff      	cmp	r1, #255	; 0xff
 8000446:	d049      	beq.n	80004dc <__aeabi_fadd+0x248>
 8000448:	4463      	add	r3, ip
 800044a:	085b      	lsrs	r3, r3, #1
 800044c:	000c      	movs	r4, r1
 800044e:	e75c      	b.n	800030a <__aeabi_fadd+0x76>
 8000450:	2aff      	cmp	r2, #255	; 0xff
 8000452:	d041      	beq.n	80004d8 <__aeabi_fadd+0x244>
 8000454:	000a      	movs	r2, r1
 8000456:	e779      	b.n	800034c <__aeabi_fadd+0xb8>
 8000458:	2201      	movs	r2, #1
 800045a:	1a9b      	subs	r3, r3, r2
 800045c:	e784      	b.n	8000368 <__aeabi_fadd+0xd4>
 800045e:	2c00      	cmp	r4, #0
 8000460:	d01d      	beq.n	800049e <__aeabi_fadd+0x20a>
 8000462:	28ff      	cmp	r0, #255	; 0xff
 8000464:	d022      	beq.n	80004ac <__aeabi_fadd+0x218>
 8000466:	2480      	movs	r4, #128	; 0x80
 8000468:	04e4      	lsls	r4, r4, #19
 800046a:	4252      	negs	r2, r2
 800046c:	4323      	orrs	r3, r4
 800046e:	2a1b      	cmp	r2, #27
 8000470:	dd00      	ble.n	8000474 <__aeabi_fadd+0x1e0>
 8000472:	e08a      	b.n	800058a <__aeabi_fadd+0x2f6>
 8000474:	001c      	movs	r4, r3
 8000476:	2520      	movs	r5, #32
 8000478:	40d4      	lsrs	r4, r2
 800047a:	1aaa      	subs	r2, r5, r2
 800047c:	4093      	lsls	r3, r2
 800047e:	1e5a      	subs	r2, r3, #1
 8000480:	4193      	sbcs	r3, r2
 8000482:	4323      	orrs	r3, r4
 8000484:	4662      	mov	r2, ip
 8000486:	0004      	movs	r4, r0
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	000d      	movs	r5, r1
 800048c:	e725      	b.n	80002da <__aeabi_fadd+0x46>
 800048e:	2e00      	cmp	r6, #0
 8000490:	d000      	beq.n	8000494 <__aeabi_fadd+0x200>
 8000492:	e726      	b.n	80002e2 <__aeabi_fadd+0x4e>
 8000494:	2200      	movs	r2, #0
 8000496:	2400      	movs	r4, #0
 8000498:	e7a9      	b.n	80003ee <__aeabi_fadd+0x15a>
 800049a:	000c      	movs	r4, r1
 800049c:	e735      	b.n	800030a <__aeabi_fadd+0x76>
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d04d      	beq.n	800053e <__aeabi_fadd+0x2aa>
 80004a2:	43d2      	mvns	r2, r2
 80004a4:	2a00      	cmp	r2, #0
 80004a6:	d0ed      	beq.n	8000484 <__aeabi_fadd+0x1f0>
 80004a8:	28ff      	cmp	r0, #255	; 0xff
 80004aa:	d1e0      	bne.n	800046e <__aeabi_fadd+0x1da>
 80004ac:	4663      	mov	r3, ip
 80004ae:	24ff      	movs	r4, #255	; 0xff
 80004b0:	000d      	movs	r5, r1
 80004b2:	e72a      	b.n	800030a <__aeabi_fadd+0x76>
 80004b4:	29ff      	cmp	r1, #255	; 0xff
 80004b6:	d00f      	beq.n	80004d8 <__aeabi_fadd+0x244>
 80004b8:	0001      	movs	r1, r0
 80004ba:	e773      	b.n	80003a4 <__aeabi_fadd+0x110>
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d061      	beq.n	8000584 <__aeabi_fadd+0x2f0>
 80004c0:	24ff      	movs	r4, #255	; 0xff
 80004c2:	2f00      	cmp	r7, #0
 80004c4:	d100      	bne.n	80004c8 <__aeabi_fadd+0x234>
 80004c6:	e720      	b.n	800030a <__aeabi_fadd+0x76>
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	4641      	mov	r1, r8
 80004cc:	03d2      	lsls	r2, r2, #15
 80004ce:	4211      	tst	r1, r2
 80004d0:	d002      	beq.n	80004d8 <__aeabi_fadd+0x244>
 80004d2:	4216      	tst	r6, r2
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fadd+0x244>
 80004d6:	003b      	movs	r3, r7
 80004d8:	24ff      	movs	r4, #255	; 0xff
 80004da:	e716      	b.n	800030a <__aeabi_fadd+0x76>
 80004dc:	24ff      	movs	r4, #255	; 0xff
 80004de:	2300      	movs	r3, #0
 80004e0:	e724      	b.n	800032c <__aeabi_fadd+0x98>
 80004e2:	2c00      	cmp	r4, #0
 80004e4:	d1ea      	bne.n	80004bc <__aeabi_fadd+0x228>
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d058      	beq.n	800059c <__aeabi_fadd+0x308>
 80004ea:	2f00      	cmp	r7, #0
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fadd+0x25c>
 80004ee:	e70c      	b.n	800030a <__aeabi_fadd+0x76>
 80004f0:	4463      	add	r3, ip
 80004f2:	015a      	lsls	r2, r3, #5
 80004f4:	d400      	bmi.n	80004f8 <__aeabi_fadd+0x264>
 80004f6:	e739      	b.n	800036c <__aeabi_fadd+0xd8>
 80004f8:	4a2e      	ldr	r2, [pc, #184]	; (80005b4 <__aeabi_fadd+0x320>)
 80004fa:	000c      	movs	r4, r1
 80004fc:	4013      	ands	r3, r2
 80004fe:	e704      	b.n	800030a <__aeabi_fadd+0x76>
 8000500:	2101      	movs	r1, #1
 8000502:	e75c      	b.n	80003be <__aeabi_fadd+0x12a>
 8000504:	2c00      	cmp	r4, #0
 8000506:	d11e      	bne.n	8000546 <__aeabi_fadd+0x2b2>
 8000508:	2b00      	cmp	r3, #0
 800050a:	d040      	beq.n	800058e <__aeabi_fadd+0x2fa>
 800050c:	43c9      	mvns	r1, r1
 800050e:	2900      	cmp	r1, #0
 8000510:	d00b      	beq.n	800052a <__aeabi_fadd+0x296>
 8000512:	28ff      	cmp	r0, #255	; 0xff
 8000514:	d036      	beq.n	8000584 <__aeabi_fadd+0x2f0>
 8000516:	291b      	cmp	r1, #27
 8000518:	dc47      	bgt.n	80005aa <__aeabi_fadd+0x316>
 800051a:	001c      	movs	r4, r3
 800051c:	2620      	movs	r6, #32
 800051e:	40cc      	lsrs	r4, r1
 8000520:	1a71      	subs	r1, r6, r1
 8000522:	408b      	lsls	r3, r1
 8000524:	1e59      	subs	r1, r3, #1
 8000526:	418b      	sbcs	r3, r1
 8000528:	4323      	orrs	r3, r4
 800052a:	4463      	add	r3, ip
 800052c:	0004      	movs	r4, r0
 800052e:	e747      	b.n	80003c0 <__aeabi_fadd+0x12c>
 8000530:	2b00      	cmp	r3, #0
 8000532:	d118      	bne.n	8000566 <__aeabi_fadd+0x2d2>
 8000534:	1e3b      	subs	r3, r7, #0
 8000536:	d02d      	beq.n	8000594 <__aeabi_fadd+0x300>
 8000538:	000d      	movs	r5, r1
 800053a:	24ff      	movs	r4, #255	; 0xff
 800053c:	e6e5      	b.n	800030a <__aeabi_fadd+0x76>
 800053e:	003b      	movs	r3, r7
 8000540:	0004      	movs	r4, r0
 8000542:	000d      	movs	r5, r1
 8000544:	e6e1      	b.n	800030a <__aeabi_fadd+0x76>
 8000546:	28ff      	cmp	r0, #255	; 0xff
 8000548:	d01c      	beq.n	8000584 <__aeabi_fadd+0x2f0>
 800054a:	2480      	movs	r4, #128	; 0x80
 800054c:	04e4      	lsls	r4, r4, #19
 800054e:	4249      	negs	r1, r1
 8000550:	4323      	orrs	r3, r4
 8000552:	e7e0      	b.n	8000516 <__aeabi_fadd+0x282>
 8000554:	2f00      	cmp	r7, #0
 8000556:	d100      	bne.n	800055a <__aeabi_fadd+0x2c6>
 8000558:	e6d7      	b.n	800030a <__aeabi_fadd+0x76>
 800055a:	1bde      	subs	r6, r3, r7
 800055c:	0172      	lsls	r2, r6, #5
 800055e:	d51f      	bpl.n	80005a0 <__aeabi_fadd+0x30c>
 8000560:	1afb      	subs	r3, r7, r3
 8000562:	000d      	movs	r5, r1
 8000564:	e6d1      	b.n	800030a <__aeabi_fadd+0x76>
 8000566:	24ff      	movs	r4, #255	; 0xff
 8000568:	2f00      	cmp	r7, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x2da>
 800056c:	e6cd      	b.n	800030a <__aeabi_fadd+0x76>
 800056e:	2280      	movs	r2, #128	; 0x80
 8000570:	4640      	mov	r0, r8
 8000572:	03d2      	lsls	r2, r2, #15
 8000574:	4210      	tst	r0, r2
 8000576:	d0af      	beq.n	80004d8 <__aeabi_fadd+0x244>
 8000578:	4216      	tst	r6, r2
 800057a:	d1ad      	bne.n	80004d8 <__aeabi_fadd+0x244>
 800057c:	003b      	movs	r3, r7
 800057e:	000d      	movs	r5, r1
 8000580:	24ff      	movs	r4, #255	; 0xff
 8000582:	e6c2      	b.n	800030a <__aeabi_fadd+0x76>
 8000584:	4663      	mov	r3, ip
 8000586:	24ff      	movs	r4, #255	; 0xff
 8000588:	e6bf      	b.n	800030a <__aeabi_fadd+0x76>
 800058a:	2301      	movs	r3, #1
 800058c:	e77a      	b.n	8000484 <__aeabi_fadd+0x1f0>
 800058e:	003b      	movs	r3, r7
 8000590:	0004      	movs	r4, r0
 8000592:	e6ba      	b.n	800030a <__aeabi_fadd+0x76>
 8000594:	2680      	movs	r6, #128	; 0x80
 8000596:	2200      	movs	r2, #0
 8000598:	03f6      	lsls	r6, r6, #15
 800059a:	e6f0      	b.n	800037e <__aeabi_fadd+0xea>
 800059c:	003b      	movs	r3, r7
 800059e:	e6b4      	b.n	800030a <__aeabi_fadd+0x76>
 80005a0:	1e33      	subs	r3, r6, #0
 80005a2:	d000      	beq.n	80005a6 <__aeabi_fadd+0x312>
 80005a4:	e6e2      	b.n	800036c <__aeabi_fadd+0xd8>
 80005a6:	2200      	movs	r2, #0
 80005a8:	e721      	b.n	80003ee <__aeabi_fadd+0x15a>
 80005aa:	2301      	movs	r3, #1
 80005ac:	e7bd      	b.n	800052a <__aeabi_fadd+0x296>
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	7dffffff 	.word	0x7dffffff
 80005b4:	fbffffff 	.word	0xfbffffff

080005b8 <__aeabi_fdiv>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	46de      	mov	lr, fp
 80005c0:	4645      	mov	r5, r8
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0244      	lsls	r4, r0, #9
 80005c6:	0043      	lsls	r3, r0, #1
 80005c8:	0fc6      	lsrs	r6, r0, #31
 80005ca:	b083      	sub	sp, #12
 80005cc:	1c0f      	adds	r7, r1, #0
 80005ce:	0a64      	lsrs	r4, r4, #9
 80005d0:	0e1b      	lsrs	r3, r3, #24
 80005d2:	46b2      	mov	sl, r6
 80005d4:	d053      	beq.n	800067e <__aeabi_fdiv+0xc6>
 80005d6:	2bff      	cmp	r3, #255	; 0xff
 80005d8:	d027      	beq.n	800062a <__aeabi_fdiv+0x72>
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	00e4      	lsls	r4, r4, #3
 80005de:	04d2      	lsls	r2, r2, #19
 80005e0:	4314      	orrs	r4, r2
 80005e2:	227f      	movs	r2, #127	; 0x7f
 80005e4:	4252      	negs	r2, r2
 80005e6:	4690      	mov	r8, r2
 80005e8:	4498      	add	r8, r3
 80005ea:	2300      	movs	r3, #0
 80005ec:	4699      	mov	r9, r3
 80005ee:	469b      	mov	fp, r3
 80005f0:	027d      	lsls	r5, r7, #9
 80005f2:	0078      	lsls	r0, r7, #1
 80005f4:	0ffb      	lsrs	r3, r7, #31
 80005f6:	0a6d      	lsrs	r5, r5, #9
 80005f8:	0e00      	lsrs	r0, r0, #24
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	d024      	beq.n	8000648 <__aeabi_fdiv+0x90>
 80005fe:	28ff      	cmp	r0, #255	; 0xff
 8000600:	d046      	beq.n	8000690 <__aeabi_fdiv+0xd8>
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	2100      	movs	r1, #0
 8000606:	00ed      	lsls	r5, r5, #3
 8000608:	04db      	lsls	r3, r3, #19
 800060a:	431d      	orrs	r5, r3
 800060c:	387f      	subs	r0, #127	; 0x7f
 800060e:	4647      	mov	r7, r8
 8000610:	1a38      	subs	r0, r7, r0
 8000612:	464f      	mov	r7, r9
 8000614:	430f      	orrs	r7, r1
 8000616:	00bf      	lsls	r7, r7, #2
 8000618:	46b9      	mov	r9, r7
 800061a:	0033      	movs	r3, r6
 800061c:	9a00      	ldr	r2, [sp, #0]
 800061e:	4f87      	ldr	r7, [pc, #540]	; (800083c <__aeabi_fdiv+0x284>)
 8000620:	4053      	eors	r3, r2
 8000622:	464a      	mov	r2, r9
 8000624:	58ba      	ldr	r2, [r7, r2]
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	4697      	mov	pc, r2
 800062a:	2c00      	cmp	r4, #0
 800062c:	d14e      	bne.n	80006cc <__aeabi_fdiv+0x114>
 800062e:	2308      	movs	r3, #8
 8000630:	4699      	mov	r9, r3
 8000632:	33f7      	adds	r3, #247	; 0xf7
 8000634:	4698      	mov	r8, r3
 8000636:	3bfd      	subs	r3, #253	; 0xfd
 8000638:	469b      	mov	fp, r3
 800063a:	027d      	lsls	r5, r7, #9
 800063c:	0078      	lsls	r0, r7, #1
 800063e:	0ffb      	lsrs	r3, r7, #31
 8000640:	0a6d      	lsrs	r5, r5, #9
 8000642:	0e00      	lsrs	r0, r0, #24
 8000644:	9300      	str	r3, [sp, #0]
 8000646:	d1da      	bne.n	80005fe <__aeabi_fdiv+0x46>
 8000648:	2d00      	cmp	r5, #0
 800064a:	d126      	bne.n	800069a <__aeabi_fdiv+0xe2>
 800064c:	2000      	movs	r0, #0
 800064e:	2101      	movs	r1, #1
 8000650:	0033      	movs	r3, r6
 8000652:	9a00      	ldr	r2, [sp, #0]
 8000654:	4f7a      	ldr	r7, [pc, #488]	; (8000840 <__aeabi_fdiv+0x288>)
 8000656:	4053      	eors	r3, r2
 8000658:	4642      	mov	r2, r8
 800065a:	1a10      	subs	r0, r2, r0
 800065c:	464a      	mov	r2, r9
 800065e:	430a      	orrs	r2, r1
 8000660:	0092      	lsls	r2, r2, #2
 8000662:	58ba      	ldr	r2, [r7, r2]
 8000664:	001d      	movs	r5, r3
 8000666:	4697      	mov	pc, r2
 8000668:	9b00      	ldr	r3, [sp, #0]
 800066a:	002c      	movs	r4, r5
 800066c:	469a      	mov	sl, r3
 800066e:	468b      	mov	fp, r1
 8000670:	465b      	mov	r3, fp
 8000672:	2b02      	cmp	r3, #2
 8000674:	d131      	bne.n	80006da <__aeabi_fdiv+0x122>
 8000676:	4653      	mov	r3, sl
 8000678:	21ff      	movs	r1, #255	; 0xff
 800067a:	2400      	movs	r4, #0
 800067c:	e038      	b.n	80006f0 <__aeabi_fdiv+0x138>
 800067e:	2c00      	cmp	r4, #0
 8000680:	d117      	bne.n	80006b2 <__aeabi_fdiv+0xfa>
 8000682:	2304      	movs	r3, #4
 8000684:	4699      	mov	r9, r3
 8000686:	2300      	movs	r3, #0
 8000688:	4698      	mov	r8, r3
 800068a:	3301      	adds	r3, #1
 800068c:	469b      	mov	fp, r3
 800068e:	e7af      	b.n	80005f0 <__aeabi_fdiv+0x38>
 8000690:	20ff      	movs	r0, #255	; 0xff
 8000692:	2d00      	cmp	r5, #0
 8000694:	d10b      	bne.n	80006ae <__aeabi_fdiv+0xf6>
 8000696:	2102      	movs	r1, #2
 8000698:	e7da      	b.n	8000650 <__aeabi_fdiv+0x98>
 800069a:	0028      	movs	r0, r5
 800069c:	f000 fb32 	bl	8000d04 <__clzsi2>
 80006a0:	1f43      	subs	r3, r0, #5
 80006a2:	409d      	lsls	r5, r3
 80006a4:	2376      	movs	r3, #118	; 0x76
 80006a6:	425b      	negs	r3, r3
 80006a8:	1a18      	subs	r0, r3, r0
 80006aa:	2100      	movs	r1, #0
 80006ac:	e7af      	b.n	800060e <__aeabi_fdiv+0x56>
 80006ae:	2103      	movs	r1, #3
 80006b0:	e7ad      	b.n	800060e <__aeabi_fdiv+0x56>
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 fb26 	bl	8000d04 <__clzsi2>
 80006b8:	1f43      	subs	r3, r0, #5
 80006ba:	409c      	lsls	r4, r3
 80006bc:	2376      	movs	r3, #118	; 0x76
 80006be:	425b      	negs	r3, r3
 80006c0:	1a1b      	subs	r3, r3, r0
 80006c2:	4698      	mov	r8, r3
 80006c4:	2300      	movs	r3, #0
 80006c6:	4699      	mov	r9, r3
 80006c8:	469b      	mov	fp, r3
 80006ca:	e791      	b.n	80005f0 <__aeabi_fdiv+0x38>
 80006cc:	230c      	movs	r3, #12
 80006ce:	4699      	mov	r9, r3
 80006d0:	33f3      	adds	r3, #243	; 0xf3
 80006d2:	4698      	mov	r8, r3
 80006d4:	3bfc      	subs	r3, #252	; 0xfc
 80006d6:	469b      	mov	fp, r3
 80006d8:	e78a      	b.n	80005f0 <__aeabi_fdiv+0x38>
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d100      	bne.n	80006e0 <__aeabi_fdiv+0x128>
 80006de:	e0a5      	b.n	800082c <__aeabi_fdiv+0x274>
 80006e0:	4655      	mov	r5, sl
 80006e2:	2b01      	cmp	r3, #1
 80006e4:	d000      	beq.n	80006e8 <__aeabi_fdiv+0x130>
 80006e6:	e081      	b.n	80007ec <__aeabi_fdiv+0x234>
 80006e8:	2301      	movs	r3, #1
 80006ea:	2100      	movs	r1, #0
 80006ec:	2400      	movs	r4, #0
 80006ee:	402b      	ands	r3, r5
 80006f0:	0264      	lsls	r4, r4, #9
 80006f2:	05c9      	lsls	r1, r1, #23
 80006f4:	0a60      	lsrs	r0, r4, #9
 80006f6:	07db      	lsls	r3, r3, #31
 80006f8:	4308      	orrs	r0, r1
 80006fa:	4318      	orrs	r0, r3
 80006fc:	b003      	add	sp, #12
 80006fe:	bc3c      	pop	{r2, r3, r4, r5}
 8000700:	4690      	mov	r8, r2
 8000702:	4699      	mov	r9, r3
 8000704:	46a2      	mov	sl, r4
 8000706:	46ab      	mov	fp, r5
 8000708:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800070a:	2480      	movs	r4, #128	; 0x80
 800070c:	2300      	movs	r3, #0
 800070e:	03e4      	lsls	r4, r4, #15
 8000710:	21ff      	movs	r1, #255	; 0xff
 8000712:	e7ed      	b.n	80006f0 <__aeabi_fdiv+0x138>
 8000714:	21ff      	movs	r1, #255	; 0xff
 8000716:	2400      	movs	r4, #0
 8000718:	e7ea      	b.n	80006f0 <__aeabi_fdiv+0x138>
 800071a:	2301      	movs	r3, #1
 800071c:	1a59      	subs	r1, r3, r1
 800071e:	291b      	cmp	r1, #27
 8000720:	dd66      	ble.n	80007f0 <__aeabi_fdiv+0x238>
 8000722:	9a01      	ldr	r2, [sp, #4]
 8000724:	4013      	ands	r3, r2
 8000726:	2100      	movs	r1, #0
 8000728:	2400      	movs	r4, #0
 800072a:	e7e1      	b.n	80006f0 <__aeabi_fdiv+0x138>
 800072c:	2380      	movs	r3, #128	; 0x80
 800072e:	03db      	lsls	r3, r3, #15
 8000730:	421c      	tst	r4, r3
 8000732:	d038      	beq.n	80007a6 <__aeabi_fdiv+0x1ee>
 8000734:	421d      	tst	r5, r3
 8000736:	d051      	beq.n	80007dc <__aeabi_fdiv+0x224>
 8000738:	431c      	orrs	r4, r3
 800073a:	0264      	lsls	r4, r4, #9
 800073c:	0a64      	lsrs	r4, r4, #9
 800073e:	0033      	movs	r3, r6
 8000740:	21ff      	movs	r1, #255	; 0xff
 8000742:	e7d5      	b.n	80006f0 <__aeabi_fdiv+0x138>
 8000744:	0163      	lsls	r3, r4, #5
 8000746:	016c      	lsls	r4, r5, #5
 8000748:	42a3      	cmp	r3, r4
 800074a:	d23b      	bcs.n	80007c4 <__aeabi_fdiv+0x20c>
 800074c:	261b      	movs	r6, #27
 800074e:	2100      	movs	r1, #0
 8000750:	3801      	subs	r0, #1
 8000752:	2501      	movs	r5, #1
 8000754:	001f      	movs	r7, r3
 8000756:	0049      	lsls	r1, r1, #1
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	2f00      	cmp	r7, #0
 800075c:	db01      	blt.n	8000762 <__aeabi_fdiv+0x1aa>
 800075e:	429c      	cmp	r4, r3
 8000760:	d801      	bhi.n	8000766 <__aeabi_fdiv+0x1ae>
 8000762:	1b1b      	subs	r3, r3, r4
 8000764:	4329      	orrs	r1, r5
 8000766:	3e01      	subs	r6, #1
 8000768:	2e00      	cmp	r6, #0
 800076a:	d1f3      	bne.n	8000754 <__aeabi_fdiv+0x19c>
 800076c:	001c      	movs	r4, r3
 800076e:	1e63      	subs	r3, r4, #1
 8000770:	419c      	sbcs	r4, r3
 8000772:	430c      	orrs	r4, r1
 8000774:	0001      	movs	r1, r0
 8000776:	317f      	adds	r1, #127	; 0x7f
 8000778:	2900      	cmp	r1, #0
 800077a:	ddce      	ble.n	800071a <__aeabi_fdiv+0x162>
 800077c:	0763      	lsls	r3, r4, #29
 800077e:	d004      	beq.n	800078a <__aeabi_fdiv+0x1d2>
 8000780:	230f      	movs	r3, #15
 8000782:	4023      	ands	r3, r4
 8000784:	2b04      	cmp	r3, #4
 8000786:	d000      	beq.n	800078a <__aeabi_fdiv+0x1d2>
 8000788:	3404      	adds	r4, #4
 800078a:	0123      	lsls	r3, r4, #4
 800078c:	d503      	bpl.n	8000796 <__aeabi_fdiv+0x1de>
 800078e:	0001      	movs	r1, r0
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <__aeabi_fdiv+0x28c>)
 8000792:	3180      	adds	r1, #128	; 0x80
 8000794:	401c      	ands	r4, r3
 8000796:	29fe      	cmp	r1, #254	; 0xfe
 8000798:	dd0d      	ble.n	80007b6 <__aeabi_fdiv+0x1fe>
 800079a:	2301      	movs	r3, #1
 800079c:	9a01      	ldr	r2, [sp, #4]
 800079e:	21ff      	movs	r1, #255	; 0xff
 80007a0:	4013      	ands	r3, r2
 80007a2:	2400      	movs	r4, #0
 80007a4:	e7a4      	b.n	80006f0 <__aeabi_fdiv+0x138>
 80007a6:	2380      	movs	r3, #128	; 0x80
 80007a8:	03db      	lsls	r3, r3, #15
 80007aa:	431c      	orrs	r4, r3
 80007ac:	0264      	lsls	r4, r4, #9
 80007ae:	0a64      	lsrs	r4, r4, #9
 80007b0:	0033      	movs	r3, r6
 80007b2:	21ff      	movs	r1, #255	; 0xff
 80007b4:	e79c      	b.n	80006f0 <__aeabi_fdiv+0x138>
 80007b6:	2301      	movs	r3, #1
 80007b8:	9a01      	ldr	r2, [sp, #4]
 80007ba:	01a4      	lsls	r4, r4, #6
 80007bc:	0a64      	lsrs	r4, r4, #9
 80007be:	b2c9      	uxtb	r1, r1
 80007c0:	4013      	ands	r3, r2
 80007c2:	e795      	b.n	80006f0 <__aeabi_fdiv+0x138>
 80007c4:	1b1b      	subs	r3, r3, r4
 80007c6:	261a      	movs	r6, #26
 80007c8:	2101      	movs	r1, #1
 80007ca:	e7c2      	b.n	8000752 <__aeabi_fdiv+0x19a>
 80007cc:	9b00      	ldr	r3, [sp, #0]
 80007ce:	468b      	mov	fp, r1
 80007d0:	469a      	mov	sl, r3
 80007d2:	2400      	movs	r4, #0
 80007d4:	e74c      	b.n	8000670 <__aeabi_fdiv+0xb8>
 80007d6:	0263      	lsls	r3, r4, #9
 80007d8:	d5e5      	bpl.n	80007a6 <__aeabi_fdiv+0x1ee>
 80007da:	2500      	movs	r5, #0
 80007dc:	2480      	movs	r4, #128	; 0x80
 80007de:	03e4      	lsls	r4, r4, #15
 80007e0:	432c      	orrs	r4, r5
 80007e2:	0264      	lsls	r4, r4, #9
 80007e4:	0a64      	lsrs	r4, r4, #9
 80007e6:	9b00      	ldr	r3, [sp, #0]
 80007e8:	21ff      	movs	r1, #255	; 0xff
 80007ea:	e781      	b.n	80006f0 <__aeabi_fdiv+0x138>
 80007ec:	9501      	str	r5, [sp, #4]
 80007ee:	e7c1      	b.n	8000774 <__aeabi_fdiv+0x1bc>
 80007f0:	0023      	movs	r3, r4
 80007f2:	2020      	movs	r0, #32
 80007f4:	40cb      	lsrs	r3, r1
 80007f6:	1a41      	subs	r1, r0, r1
 80007f8:	408c      	lsls	r4, r1
 80007fa:	1e61      	subs	r1, r4, #1
 80007fc:	418c      	sbcs	r4, r1
 80007fe:	431c      	orrs	r4, r3
 8000800:	0763      	lsls	r3, r4, #29
 8000802:	d004      	beq.n	800080e <__aeabi_fdiv+0x256>
 8000804:	230f      	movs	r3, #15
 8000806:	4023      	ands	r3, r4
 8000808:	2b04      	cmp	r3, #4
 800080a:	d000      	beq.n	800080e <__aeabi_fdiv+0x256>
 800080c:	3404      	adds	r4, #4
 800080e:	0163      	lsls	r3, r4, #5
 8000810:	d505      	bpl.n	800081e <__aeabi_fdiv+0x266>
 8000812:	2301      	movs	r3, #1
 8000814:	9a01      	ldr	r2, [sp, #4]
 8000816:	2101      	movs	r1, #1
 8000818:	4013      	ands	r3, r2
 800081a:	2400      	movs	r4, #0
 800081c:	e768      	b.n	80006f0 <__aeabi_fdiv+0x138>
 800081e:	2301      	movs	r3, #1
 8000820:	9a01      	ldr	r2, [sp, #4]
 8000822:	01a4      	lsls	r4, r4, #6
 8000824:	0a64      	lsrs	r4, r4, #9
 8000826:	4013      	ands	r3, r2
 8000828:	2100      	movs	r1, #0
 800082a:	e761      	b.n	80006f0 <__aeabi_fdiv+0x138>
 800082c:	2380      	movs	r3, #128	; 0x80
 800082e:	03db      	lsls	r3, r3, #15
 8000830:	431c      	orrs	r4, r3
 8000832:	0264      	lsls	r4, r4, #9
 8000834:	0a64      	lsrs	r4, r4, #9
 8000836:	4653      	mov	r3, sl
 8000838:	21ff      	movs	r1, #255	; 0xff
 800083a:	e759      	b.n	80006f0 <__aeabi_fdiv+0x138>
 800083c:	080041a0 	.word	0x080041a0
 8000840:	080041e0 	.word	0x080041e0
 8000844:	f7ffffff 	.word	0xf7ffffff

08000848 <__eqsf2>:
 8000848:	b570      	push	{r4, r5, r6, lr}
 800084a:	0042      	lsls	r2, r0, #1
 800084c:	0245      	lsls	r5, r0, #9
 800084e:	024e      	lsls	r6, r1, #9
 8000850:	004c      	lsls	r4, r1, #1
 8000852:	0fc3      	lsrs	r3, r0, #31
 8000854:	0a6d      	lsrs	r5, r5, #9
 8000856:	0e12      	lsrs	r2, r2, #24
 8000858:	0a76      	lsrs	r6, r6, #9
 800085a:	0e24      	lsrs	r4, r4, #24
 800085c:	0fc9      	lsrs	r1, r1, #31
 800085e:	2001      	movs	r0, #1
 8000860:	2aff      	cmp	r2, #255	; 0xff
 8000862:	d006      	beq.n	8000872 <__eqsf2+0x2a>
 8000864:	2cff      	cmp	r4, #255	; 0xff
 8000866:	d003      	beq.n	8000870 <__eqsf2+0x28>
 8000868:	42a2      	cmp	r2, r4
 800086a:	d101      	bne.n	8000870 <__eqsf2+0x28>
 800086c:	42b5      	cmp	r5, r6
 800086e:	d006      	beq.n	800087e <__eqsf2+0x36>
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	2d00      	cmp	r5, #0
 8000874:	d1fc      	bne.n	8000870 <__eqsf2+0x28>
 8000876:	2cff      	cmp	r4, #255	; 0xff
 8000878:	d1fa      	bne.n	8000870 <__eqsf2+0x28>
 800087a:	2e00      	cmp	r6, #0
 800087c:	d1f8      	bne.n	8000870 <__eqsf2+0x28>
 800087e:	428b      	cmp	r3, r1
 8000880:	d006      	beq.n	8000890 <__eqsf2+0x48>
 8000882:	2001      	movs	r0, #1
 8000884:	2a00      	cmp	r2, #0
 8000886:	d1f3      	bne.n	8000870 <__eqsf2+0x28>
 8000888:	0028      	movs	r0, r5
 800088a:	1e45      	subs	r5, r0, #1
 800088c:	41a8      	sbcs	r0, r5
 800088e:	e7ef      	b.n	8000870 <__eqsf2+0x28>
 8000890:	2000      	movs	r0, #0
 8000892:	e7ed      	b.n	8000870 <__eqsf2+0x28>

08000894 <__gesf2>:
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	0042      	lsls	r2, r0, #1
 8000898:	0245      	lsls	r5, r0, #9
 800089a:	024c      	lsls	r4, r1, #9
 800089c:	0fc3      	lsrs	r3, r0, #31
 800089e:	0048      	lsls	r0, r1, #1
 80008a0:	0a6d      	lsrs	r5, r5, #9
 80008a2:	0e12      	lsrs	r2, r2, #24
 80008a4:	0a64      	lsrs	r4, r4, #9
 80008a6:	0e00      	lsrs	r0, r0, #24
 80008a8:	0fc9      	lsrs	r1, r1, #31
 80008aa:	2aff      	cmp	r2, #255	; 0xff
 80008ac:	d01e      	beq.n	80008ec <__gesf2+0x58>
 80008ae:	28ff      	cmp	r0, #255	; 0xff
 80008b0:	d021      	beq.n	80008f6 <__gesf2+0x62>
 80008b2:	2a00      	cmp	r2, #0
 80008b4:	d10a      	bne.n	80008cc <__gesf2+0x38>
 80008b6:	426e      	negs	r6, r5
 80008b8:	416e      	adcs	r6, r5
 80008ba:	b2f6      	uxtb	r6, r6
 80008bc:	2800      	cmp	r0, #0
 80008be:	d10f      	bne.n	80008e0 <__gesf2+0x4c>
 80008c0:	2c00      	cmp	r4, #0
 80008c2:	d10d      	bne.n	80008e0 <__gesf2+0x4c>
 80008c4:	2000      	movs	r0, #0
 80008c6:	2d00      	cmp	r5, #0
 80008c8:	d009      	beq.n	80008de <__gesf2+0x4a>
 80008ca:	e005      	b.n	80008d8 <__gesf2+0x44>
 80008cc:	2800      	cmp	r0, #0
 80008ce:	d101      	bne.n	80008d4 <__gesf2+0x40>
 80008d0:	2c00      	cmp	r4, #0
 80008d2:	d001      	beq.n	80008d8 <__gesf2+0x44>
 80008d4:	428b      	cmp	r3, r1
 80008d6:	d011      	beq.n	80008fc <__gesf2+0x68>
 80008d8:	2101      	movs	r1, #1
 80008da:	4258      	negs	r0, r3
 80008dc:	4308      	orrs	r0, r1
 80008de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d0f7      	beq.n	80008d4 <__gesf2+0x40>
 80008e4:	2001      	movs	r0, #1
 80008e6:	3901      	subs	r1, #1
 80008e8:	4308      	orrs	r0, r1
 80008ea:	e7f8      	b.n	80008de <__gesf2+0x4a>
 80008ec:	2d00      	cmp	r5, #0
 80008ee:	d0de      	beq.n	80008ae <__gesf2+0x1a>
 80008f0:	2002      	movs	r0, #2
 80008f2:	4240      	negs	r0, r0
 80008f4:	e7f3      	b.n	80008de <__gesf2+0x4a>
 80008f6:	2c00      	cmp	r4, #0
 80008f8:	d0db      	beq.n	80008b2 <__gesf2+0x1e>
 80008fa:	e7f9      	b.n	80008f0 <__gesf2+0x5c>
 80008fc:	4282      	cmp	r2, r0
 80008fe:	dceb      	bgt.n	80008d8 <__gesf2+0x44>
 8000900:	db04      	blt.n	800090c <__gesf2+0x78>
 8000902:	42a5      	cmp	r5, r4
 8000904:	d8e8      	bhi.n	80008d8 <__gesf2+0x44>
 8000906:	2000      	movs	r0, #0
 8000908:	42a5      	cmp	r5, r4
 800090a:	d2e8      	bcs.n	80008de <__gesf2+0x4a>
 800090c:	2101      	movs	r1, #1
 800090e:	1e58      	subs	r0, r3, #1
 8000910:	4308      	orrs	r0, r1
 8000912:	e7e4      	b.n	80008de <__gesf2+0x4a>

08000914 <__lesf2>:
 8000914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000916:	0042      	lsls	r2, r0, #1
 8000918:	024d      	lsls	r5, r1, #9
 800091a:	004c      	lsls	r4, r1, #1
 800091c:	0246      	lsls	r6, r0, #9
 800091e:	0a76      	lsrs	r6, r6, #9
 8000920:	0e12      	lsrs	r2, r2, #24
 8000922:	0fc3      	lsrs	r3, r0, #31
 8000924:	0a6d      	lsrs	r5, r5, #9
 8000926:	0e24      	lsrs	r4, r4, #24
 8000928:	0fc9      	lsrs	r1, r1, #31
 800092a:	2aff      	cmp	r2, #255	; 0xff
 800092c:	d016      	beq.n	800095c <__lesf2+0x48>
 800092e:	2cff      	cmp	r4, #255	; 0xff
 8000930:	d018      	beq.n	8000964 <__lesf2+0x50>
 8000932:	2a00      	cmp	r2, #0
 8000934:	d10a      	bne.n	800094c <__lesf2+0x38>
 8000936:	4270      	negs	r0, r6
 8000938:	4170      	adcs	r0, r6
 800093a:	b2c0      	uxtb	r0, r0
 800093c:	2c00      	cmp	r4, #0
 800093e:	d015      	beq.n	800096c <__lesf2+0x58>
 8000940:	2800      	cmp	r0, #0
 8000942:	d005      	beq.n	8000950 <__lesf2+0x3c>
 8000944:	2001      	movs	r0, #1
 8000946:	3901      	subs	r1, #1
 8000948:	4308      	orrs	r0, r1
 800094a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094c:	2c00      	cmp	r4, #0
 800094e:	d013      	beq.n	8000978 <__lesf2+0x64>
 8000950:	4299      	cmp	r1, r3
 8000952:	d014      	beq.n	800097e <__lesf2+0x6a>
 8000954:	2001      	movs	r0, #1
 8000956:	425b      	negs	r3, r3
 8000958:	4318      	orrs	r0, r3
 800095a:	e7f6      	b.n	800094a <__lesf2+0x36>
 800095c:	2002      	movs	r0, #2
 800095e:	2e00      	cmp	r6, #0
 8000960:	d1f3      	bne.n	800094a <__lesf2+0x36>
 8000962:	e7e4      	b.n	800092e <__lesf2+0x1a>
 8000964:	2002      	movs	r0, #2
 8000966:	2d00      	cmp	r5, #0
 8000968:	d1ef      	bne.n	800094a <__lesf2+0x36>
 800096a:	e7e2      	b.n	8000932 <__lesf2+0x1e>
 800096c:	2d00      	cmp	r5, #0
 800096e:	d1e7      	bne.n	8000940 <__lesf2+0x2c>
 8000970:	2000      	movs	r0, #0
 8000972:	2e00      	cmp	r6, #0
 8000974:	d0e9      	beq.n	800094a <__lesf2+0x36>
 8000976:	e7ed      	b.n	8000954 <__lesf2+0x40>
 8000978:	2d00      	cmp	r5, #0
 800097a:	d1e9      	bne.n	8000950 <__lesf2+0x3c>
 800097c:	e7ea      	b.n	8000954 <__lesf2+0x40>
 800097e:	42a2      	cmp	r2, r4
 8000980:	dc06      	bgt.n	8000990 <__lesf2+0x7c>
 8000982:	dbdf      	blt.n	8000944 <__lesf2+0x30>
 8000984:	42ae      	cmp	r6, r5
 8000986:	d803      	bhi.n	8000990 <__lesf2+0x7c>
 8000988:	2000      	movs	r0, #0
 800098a:	42ae      	cmp	r6, r5
 800098c:	d3da      	bcc.n	8000944 <__lesf2+0x30>
 800098e:	e7dc      	b.n	800094a <__lesf2+0x36>
 8000990:	2001      	movs	r0, #1
 8000992:	4249      	negs	r1, r1
 8000994:	4308      	orrs	r0, r1
 8000996:	e7d8      	b.n	800094a <__lesf2+0x36>

08000998 <__aeabi_fmul>:
 8000998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099a:	4657      	mov	r7, sl
 800099c:	464e      	mov	r6, r9
 800099e:	4645      	mov	r5, r8
 80009a0:	46de      	mov	lr, fp
 80009a2:	b5e0      	push	{r5, r6, r7, lr}
 80009a4:	0247      	lsls	r7, r0, #9
 80009a6:	0046      	lsls	r6, r0, #1
 80009a8:	4688      	mov	r8, r1
 80009aa:	0a7f      	lsrs	r7, r7, #9
 80009ac:	0e36      	lsrs	r6, r6, #24
 80009ae:	0fc4      	lsrs	r4, r0, #31
 80009b0:	2e00      	cmp	r6, #0
 80009b2:	d047      	beq.n	8000a44 <__aeabi_fmul+0xac>
 80009b4:	2eff      	cmp	r6, #255	; 0xff
 80009b6:	d024      	beq.n	8000a02 <__aeabi_fmul+0x6a>
 80009b8:	00fb      	lsls	r3, r7, #3
 80009ba:	2780      	movs	r7, #128	; 0x80
 80009bc:	04ff      	lsls	r7, r7, #19
 80009be:	431f      	orrs	r7, r3
 80009c0:	2300      	movs	r3, #0
 80009c2:	4699      	mov	r9, r3
 80009c4:	469a      	mov	sl, r3
 80009c6:	3e7f      	subs	r6, #127	; 0x7f
 80009c8:	4643      	mov	r3, r8
 80009ca:	025d      	lsls	r5, r3, #9
 80009cc:	0058      	lsls	r0, r3, #1
 80009ce:	0fdb      	lsrs	r3, r3, #31
 80009d0:	0a6d      	lsrs	r5, r5, #9
 80009d2:	0e00      	lsrs	r0, r0, #24
 80009d4:	4698      	mov	r8, r3
 80009d6:	d043      	beq.n	8000a60 <__aeabi_fmul+0xc8>
 80009d8:	28ff      	cmp	r0, #255	; 0xff
 80009da:	d03b      	beq.n	8000a54 <__aeabi_fmul+0xbc>
 80009dc:	00eb      	lsls	r3, r5, #3
 80009de:	2580      	movs	r5, #128	; 0x80
 80009e0:	2200      	movs	r2, #0
 80009e2:	04ed      	lsls	r5, r5, #19
 80009e4:	431d      	orrs	r5, r3
 80009e6:	387f      	subs	r0, #127	; 0x7f
 80009e8:	1836      	adds	r6, r6, r0
 80009ea:	1c73      	adds	r3, r6, #1
 80009ec:	4641      	mov	r1, r8
 80009ee:	469b      	mov	fp, r3
 80009f0:	464b      	mov	r3, r9
 80009f2:	4061      	eors	r1, r4
 80009f4:	4313      	orrs	r3, r2
 80009f6:	2b0f      	cmp	r3, #15
 80009f8:	d864      	bhi.n	8000ac4 <__aeabi_fmul+0x12c>
 80009fa:	4875      	ldr	r0, [pc, #468]	; (8000bd0 <__aeabi_fmul+0x238>)
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	58c3      	ldr	r3, [r0, r3]
 8000a00:	469f      	mov	pc, r3
 8000a02:	2f00      	cmp	r7, #0
 8000a04:	d142      	bne.n	8000a8c <__aeabi_fmul+0xf4>
 8000a06:	2308      	movs	r3, #8
 8000a08:	4699      	mov	r9, r3
 8000a0a:	3b06      	subs	r3, #6
 8000a0c:	26ff      	movs	r6, #255	; 0xff
 8000a0e:	469a      	mov	sl, r3
 8000a10:	e7da      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000a12:	4641      	mov	r1, r8
 8000a14:	2a02      	cmp	r2, #2
 8000a16:	d028      	beq.n	8000a6a <__aeabi_fmul+0xd2>
 8000a18:	2a03      	cmp	r2, #3
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fmul+0x86>
 8000a1c:	e0ce      	b.n	8000bbc <__aeabi_fmul+0x224>
 8000a1e:	2a01      	cmp	r2, #1
 8000a20:	d000      	beq.n	8000a24 <__aeabi_fmul+0x8c>
 8000a22:	e0ac      	b.n	8000b7e <__aeabi_fmul+0x1e6>
 8000a24:	4011      	ands	r1, r2
 8000a26:	2000      	movs	r0, #0
 8000a28:	2200      	movs	r2, #0
 8000a2a:	b2cc      	uxtb	r4, r1
 8000a2c:	0240      	lsls	r0, r0, #9
 8000a2e:	05d2      	lsls	r2, r2, #23
 8000a30:	0a40      	lsrs	r0, r0, #9
 8000a32:	07e4      	lsls	r4, r4, #31
 8000a34:	4310      	orrs	r0, r2
 8000a36:	4320      	orrs	r0, r4
 8000a38:	bc3c      	pop	{r2, r3, r4, r5}
 8000a3a:	4690      	mov	r8, r2
 8000a3c:	4699      	mov	r9, r3
 8000a3e:	46a2      	mov	sl, r4
 8000a40:	46ab      	mov	fp, r5
 8000a42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a44:	2f00      	cmp	r7, #0
 8000a46:	d115      	bne.n	8000a74 <__aeabi_fmul+0xdc>
 8000a48:	2304      	movs	r3, #4
 8000a4a:	4699      	mov	r9, r3
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	2600      	movs	r6, #0
 8000a50:	469a      	mov	sl, r3
 8000a52:	e7b9      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000a54:	20ff      	movs	r0, #255	; 0xff
 8000a56:	2202      	movs	r2, #2
 8000a58:	2d00      	cmp	r5, #0
 8000a5a:	d0c5      	beq.n	80009e8 <__aeabi_fmul+0x50>
 8000a5c:	2203      	movs	r2, #3
 8000a5e:	e7c3      	b.n	80009e8 <__aeabi_fmul+0x50>
 8000a60:	2d00      	cmp	r5, #0
 8000a62:	d119      	bne.n	8000a98 <__aeabi_fmul+0x100>
 8000a64:	2000      	movs	r0, #0
 8000a66:	2201      	movs	r2, #1
 8000a68:	e7be      	b.n	80009e8 <__aeabi_fmul+0x50>
 8000a6a:	2401      	movs	r4, #1
 8000a6c:	22ff      	movs	r2, #255	; 0xff
 8000a6e:	400c      	ands	r4, r1
 8000a70:	2000      	movs	r0, #0
 8000a72:	e7db      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000a74:	0038      	movs	r0, r7
 8000a76:	f000 f945 	bl	8000d04 <__clzsi2>
 8000a7a:	2676      	movs	r6, #118	; 0x76
 8000a7c:	1f43      	subs	r3, r0, #5
 8000a7e:	409f      	lsls	r7, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	4276      	negs	r6, r6
 8000a84:	1a36      	subs	r6, r6, r0
 8000a86:	4699      	mov	r9, r3
 8000a88:	469a      	mov	sl, r3
 8000a8a:	e79d      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	4699      	mov	r9, r3
 8000a90:	3b09      	subs	r3, #9
 8000a92:	26ff      	movs	r6, #255	; 0xff
 8000a94:	469a      	mov	sl, r3
 8000a96:	e797      	b.n	80009c8 <__aeabi_fmul+0x30>
 8000a98:	0028      	movs	r0, r5
 8000a9a:	f000 f933 	bl	8000d04 <__clzsi2>
 8000a9e:	1f43      	subs	r3, r0, #5
 8000aa0:	409d      	lsls	r5, r3
 8000aa2:	2376      	movs	r3, #118	; 0x76
 8000aa4:	425b      	negs	r3, r3
 8000aa6:	1a18      	subs	r0, r3, r0
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	e79d      	b.n	80009e8 <__aeabi_fmul+0x50>
 8000aac:	2080      	movs	r0, #128	; 0x80
 8000aae:	2400      	movs	r4, #0
 8000ab0:	03c0      	lsls	r0, r0, #15
 8000ab2:	22ff      	movs	r2, #255	; 0xff
 8000ab4:	e7ba      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000ab6:	003d      	movs	r5, r7
 8000ab8:	4652      	mov	r2, sl
 8000aba:	e7ab      	b.n	8000a14 <__aeabi_fmul+0x7c>
 8000abc:	003d      	movs	r5, r7
 8000abe:	0021      	movs	r1, r4
 8000ac0:	4652      	mov	r2, sl
 8000ac2:	e7a7      	b.n	8000a14 <__aeabi_fmul+0x7c>
 8000ac4:	0c3b      	lsrs	r3, r7, #16
 8000ac6:	469c      	mov	ip, r3
 8000ac8:	042a      	lsls	r2, r5, #16
 8000aca:	0c12      	lsrs	r2, r2, #16
 8000acc:	0c2b      	lsrs	r3, r5, #16
 8000ace:	0014      	movs	r4, r2
 8000ad0:	4660      	mov	r0, ip
 8000ad2:	4665      	mov	r5, ip
 8000ad4:	043f      	lsls	r7, r7, #16
 8000ad6:	0c3f      	lsrs	r7, r7, #16
 8000ad8:	437c      	muls	r4, r7
 8000ada:	4342      	muls	r2, r0
 8000adc:	435d      	muls	r5, r3
 8000ade:	437b      	muls	r3, r7
 8000ae0:	0c27      	lsrs	r7, r4, #16
 8000ae2:	189b      	adds	r3, r3, r2
 8000ae4:	18ff      	adds	r7, r7, r3
 8000ae6:	42ba      	cmp	r2, r7
 8000ae8:	d903      	bls.n	8000af2 <__aeabi_fmul+0x15a>
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	025b      	lsls	r3, r3, #9
 8000aee:	469c      	mov	ip, r3
 8000af0:	4465      	add	r5, ip
 8000af2:	0424      	lsls	r4, r4, #16
 8000af4:	043a      	lsls	r2, r7, #16
 8000af6:	0c24      	lsrs	r4, r4, #16
 8000af8:	1912      	adds	r2, r2, r4
 8000afa:	0193      	lsls	r3, r2, #6
 8000afc:	1e5c      	subs	r4, r3, #1
 8000afe:	41a3      	sbcs	r3, r4
 8000b00:	0c3f      	lsrs	r7, r7, #16
 8000b02:	0e92      	lsrs	r2, r2, #26
 8000b04:	197d      	adds	r5, r7, r5
 8000b06:	431a      	orrs	r2, r3
 8000b08:	01ad      	lsls	r5, r5, #6
 8000b0a:	4315      	orrs	r5, r2
 8000b0c:	012b      	lsls	r3, r5, #4
 8000b0e:	d504      	bpl.n	8000b1a <__aeabi_fmul+0x182>
 8000b10:	2301      	movs	r3, #1
 8000b12:	465e      	mov	r6, fp
 8000b14:	086a      	lsrs	r2, r5, #1
 8000b16:	401d      	ands	r5, r3
 8000b18:	4315      	orrs	r5, r2
 8000b1a:	0032      	movs	r2, r6
 8000b1c:	327f      	adds	r2, #127	; 0x7f
 8000b1e:	2a00      	cmp	r2, #0
 8000b20:	dd25      	ble.n	8000b6e <__aeabi_fmul+0x1d6>
 8000b22:	076b      	lsls	r3, r5, #29
 8000b24:	d004      	beq.n	8000b30 <__aeabi_fmul+0x198>
 8000b26:	230f      	movs	r3, #15
 8000b28:	402b      	ands	r3, r5
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	d000      	beq.n	8000b30 <__aeabi_fmul+0x198>
 8000b2e:	3504      	adds	r5, #4
 8000b30:	012b      	lsls	r3, r5, #4
 8000b32:	d503      	bpl.n	8000b3c <__aeabi_fmul+0x1a4>
 8000b34:	0032      	movs	r2, r6
 8000b36:	4b27      	ldr	r3, [pc, #156]	; (8000bd4 <__aeabi_fmul+0x23c>)
 8000b38:	3280      	adds	r2, #128	; 0x80
 8000b3a:	401d      	ands	r5, r3
 8000b3c:	2afe      	cmp	r2, #254	; 0xfe
 8000b3e:	dc94      	bgt.n	8000a6a <__aeabi_fmul+0xd2>
 8000b40:	2401      	movs	r4, #1
 8000b42:	01a8      	lsls	r0, r5, #6
 8000b44:	0a40      	lsrs	r0, r0, #9
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	400c      	ands	r4, r1
 8000b4a:	e76f      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000b4c:	2080      	movs	r0, #128	; 0x80
 8000b4e:	03c0      	lsls	r0, r0, #15
 8000b50:	4207      	tst	r7, r0
 8000b52:	d007      	beq.n	8000b64 <__aeabi_fmul+0x1cc>
 8000b54:	4205      	tst	r5, r0
 8000b56:	d105      	bne.n	8000b64 <__aeabi_fmul+0x1cc>
 8000b58:	4328      	orrs	r0, r5
 8000b5a:	0240      	lsls	r0, r0, #9
 8000b5c:	0a40      	lsrs	r0, r0, #9
 8000b5e:	4644      	mov	r4, r8
 8000b60:	22ff      	movs	r2, #255	; 0xff
 8000b62:	e763      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000b64:	4338      	orrs	r0, r7
 8000b66:	0240      	lsls	r0, r0, #9
 8000b68:	0a40      	lsrs	r0, r0, #9
 8000b6a:	22ff      	movs	r2, #255	; 0xff
 8000b6c:	e75e      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000b6e:	2401      	movs	r4, #1
 8000b70:	1aa3      	subs	r3, r4, r2
 8000b72:	2b1b      	cmp	r3, #27
 8000b74:	dd05      	ble.n	8000b82 <__aeabi_fmul+0x1ea>
 8000b76:	400c      	ands	r4, r1
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	e756      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000b7e:	465e      	mov	r6, fp
 8000b80:	e7cb      	b.n	8000b1a <__aeabi_fmul+0x182>
 8000b82:	002a      	movs	r2, r5
 8000b84:	2020      	movs	r0, #32
 8000b86:	40da      	lsrs	r2, r3
 8000b88:	1ac3      	subs	r3, r0, r3
 8000b8a:	409d      	lsls	r5, r3
 8000b8c:	002b      	movs	r3, r5
 8000b8e:	1e5d      	subs	r5, r3, #1
 8000b90:	41ab      	sbcs	r3, r5
 8000b92:	4313      	orrs	r3, r2
 8000b94:	075a      	lsls	r2, r3, #29
 8000b96:	d004      	beq.n	8000ba2 <__aeabi_fmul+0x20a>
 8000b98:	220f      	movs	r2, #15
 8000b9a:	401a      	ands	r2, r3
 8000b9c:	2a04      	cmp	r2, #4
 8000b9e:	d000      	beq.n	8000ba2 <__aeabi_fmul+0x20a>
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	015a      	lsls	r2, r3, #5
 8000ba4:	d504      	bpl.n	8000bb0 <__aeabi_fmul+0x218>
 8000ba6:	2401      	movs	r4, #1
 8000ba8:	2201      	movs	r2, #1
 8000baa:	400c      	ands	r4, r1
 8000bac:	2000      	movs	r0, #0
 8000bae:	e73d      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000bb0:	2401      	movs	r4, #1
 8000bb2:	019b      	lsls	r3, r3, #6
 8000bb4:	0a58      	lsrs	r0, r3, #9
 8000bb6:	400c      	ands	r4, r1
 8000bb8:	2200      	movs	r2, #0
 8000bba:	e737      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000bbc:	2080      	movs	r0, #128	; 0x80
 8000bbe:	2401      	movs	r4, #1
 8000bc0:	03c0      	lsls	r0, r0, #15
 8000bc2:	4328      	orrs	r0, r5
 8000bc4:	0240      	lsls	r0, r0, #9
 8000bc6:	0a40      	lsrs	r0, r0, #9
 8000bc8:	400c      	ands	r4, r1
 8000bca:	22ff      	movs	r2, #255	; 0xff
 8000bcc:	e72e      	b.n	8000a2c <__aeabi_fmul+0x94>
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	08004220 	.word	0x08004220
 8000bd4:	f7ffffff 	.word	0xf7ffffff

08000bd8 <__aeabi_i2f>:
 8000bd8:	b570      	push	{r4, r5, r6, lr}
 8000bda:	2800      	cmp	r0, #0
 8000bdc:	d030      	beq.n	8000c40 <__aeabi_i2f+0x68>
 8000bde:	17c3      	asrs	r3, r0, #31
 8000be0:	18c4      	adds	r4, r0, r3
 8000be2:	405c      	eors	r4, r3
 8000be4:	0fc5      	lsrs	r5, r0, #31
 8000be6:	0020      	movs	r0, r4
 8000be8:	f000 f88c 	bl	8000d04 <__clzsi2>
 8000bec:	239e      	movs	r3, #158	; 0x9e
 8000bee:	1a1b      	subs	r3, r3, r0
 8000bf0:	2b96      	cmp	r3, #150	; 0x96
 8000bf2:	dc0d      	bgt.n	8000c10 <__aeabi_i2f+0x38>
 8000bf4:	2296      	movs	r2, #150	; 0x96
 8000bf6:	1ad2      	subs	r2, r2, r3
 8000bf8:	4094      	lsls	r4, r2
 8000bfa:	002a      	movs	r2, r5
 8000bfc:	0264      	lsls	r4, r4, #9
 8000bfe:	0a64      	lsrs	r4, r4, #9
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	0264      	lsls	r4, r4, #9
 8000c04:	05db      	lsls	r3, r3, #23
 8000c06:	0a60      	lsrs	r0, r4, #9
 8000c08:	07d2      	lsls	r2, r2, #31
 8000c0a:	4318      	orrs	r0, r3
 8000c0c:	4310      	orrs	r0, r2
 8000c0e:	bd70      	pop	{r4, r5, r6, pc}
 8000c10:	2b99      	cmp	r3, #153	; 0x99
 8000c12:	dc19      	bgt.n	8000c48 <__aeabi_i2f+0x70>
 8000c14:	2299      	movs	r2, #153	; 0x99
 8000c16:	1ad2      	subs	r2, r2, r3
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	dd29      	ble.n	8000c70 <__aeabi_i2f+0x98>
 8000c1c:	4094      	lsls	r4, r2
 8000c1e:	0022      	movs	r2, r4
 8000c20:	4c14      	ldr	r4, [pc, #80]	; (8000c74 <__aeabi_i2f+0x9c>)
 8000c22:	4014      	ands	r4, r2
 8000c24:	0751      	lsls	r1, r2, #29
 8000c26:	d004      	beq.n	8000c32 <__aeabi_i2f+0x5a>
 8000c28:	210f      	movs	r1, #15
 8000c2a:	400a      	ands	r2, r1
 8000c2c:	2a04      	cmp	r2, #4
 8000c2e:	d000      	beq.n	8000c32 <__aeabi_i2f+0x5a>
 8000c30:	3404      	adds	r4, #4
 8000c32:	0162      	lsls	r2, r4, #5
 8000c34:	d413      	bmi.n	8000c5e <__aeabi_i2f+0x86>
 8000c36:	01a4      	lsls	r4, r4, #6
 8000c38:	0a64      	lsrs	r4, r4, #9
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	002a      	movs	r2, r5
 8000c3e:	e7e0      	b.n	8000c02 <__aeabi_i2f+0x2a>
 8000c40:	2200      	movs	r2, #0
 8000c42:	2300      	movs	r3, #0
 8000c44:	2400      	movs	r4, #0
 8000c46:	e7dc      	b.n	8000c02 <__aeabi_i2f+0x2a>
 8000c48:	2205      	movs	r2, #5
 8000c4a:	0021      	movs	r1, r4
 8000c4c:	1a12      	subs	r2, r2, r0
 8000c4e:	40d1      	lsrs	r1, r2
 8000c50:	22b9      	movs	r2, #185	; 0xb9
 8000c52:	1ad2      	subs	r2, r2, r3
 8000c54:	4094      	lsls	r4, r2
 8000c56:	1e62      	subs	r2, r4, #1
 8000c58:	4194      	sbcs	r4, r2
 8000c5a:	430c      	orrs	r4, r1
 8000c5c:	e7da      	b.n	8000c14 <__aeabi_i2f+0x3c>
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <__aeabi_i2f+0x9c>)
 8000c60:	002a      	movs	r2, r5
 8000c62:	401c      	ands	r4, r3
 8000c64:	239f      	movs	r3, #159	; 0x9f
 8000c66:	01a4      	lsls	r4, r4, #6
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	0a64      	lsrs	r4, r4, #9
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	e7c8      	b.n	8000c02 <__aeabi_i2f+0x2a>
 8000c70:	0022      	movs	r2, r4
 8000c72:	e7d5      	b.n	8000c20 <__aeabi_i2f+0x48>
 8000c74:	fbffffff 	.word	0xfbffffff

08000c78 <__aeabi_ui2f>:
 8000c78:	b510      	push	{r4, lr}
 8000c7a:	1e04      	subs	r4, r0, #0
 8000c7c:	d027      	beq.n	8000cce <__aeabi_ui2f+0x56>
 8000c7e:	f000 f841 	bl	8000d04 <__clzsi2>
 8000c82:	239e      	movs	r3, #158	; 0x9e
 8000c84:	1a1b      	subs	r3, r3, r0
 8000c86:	2b96      	cmp	r3, #150	; 0x96
 8000c88:	dc0a      	bgt.n	8000ca0 <__aeabi_ui2f+0x28>
 8000c8a:	2296      	movs	r2, #150	; 0x96
 8000c8c:	1ad2      	subs	r2, r2, r3
 8000c8e:	4094      	lsls	r4, r2
 8000c90:	0264      	lsls	r4, r4, #9
 8000c92:	0a64      	lsrs	r4, r4, #9
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	0264      	lsls	r4, r4, #9
 8000c98:	05db      	lsls	r3, r3, #23
 8000c9a:	0a60      	lsrs	r0, r4, #9
 8000c9c:	4318      	orrs	r0, r3
 8000c9e:	bd10      	pop	{r4, pc}
 8000ca0:	2b99      	cmp	r3, #153	; 0x99
 8000ca2:	dc17      	bgt.n	8000cd4 <__aeabi_ui2f+0x5c>
 8000ca4:	2299      	movs	r2, #153	; 0x99
 8000ca6:	1ad2      	subs	r2, r2, r3
 8000ca8:	2a00      	cmp	r2, #0
 8000caa:	dd27      	ble.n	8000cfc <__aeabi_ui2f+0x84>
 8000cac:	4094      	lsls	r4, r2
 8000cae:	0022      	movs	r2, r4
 8000cb0:	4c13      	ldr	r4, [pc, #76]	; (8000d00 <__aeabi_ui2f+0x88>)
 8000cb2:	4014      	ands	r4, r2
 8000cb4:	0751      	lsls	r1, r2, #29
 8000cb6:	d004      	beq.n	8000cc2 <__aeabi_ui2f+0x4a>
 8000cb8:	210f      	movs	r1, #15
 8000cba:	400a      	ands	r2, r1
 8000cbc:	2a04      	cmp	r2, #4
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_ui2f+0x4a>
 8000cc0:	3404      	adds	r4, #4
 8000cc2:	0162      	lsls	r2, r4, #5
 8000cc4:	d412      	bmi.n	8000cec <__aeabi_ui2f+0x74>
 8000cc6:	01a4      	lsls	r4, r4, #6
 8000cc8:	0a64      	lsrs	r4, r4, #9
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	e7e3      	b.n	8000c96 <__aeabi_ui2f+0x1e>
 8000cce:	2300      	movs	r3, #0
 8000cd0:	2400      	movs	r4, #0
 8000cd2:	e7e0      	b.n	8000c96 <__aeabi_ui2f+0x1e>
 8000cd4:	22b9      	movs	r2, #185	; 0xb9
 8000cd6:	0021      	movs	r1, r4
 8000cd8:	1ad2      	subs	r2, r2, r3
 8000cda:	4091      	lsls	r1, r2
 8000cdc:	000a      	movs	r2, r1
 8000cde:	1e51      	subs	r1, r2, #1
 8000ce0:	418a      	sbcs	r2, r1
 8000ce2:	2105      	movs	r1, #5
 8000ce4:	1a09      	subs	r1, r1, r0
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	4314      	orrs	r4, r2
 8000cea:	e7db      	b.n	8000ca4 <__aeabi_ui2f+0x2c>
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__aeabi_ui2f+0x88>)
 8000cee:	401c      	ands	r4, r3
 8000cf0:	239f      	movs	r3, #159	; 0x9f
 8000cf2:	01a4      	lsls	r4, r4, #6
 8000cf4:	1a1b      	subs	r3, r3, r0
 8000cf6:	0a64      	lsrs	r4, r4, #9
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	e7cc      	b.n	8000c96 <__aeabi_ui2f+0x1e>
 8000cfc:	0022      	movs	r2, r4
 8000cfe:	e7d7      	b.n	8000cb0 <__aeabi_ui2f+0x38>
 8000d00:	fbffffff 	.word	0xfbffffff

08000d04 <__clzsi2>:
 8000d04:	211c      	movs	r1, #28
 8000d06:	2301      	movs	r3, #1
 8000d08:	041b      	lsls	r3, r3, #16
 8000d0a:	4298      	cmp	r0, r3
 8000d0c:	d301      	bcc.n	8000d12 <__clzsi2+0xe>
 8000d0e:	0c00      	lsrs	r0, r0, #16
 8000d10:	3910      	subs	r1, #16
 8000d12:	0a1b      	lsrs	r3, r3, #8
 8000d14:	4298      	cmp	r0, r3
 8000d16:	d301      	bcc.n	8000d1c <__clzsi2+0x18>
 8000d18:	0a00      	lsrs	r0, r0, #8
 8000d1a:	3908      	subs	r1, #8
 8000d1c:	091b      	lsrs	r3, r3, #4
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d301      	bcc.n	8000d26 <__clzsi2+0x22>
 8000d22:	0900      	lsrs	r0, r0, #4
 8000d24:	3904      	subs	r1, #4
 8000d26:	a202      	add	r2, pc, #8	; (adr r2, 8000d30 <__clzsi2+0x2c>)
 8000d28:	5c10      	ldrb	r0, [r2, r0]
 8000d2a:	1840      	adds	r0, r0, r1
 8000d2c:	4770      	bx	lr
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	02020304 	.word	0x02020304
 8000d34:	01010101 	.word	0x01010101
	...

08000d40 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <HAL_Init+0x24>)
 8000d46:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_Init+0x24>)
 8000d48:	6812      	ldr	r2, [r2, #0]
 8000d4a:	2110      	movs	r1, #16
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000d50:	2000      	movs	r0, #0
 8000d52:	f000 f809 	bl	8000d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d56:	f003 f881 	bl	8003e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	40022000 	.word	0x40022000

08000d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000d70:	f002 f8a6 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8000d74:	0002      	movs	r2, r0
 8000d76:	23fa      	movs	r3, #250	; 0xfa
 8000d78:	0099      	lsls	r1, r3, #2
 8000d7a:	0010      	movs	r0, r2
 8000d7c:	f7ff f9c4 	bl	8000108 <__udivsi3>
 8000d80:	0003      	movs	r3, r0
 8000d82:	0018      	movs	r0, r3
 8000d84:	f001 fa08 	bl	8002198 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	425b      	negs	r3, r3
 8000d8e:	2200      	movs	r2, #0
 8000d90:	0018      	movs	r0, r3
 8000d92:	f001 f9db 	bl	800214c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  uwTick++;
 8000da4:	4b03      	ldr	r3, [pc, #12]	; (8000db4 <HAL_IncTick+0x14>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	1c5a      	adds	r2, r3, #1
 8000daa:	4b02      	ldr	r3, [pc, #8]	; (8000db4 <HAL_IncTick+0x14>)
 8000dac:	601a      	str	r2, [r3, #0]
}
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000024 	.word	0x20000024

08000db8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b02      	ldr	r3, [pc, #8]	; (8000dc8 <HAL_GetTick+0x10>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20000024 	.word	0x20000024

08000dcc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	18fb      	adds	r3, r7, r3
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d101      	bne.n	8000dea <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e124      	b.n	8001034 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10a      	bne.n	8000e08 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2240      	movs	r2, #64	; 0x40
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	0018      	movs	r0, r3
 8000e04:	f003 f854 	bl	8003eb0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	2210      	movs	r2, #16
 8000e0e:	4013      	ands	r3, r2
 8000e10:	d000      	beq.n	8000e14 <HAL_ADC_Init+0x48>
 8000e12:	e102      	b.n	800101a <HAL_ADC_Init+0x24e>
 8000e14:	230f      	movs	r3, #15
 8000e16:	18fb      	adds	r3, r7, r3
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d000      	beq.n	8000e20 <HAL_ADC_Init+0x54>
 8000e1e:	e0fc      	b.n	800101a <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2204      	movs	r2, #4
 8000e28:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000e2a:	d000      	beq.n	8000e2e <HAL_ADC_Init+0x62>
 8000e2c:	e0f5      	b.n	800101a <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	4a82      	ldr	r2, [pc, #520]	; (800103c <HAL_ADC_Init+0x270>)
 8000e34:	4013      	ands	r3, r2
 8000e36:	2202      	movs	r2, #2
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	689b      	ldr	r3, [r3, #8]
 8000e44:	2203      	movs	r2, #3
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d112      	bne.n	8000e72 <HAL_ADC_Init+0xa6>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	2201      	movs	r2, #1
 8000e54:	4013      	ands	r3, r2
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d009      	beq.n	8000e6e <HAL_ADC_Init+0xa2>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	2380      	movs	r3, #128	; 0x80
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	401a      	ands	r2, r3
 8000e66:	2380      	movs	r3, #128	; 0x80
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d101      	bne.n	8000e72 <HAL_ADC_Init+0xa6>
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <HAL_ADC_Init+0xa8>
 8000e72:	2300      	movs	r3, #0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d116      	bne.n	8000ea6 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	6812      	ldr	r2, [r2, #0]
 8000e80:	68d2      	ldr	r2, [r2, #12]
 8000e82:	2118      	movs	r1, #24
 8000e84:	438a      	bics	r2, r1
 8000e86:	0011      	movs	r1, r2
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	6892      	ldr	r2, [r2, #8]
 8000e8c:	430a      	orrs	r2, r1
 8000e8e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	6812      	ldr	r2, [r2, #0]
 8000e98:	6912      	ldr	r2, [r2, #16]
 8000e9a:	0092      	lsls	r2, r2, #2
 8000e9c:	0891      	lsrs	r1, r2, #2
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	6852      	ldr	r2, [r2, #4]
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	68d2      	ldr	r2, [r2, #12]
 8000eb0:	4963      	ldr	r1, [pc, #396]	; (8001040 <HAL_ADC_Init+0x274>)
 8000eb2:	400a      	ands	r2, r1
 8000eb4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000ec2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6a1b      	ldr	r3, [r3, #32]
 8000ec8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000eca:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d002      	beq.n	8000eda <HAL_ADC_Init+0x10e>
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	015b      	lsls	r3, r3, #5
 8000ed8:	e000      	b.n	8000edc <HAL_ADC_Init+0x110>
 8000eda:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000edc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000ee2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	691b      	ldr	r3, [r3, #16]
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d101      	bne.n	8000ef0 <HAL_ADC_Init+0x124>
 8000eec:	2304      	movs	r3, #4
 8000eee:	e000      	b.n	8000ef2 <HAL_ADC_Init+0x126>
 8000ef0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 8000ef2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000efa:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d115      	bne.n	8000f36 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a1b      	ldr	r3, [r3, #32]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d105      	bne.n	8000f1e <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	2280      	movs	r2, #128	; 0x80
 8000f16:	0252      	lsls	r2, r2, #9
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	e00b      	b.n	8000f36 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	2220      	movs	r2, #32
 8000f24:	431a      	orrs	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f2e:	2201      	movs	r2, #1
 8000f30:	431a      	orrs	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f3a:	23c2      	movs	r3, #194	; 0xc2
 8000f3c:	33ff      	adds	r3, #255	; 0xff
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d007      	beq.n	8000f52 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	68ba      	ldr	r2, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	687a      	ldr	r2, [r7, #4]
 8000f58:	6812      	ldr	r2, [r2, #0]
 8000f5a:	68d1      	ldr	r1, [r2, #12]
 8000f5c:	68ba      	ldr	r2, [r7, #8]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	055b      	lsls	r3, r3, #21
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d01b      	beq.n	8000fa6 <HAL_ADC_Init+0x1da>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d017      	beq.n	8000fa6 <HAL_ADC_Init+0x1da>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_ADC_Init+0x1da>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d00f      	beq.n	8000fa6 <HAL_ADC_Init+0x1da>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_ADC_Init+0x1da>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	d007      	beq.n	8000fa6 <HAL_ADC_Init+0x1da>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f9a:	2b06      	cmp	r3, #6
 8000f9c:	d003      	beq.n	8000fa6 <HAL_ADC_Init+0x1da>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa2:	2b07      	cmp	r3, #7
 8000fa4:	d112      	bne.n	8000fcc <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	6952      	ldr	r2, [r2, #20]
 8000fb0:	2107      	movs	r1, #7
 8000fb2:	438a      	bics	r2, r1
 8000fb4:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	6812      	ldr	r2, [r2, #0]
 8000fbe:	6951      	ldr	r1, [r2, #20]
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000fc4:	2007      	movs	r0, #7
 8000fc6:	4002      	ands	r2, r0
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	4a1c      	ldr	r2, [pc, #112]	; (8001044 <HAL_ADC_Init+0x278>)
 8000fd4:	401a      	ands	r2, r3
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d10b      	bne.n	8000ff4 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	4393      	bics	r3, r2
 8000fea:	2201      	movs	r2, #1
 8000fec:	431a      	orrs	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000ff2:	e01c      	b.n	800102e <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff8:	2212      	movs	r2, #18
 8000ffa:	4393      	bics	r3, r2
 8000ffc:	2210      	movs	r2, #16
 8000ffe:	431a      	orrs	r2, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001008:	2201      	movs	r2, #1
 800100a:	431a      	orrs	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8001010:	230f      	movs	r3, #15
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001018:	e009      	b.n	800102e <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101e:	2210      	movs	r2, #16
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8001026:	230f      	movs	r3, #15
 8001028:	18fb      	adds	r3, r7, r3
 800102a:	2201      	movs	r2, #1
 800102c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800102e:	230f      	movs	r3, #15
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	781b      	ldrb	r3, [r3, #0]
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	b004      	add	sp, #16
 800103a:	bd80      	pop	{r7, pc}
 800103c:	fffffefd 	.word	0xfffffefd
 8001040:	fffe0219 	.word	0xfffe0219
 8001044:	833fffe7 	.word	0x833fffe7

08001048 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001048:	b590      	push	{r4, r7, lr}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001050:	230f      	movs	r3, #15
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	2204      	movs	r2, #4
 8001060:	4013      	ands	r3, r2
 8001062:	d138      	bne.n	80010d6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2240      	movs	r2, #64	; 0x40
 8001068:	5c9b      	ldrb	r3, [r3, r2]
 800106a:	2b01      	cmp	r3, #1
 800106c:	d101      	bne.n	8001072 <HAL_ADC_Start+0x2a>
 800106e:	2302      	movs	r3, #2
 8001070:	e038      	b.n	80010e4 <HAL_ADC_Start+0x9c>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2240      	movs	r2, #64	; 0x40
 8001076:	2101      	movs	r1, #1
 8001078:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d007      	beq.n	8001092 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001082:	230f      	movs	r3, #15
 8001084:	18fc      	adds	r4, r7, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	0018      	movs	r0, r3
 800108a:	f000 fa1d 	bl	80014c8 <ADC_Enable>
 800108e:	0003      	movs	r3, r0
 8001090:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001092:	230f      	movs	r3, #15
 8001094:	18fb      	adds	r3, r7, r3
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d120      	bne.n	80010de <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a0:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_ADC_Start+0xa4>)
 80010a2:	4013      	ands	r3, r2
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	0052      	lsls	r2, r2, #1
 80010a8:	431a      	orrs	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2240      	movs	r2, #64	; 0x40
 80010b8:	2100      	movs	r1, #0
 80010ba:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	221c      	movs	r2, #28
 80010c2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6812      	ldr	r2, [r2, #0]
 80010cc:	6892      	ldr	r2, [r2, #8]
 80010ce:	2104      	movs	r1, #4
 80010d0:	430a      	orrs	r2, r1
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	e003      	b.n	80010de <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80010d6:	230f      	movs	r3, #15
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	2202      	movs	r2, #2
 80010dc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010de:	230f      	movs	r3, #15
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	781b      	ldrb	r3, [r3, #0]
}
 80010e4:	0018      	movs	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	b005      	add	sp, #20
 80010ea:	bd90      	pop	{r4, r7, pc}
 80010ec:	fffff0fe 	.word	0xfffff0fe

080010f0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f8:	230f      	movs	r3, #15
 80010fa:	18fb      	adds	r3, r7, r3
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2240      	movs	r2, #64	; 0x40
 8001104:	5c9b      	ldrb	r3, [r3, r2]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_ADC_Stop+0x1e>
 800110a:	2302      	movs	r3, #2
 800110c:	e02c      	b.n	8001168 <HAL_ADC_Stop+0x78>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2240      	movs	r2, #64	; 0x40
 8001112:	2101      	movs	r1, #1
 8001114:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001116:	230f      	movs	r3, #15
 8001118:	18fc      	adds	r4, r7, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	0018      	movs	r0, r3
 800111e:	f000 fab8 	bl	8001692 <ADC_ConversionStop>
 8001122:	0003      	movs	r3, r0
 8001124:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001126:	230f      	movs	r3, #15
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d114      	bne.n	800115a <HAL_ADC_Stop+0x6a>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001130:	230f      	movs	r3, #15
 8001132:	18fc      	adds	r4, r7, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	0018      	movs	r0, r3
 8001138:	f000 fa42 	bl	80015c0 <ADC_Disable>
 800113c:	0003      	movs	r3, r0
 800113e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d107      	bne.n	800115a <HAL_ADC_Stop+0x6a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_ADC_Stop+0x80>)
 8001150:	4013      	ands	r3, r2
 8001152:	2201      	movs	r2, #1
 8001154:	431a      	orrs	r2, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2240      	movs	r2, #64	; 0x40
 800115e:	2100      	movs	r1, #0
 8001160:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001162:	230f      	movs	r3, #15
 8001164:	18fb      	adds	r3, r7, r3
 8001166:	781b      	ldrb	r3, [r3, #0]
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b005      	add	sp, #20
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	fffffefe 	.word	0xfffffefe

08001174 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	2b08      	cmp	r3, #8
 8001184:	d102      	bne.n	800118c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001186:	2308      	movs	r3, #8
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	e013      	b.n	80011b4 <HAL_ADC_PollForConversion+0x40>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	2201      	movs	r2, #1
 8001194:	4013      	ands	r3, r2
 8001196:	d00b      	beq.n	80011b0 <HAL_ADC_PollForConversion+0x3c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119c:	2220      	movs	r2, #32
 800119e:	431a      	orrs	r2, r3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	2100      	movs	r1, #0
 80011aa:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e06b      	b.n	8001288 <HAL_ADC_PollForConversion+0x114>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80011b0:	230c      	movs	r3, #12
 80011b2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80011b4:	f7ff fe00 	bl	8000db8 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011bc:	e019      	b.n	80011f2 <HAL_ADC_PollForConversion+0x7e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	3301      	adds	r3, #1
 80011c2:	d016      	beq.n	80011f2 <HAL_ADC_PollForConversion+0x7e>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d007      	beq.n	80011da <HAL_ADC_PollForConversion+0x66>
 80011ca:	f7ff fdf5 	bl	8000db8 <HAL_GetTick>
 80011ce:	0002      	movs	r2, r0
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	1ad2      	subs	r2, r2, r3
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d90b      	bls.n	80011f2 <HAL_ADC_PollForConversion+0x7e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	2204      	movs	r2, #4
 80011e0:	431a      	orrs	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2240      	movs	r2, #64	; 0x40
 80011ea:	2100      	movs	r1, #0
 80011ec:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e04a      	b.n	8001288 <HAL_ADC_PollForConversion+0x114>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	4013      	ands	r3, r2
 80011fc:	d0df      	beq.n	80011be <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	2280      	movs	r2, #128	; 0x80
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	23c0      	movs	r3, #192	; 0xc0
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	4013      	ands	r3, r2
 8001218:	d12d      	bne.n	8001276 <HAL_ADC_PollForConversion+0x102>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a1b      	ldr	r3, [r3, #32]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800121e:	2b00      	cmp	r3, #0
 8001220:	d129      	bne.n	8001276 <HAL_ADC_PollForConversion+0x102>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	2208      	movs	r2, #8
 800122a:	4013      	ands	r3, r2
 800122c:	2b08      	cmp	r3, #8
 800122e:	d122      	bne.n	8001276 <HAL_ADC_PollForConversion+0x102>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2204      	movs	r2, #4
 8001238:	4013      	ands	r3, r2
 800123a:	d110      	bne.n	800125e <HAL_ADC_PollForConversion+0xea>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	6852      	ldr	r2, [r2, #4]
 8001246:	210c      	movs	r1, #12
 8001248:	438a      	bics	r2, r1
 800124a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_ADC_PollForConversion+0x11c>)
 8001252:	4013      	ands	r3, r2
 8001254:	2201      	movs	r2, #1
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	645a      	str	r2, [r3, #68]	; 0x44
 800125c:	e00b      	b.n	8001276 <HAL_ADC_PollForConversion+0x102>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	2220      	movs	r2, #32
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126e:	2201      	movs	r2, #1
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d103      	bne.n	8001286 <HAL_ADC_PollForConversion+0x112>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	220c      	movs	r2, #12
 8001284:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}
 8001290:	fffffefe 	.word	0xfffffefe

08001294 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80012a2:	0018      	movs	r0, r3
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b002      	add	sp, #8
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
 80012b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012b6:	230f      	movs	r3, #15
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	2200      	movs	r2, #0
 80012bc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012c6:	2380      	movs	r3, #128	; 0x80
 80012c8:	055b      	lsls	r3, r3, #21
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d011      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x46>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d00d      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x46>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d009      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x46>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012e2:	2b03      	cmp	r3, #3
 80012e4:	d005      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x46>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ea:	2b04      	cmp	r3, #4
 80012ec:	d001      	beq.n	80012f2 <HAL_ADC_ConfigChannel+0x46>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2240      	movs	r2, #64	; 0x40
 80012f6:	5c9b      	ldrb	r3, [r3, r2]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d101      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x54>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e0d1      	b.n	80014a4 <HAL_ADC_ConfigChannel+0x1f8>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2240      	movs	r2, #64	; 0x40
 8001304:	2101      	movs	r1, #1
 8001306:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2204      	movs	r2, #4
 8001310:	4013      	ands	r3, r2
 8001312:	d000      	beq.n	8001316 <HAL_ADC_ConfigChannel+0x6a>
 8001314:	e0b5      	b.n	8001482 <HAL_ADC_ConfigChannel+0x1d6>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4a64      	ldr	r2, [pc, #400]	; (80014ac <HAL_ADC_ConfigChannel+0x200>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d100      	bne.n	8001322 <HAL_ADC_ConfigChannel+0x76>
 8001320:	e083      	b.n	800142a <HAL_ADC_ConfigChannel+0x17e>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6812      	ldr	r2, [r2, #0]
 800132a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800132c:	683a      	ldr	r2, [r7, #0]
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	2001      	movs	r0, #1
 8001332:	4090      	lsls	r0, r2
 8001334:	0002      	movs	r2, r0
 8001336:	430a      	orrs	r2, r1
 8001338:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800133e:	2380      	movs	r3, #128	; 0x80
 8001340:	055b      	lsls	r3, r3, #21
 8001342:	429a      	cmp	r2, r3
 8001344:	d037      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x10a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134a:	2b01      	cmp	r3, #1
 800134c:	d033      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x10a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001352:	2b02      	cmp	r3, #2
 8001354:	d02f      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x10a>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	2b03      	cmp	r3, #3
 800135c:	d02b      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x10a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	2b04      	cmp	r3, #4
 8001364:	d027      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x10a>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136a:	2b05      	cmp	r3, #5
 800136c:	d023      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x10a>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001372:	2b06      	cmp	r3, #6
 8001374:	d01f      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x10a>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137a:	2b07      	cmp	r3, #7
 800137c:	d01b      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x10a>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	689a      	ldr	r2, [r3, #8]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	2107      	movs	r1, #7
 800138a:	400b      	ands	r3, r1
 800138c:	429a      	cmp	r2, r3
 800138e:	d012      	beq.n	80013b6 <HAL_ADC_ConfigChannel+0x10a>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	6952      	ldr	r2, [r2, #20]
 800139a:	2107      	movs	r1, #7
 800139c:	438a      	bics	r2, r1
 800139e:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	6951      	ldr	r1, [r2, #20]
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	6892      	ldr	r2, [r2, #8]
 80013ae:	2007      	movs	r0, #7
 80013b0:	4002      	ands	r2, r0
 80013b2:	430a      	orrs	r2, r1
 80013b4:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2b10      	cmp	r3, #16
 80013bc:	d007      	beq.n	80013ce <HAL_ADC_ConfigChannel+0x122>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2b11      	cmp	r3, #17
 80013c4:	d003      	beq.n	80013ce <HAL_ADC_ConfigChannel+0x122>
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2b12      	cmp	r3, #18
 80013cc:	d163      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013ce:	4a38      	ldr	r2, [pc, #224]	; (80014b0 <HAL_ADC_ConfigChannel+0x204>)
 80013d0:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <HAL_ADC_ConfigChannel+0x204>)
 80013d2:	6819      	ldr	r1, [r3, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2b10      	cmp	r3, #16
 80013da:	d009      	beq.n	80013f0 <HAL_ADC_ConfigChannel+0x144>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b11      	cmp	r3, #17
 80013e2:	d102      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x13e>
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	03db      	lsls	r3, r3, #15
 80013e8:	e004      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x148>
 80013ea:	2380      	movs	r3, #128	; 0x80
 80013ec:	045b      	lsls	r3, r3, #17
 80013ee:	e001      	b.n	80013f4 <HAL_ADC_ConfigChannel+0x148>
 80013f0:	2380      	movs	r3, #128	; 0x80
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	430b      	orrs	r3, r1
 80013f6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b10      	cmp	r3, #16
 80013fe:	d14a      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x1ea>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001400:	4b2c      	ldr	r3, [pc, #176]	; (80014b4 <HAL_ADC_ConfigChannel+0x208>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	492c      	ldr	r1, [pc, #176]	; (80014b8 <HAL_ADC_ConfigChannel+0x20c>)
 8001406:	0018      	movs	r0, r3
 8001408:	f7fe fe7e 	bl	8000108 <__udivsi3>
 800140c:	0003      	movs	r3, r0
 800140e:	001a      	movs	r2, r3
 8001410:	0013      	movs	r3, r2
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	189b      	adds	r3, r3, r2
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800141a:	e002      	b.n	8001422 <HAL_ADC_ConfigChannel+0x176>
          {
            wait_loop_index--;
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	3b01      	subs	r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f9      	bne.n	800141c <HAL_ADC_ConfigChannel+0x170>
 8001428:	e035      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ea>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	2001      	movs	r0, #1
 800143a:	4090      	lsls	r0, r2
 800143c:	0002      	movs	r2, r0
 800143e:	43d2      	mvns	r2, r2
 8001440:	400a      	ands	r2, r1
 8001442:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b10      	cmp	r3, #16
 800144a:	d007      	beq.n	800145c <HAL_ADC_ConfigChannel+0x1b0>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b11      	cmp	r3, #17
 8001452:	d003      	beq.n	800145c <HAL_ADC_ConfigChannel+0x1b0>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b12      	cmp	r3, #18
 800145a:	d11c      	bne.n	8001496 <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800145c:	4a14      	ldr	r2, [pc, #80]	; (80014b0 <HAL_ADC_ConfigChannel+0x204>)
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_ADC_ConfigChannel+0x204>)
 8001460:	6819      	ldr	r1, [r3, #0]
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2b10      	cmp	r3, #16
 8001468:	d007      	beq.n	800147a <HAL_ADC_ConfigChannel+0x1ce>
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	2b11      	cmp	r3, #17
 8001470:	d101      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x1ca>
 8001472:	4b12      	ldr	r3, [pc, #72]	; (80014bc <HAL_ADC_ConfigChannel+0x210>)
 8001474:	e002      	b.n	800147c <HAL_ADC_ConfigChannel+0x1d0>
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_ADC_ConfigChannel+0x214>)
 8001478:	e000      	b.n	800147c <HAL_ADC_ConfigChannel+0x1d0>
 800147a:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <HAL_ADC_ConfigChannel+0x218>)
 800147c:	400b      	ands	r3, r1
 800147e:	6013      	str	r3, [r2, #0]
 8001480:	e009      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ea>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	2220      	movs	r2, #32
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800148e:	230f      	movs	r3, #15
 8001490:	18fb      	adds	r3, r7, r3
 8001492:	2201      	movs	r2, #1
 8001494:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2240      	movs	r2, #64	; 0x40
 800149a:	2100      	movs	r1, #0
 800149c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800149e:	230f      	movs	r3, #15
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	781b      	ldrb	r3, [r3, #0]
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b004      	add	sp, #16
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	00001001 	.word	0x00001001
 80014b0:	40012708 	.word	0x40012708
 80014b4:	20000000 	.word	0x20000000
 80014b8:	000f4240 	.word	0x000f4240
 80014bc:	ffbfffff 	.word	0xffbfffff
 80014c0:	feffffff 	.word	0xfeffffff
 80014c4:	ff7fffff 	.word	0xff7fffff

080014c8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2203      	movs	r2, #3
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d112      	bne.n	800150c <ADC_Enable+0x44>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2201      	movs	r2, #1
 80014ee:	4013      	ands	r3, r2
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d009      	beq.n	8001508 <ADC_Enable+0x40>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	2380      	movs	r3, #128	; 0x80
 80014fc:	021b      	lsls	r3, r3, #8
 80014fe:	401a      	ands	r2, r3
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	429a      	cmp	r2, r3
 8001506:	d101      	bne.n	800150c <ADC_Enable+0x44>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <ADC_Enable+0x46>
 800150c:	2300      	movs	r3, #0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d14b      	bne.n	80015aa <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <ADC_Enable+0xec>)
 800151a:	4013      	ands	r3, r2
 800151c:	d00d      	beq.n	800153a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	2210      	movs	r2, #16
 8001524:	431a      	orrs	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800152e:	2201      	movs	r2, #1
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e038      	b.n	80015ac <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	6892      	ldr	r2, [r2, #8]
 8001544:	2101      	movs	r1, #1
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <ADC_Enable+0xf0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	491b      	ldr	r1, [pc, #108]	; (80015bc <ADC_Enable+0xf4>)
 8001550:	0018      	movs	r0, r3
 8001552:	f7fe fdd9 	bl	8000108 <__udivsi3>
 8001556:	0003      	movs	r3, r0
 8001558:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800155a:	e002      	b.n	8001562 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	3b01      	subs	r3, #1
 8001560:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f9      	bne.n	800155c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001568:	f7ff fc26 	bl	8000db8 <HAL_GetTick>
 800156c:	0003      	movs	r3, r0
 800156e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001570:	e014      	b.n	800159c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001572:	f7ff fc21 	bl	8000db8 <HAL_GetTick>
 8001576:	0002      	movs	r2, r0
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d90d      	bls.n	800159c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	2210      	movs	r2, #16
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001590:	2201      	movs	r2, #1
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e007      	b.n	80015ac <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2201      	movs	r2, #1
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d1e3      	bne.n	8001572 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b004      	add	sp, #16
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	80000017 	.word	0x80000017
 80015b8:	20000000 	.word	0x20000000
 80015bc:	000f4240 	.word	0x000f4240

080015c0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2203      	movs	r2, #3
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d112      	bne.n	8001600 <ADC_Disable+0x40>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2201      	movs	r2, #1
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d009      	beq.n	80015fc <ADC_Disable+0x3c>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	68da      	ldr	r2, [r3, #12]
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	401a      	ands	r2, r3
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d101      	bne.n	8001600 <ADC_Disable+0x40>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <ADC_Disable+0x42>
 8001600:	2300      	movs	r3, #0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d040      	beq.n	8001688 <ADC_Disable+0xc8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2205      	movs	r2, #5
 800160e:	4013      	ands	r3, r2
 8001610:	2b01      	cmp	r3, #1
 8001612:	d110      	bne.n	8001636 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	6892      	ldr	r2, [r2, #8]
 800161e:	2102      	movs	r1, #2
 8001620:	430a      	orrs	r2, r1
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2203      	movs	r2, #3
 800162a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800162c:	f7ff fbc4 	bl	8000db8 <HAL_GetTick>
 8001630:	0003      	movs	r3, r0
 8001632:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001634:	e022      	b.n	800167c <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	2210      	movs	r2, #16
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001646:	2201      	movs	r2, #1
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e01b      	b.n	800168a <ADC_Disable+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001652:	f7ff fbb1 	bl	8000db8 <HAL_GetTick>
 8001656:	0002      	movs	r2, r0
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d90d      	bls.n	800167c <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	2210      	movs	r2, #16
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001670:	2201      	movs	r2, #1
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e006      	b.n	800168a <ADC_Disable+0xca>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2201      	movs	r2, #1
 8001684:	4013      	ands	r3, r2
 8001686:	d1e4      	bne.n	8001652 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	0018      	movs	r0, r3
 800168c:	46bd      	mov	sp, r7
 800168e:	b004      	add	sp, #16
 8001690:	bd80      	pop	{r7, pc}

08001692 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b084      	sub	sp, #16
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2204      	movs	r2, #4
 80016a6:	4013      	ands	r3, r2
 80016a8:	d033      	beq.n	8001712 <ADC_ConversionStop+0x80>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2204      	movs	r2, #4
 80016b2:	4013      	ands	r3, r2
 80016b4:	d00d      	beq.n	80016d2 <ADC_ConversionStop+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2202      	movs	r2, #2
 80016be:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80016c0:	d107      	bne.n	80016d2 <ADC_ConversionStop+0x40>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	6892      	ldr	r2, [r2, #8]
 80016cc:	2110      	movs	r1, #16
 80016ce:	430a      	orrs	r2, r1
 80016d0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016d2:	f7ff fb71 	bl	8000db8 <HAL_GetTick>
 80016d6:	0003      	movs	r3, r0
 80016d8:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80016da:	e014      	b.n	8001706 <ADC_ConversionStop+0x74>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80016dc:	f7ff fb6c 	bl	8000db8 <HAL_GetTick>
 80016e0:	0002      	movs	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d90d      	bls.n	8001706 <ADC_ConversionStop+0x74>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	2210      	movs	r2, #16
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016fa:	2201      	movs	r2, #1
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e006      	b.n	8001714 <ADC_ConversionStop+0x82>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2204      	movs	r2, #4
 800170e:	4013      	ands	r3, r2
 8001710:	d1e4      	bne.n	80016dc <ADC_ConversionStop+0x4a>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	b004      	add	sp, #16
 800171a:	bd80      	pop	{r7, pc}

0800171c <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001724:	2317      	movs	r3, #23
 8001726:	18fb      	adds	r3, r7, r3
 8001728:	2200      	movs	r2, #0
 800172a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2240      	movs	r2, #64	; 0x40
 8001738:	5c9b      	ldrb	r3, [r3, r2]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <HAL_ADCEx_Calibration_Start+0x26>
 800173e:	2302      	movs	r3, #2
 8001740:	e080      	b.n	8001844 <HAL_ADCEx_Calibration_Start+0x128>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2240      	movs	r2, #64	; 0x40
 8001746:	2101      	movs	r1, #1
 8001748:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2203      	movs	r2, #3
 8001752:	4013      	ands	r3, r2
 8001754:	2b01      	cmp	r3, #1
 8001756:	d112      	bne.n	800177e <HAL_ADCEx_Calibration_Start+0x62>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2201      	movs	r2, #1
 8001760:	4013      	ands	r3, r2
 8001762:	2b01      	cmp	r3, #1
 8001764:	d009      	beq.n	800177a <HAL_ADCEx_Calibration_Start+0x5e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68da      	ldr	r2, [r3, #12]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	021b      	lsls	r3, r3, #8
 8001770:	401a      	ands	r2, r3
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	429a      	cmp	r2, r3
 8001778:	d101      	bne.n	800177e <HAL_ADCEx_Calibration_Start+0x62>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_ADCEx_Calibration_Start+0x64>
 800177e:	2300      	movs	r3, #0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d14e      	bne.n	8001822 <HAL_ADCEx_Calibration_Start+0x106>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001788:	4a30      	ldr	r2, [pc, #192]	; (800184c <HAL_ADCEx_Calibration_Start+0x130>)
 800178a:	4013      	ands	r3, r2
 800178c:	2202      	movs	r2, #2
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	645a      	str	r2, [r3, #68]	; 0x44
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2203      	movs	r2, #3
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	6812      	ldr	r2, [r2, #0]
 80017a8:	68d2      	ldr	r2, [r2, #12]
 80017aa:	2103      	movs	r1, #3
 80017ac:	438a      	bics	r2, r1
 80017ae:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	6892      	ldr	r2, [r2, #8]
 80017ba:	2180      	movs	r1, #128	; 0x80
 80017bc:	0609      	lsls	r1, r1, #24
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80017c2:	f7ff faf9 	bl	8000db8 <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80017ca:	e014      	b.n	80017f6 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80017cc:	f7ff faf4 	bl	8000db8 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d90d      	bls.n	80017f6 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	2212      	movs	r2, #18
 80017e0:	4393      	bics	r3, r2
 80017e2:	2210      	movs	r2, #16
 80017e4:	431a      	orrs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2240      	movs	r2, #64	; 0x40
 80017ee:	2100      	movs	r1, #0
 80017f0:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e026      	b.n	8001844 <HAL_ADCEx_Calibration_Start+0x128>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	dbe5      	blt.n	80017cc <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	68d1      	ldr	r1, [r2, #12]
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	430a      	orrs	r2, r1
 800180e:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001814:	2203      	movs	r2, #3
 8001816:	4393      	bics	r3, r2
 8001818:	2201      	movs	r2, #1
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	645a      	str	r2, [r3, #68]	; 0x44
 8001820:	e009      	b.n	8001836 <HAL_ADCEx_Calibration_Start+0x11a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	2220      	movs	r2, #32
 8001828:	431a      	orrs	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800182e:	2317      	movs	r3, #23
 8001830:	18fb      	adds	r3, r7, r3
 8001832:	2201      	movs	r2, #1
 8001834:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2240      	movs	r2, #64	; 0x40
 800183a:	2100      	movs	r1, #0
 800183c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800183e:	2317      	movs	r3, #23
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	781b      	ldrb	r3, [r3, #0]
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b006      	add	sp, #24
 800184a:	bd80      	pop	{r7, pc}
 800184c:	fffffefd 	.word	0xfffffefd

08001850 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *             the configuration information for the specified CAN.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef* hcan)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t status = CAN_INITSTATUS_FAILED;  /* Default init status */
 8001858:	2300      	movs	r3, #0
 800185a:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60bb      	str	r3, [r7, #8]
  
  /* Check CAN handle */
  if(hcan == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_CAN_Init+0x1a>
  {
     return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e111      	b.n	8001a8e <HAL_CAN_Init+0x23e>
  assert_param(IS_CAN_SJW(hcan->Init.SJW));
  assert_param(IS_CAN_BS1(hcan->Init.BS1));
  assert_param(IS_CAN_BS2(hcan->Init.BS2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
  
  if(hcan->State == HAL_CAN_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	223d      	movs	r2, #61	; 0x3d
 800186e:	5c9b      	ldrb	r3, [r3, r2]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <HAL_CAN_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hcan->Lock = HAL_UNLOCKED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	223c      	movs	r2, #60	; 0x3c
 800187a:	2100      	movs	r1, #0
 800187c:	5499      	strb	r1, [r3, r2]
    /* Init the low level hardware */
    HAL_CAN_MspInit(hcan);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	0018      	movs	r0, r3
 8001882:	f002 fb49 	bl	8003f18 <HAL_CAN_MspInit>
  }
  
  /* Initialize the CAN state*/
  hcan->State = HAL_CAN_STATE_BUSY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	223d      	movs	r2, #61	; 0x3d
 800188a:	2102      	movs	r1, #2
 800188c:	5499      	strb	r1, [r3, r2]
  
  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	2102      	movs	r1, #2
 800189a:	438a      	bics	r2, r1
 800189c:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	6812      	ldr	r2, [r2, #0]
 80018a8:	2101      	movs	r1, #1
 80018aa:	430a      	orrs	r2, r1
 80018ac:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();   
 80018ae:	f7ff fa83 	bl	8000db8 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	60bb      	str	r3, [r7, #8]
  
  /* Wait the acknowledge */
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80018b6:	e010      	b.n	80018da <HAL_CAN_Init+0x8a>
  {
    if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 80018b8:	f7ff fa7e 	bl	8000db8 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b0a      	cmp	r3, #10
 80018c4:	d909      	bls.n	80018da <HAL_CAN_Init+0x8a>
    {
      hcan->State= HAL_CAN_STATE_TIMEOUT;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	223d      	movs	r2, #61	; 0x3d
 80018ca:	2103      	movs	r1, #3
 80018cc:	5499      	strb	r1, [r3, r2]
      /* Process unlocked */
      __HAL_UNLOCK(hcan);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	223c      	movs	r2, #60	; 0x3c
 80018d2:	2100      	movs	r1, #0
 80018d4:	5499      	strb	r1, [r3, r2]
      return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e0d9      	b.n	8001a8e <HAL_CAN_Init+0x23e>
  while(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	4013      	ands	r3, r2
 80018e4:	d0e8      	beq.n	80018b8 <HAL_CAN_Init+0x68>
    }
  }

  /* Check acknowledge */
  if (HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	4013      	ands	r3, r2
 80018f0:	d100      	bne.n	80018f4 <HAL_CAN_Init+0xa4>
 80018f2:	e0bb      	b.n	8001a6c <HAL_CAN_Init+0x21c>
  {
    /* Set the time triggered communication mode */
    if (hcan->Init.TTCM == ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d108      	bne.n	800190e <HAL_CAN_Init+0xbe>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	6812      	ldr	r2, [r2, #0]
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	430a      	orrs	r2, r1
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	e007      	b.n	800191e <HAL_CAN_Init+0xce>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	2180      	movs	r1, #128	; 0x80
 800191a:	438a      	bics	r2, r1
 800191c:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (hcan->Init.ABOM == ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d108      	bne.n	8001938 <HAL_CAN_Init+0xe8>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	2140      	movs	r1, #64	; 0x40
 8001932:	430a      	orrs	r2, r1
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e007      	b.n	8001948 <HAL_CAN_Init+0xf8>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6812      	ldr	r2, [r2, #0]
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	2140      	movs	r1, #64	; 0x40
 8001944:	438a      	bics	r2, r1
 8001946:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (hcan->Init.AWUM == ENABLE)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d108      	bne.n	8001962 <HAL_CAN_Init+0x112>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	6812      	ldr	r2, [r2, #0]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	2120      	movs	r1, #32
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	e007      	b.n	8001972 <HAL_CAN_Init+0x122>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6812      	ldr	r2, [r2, #0]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	2120      	movs	r1, #32
 800196e:	438a      	bics	r2, r1
 8001970:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (hcan->Init.NART == ENABLE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	2b01      	cmp	r3, #1
 8001978:	d108      	bne.n	800198c <HAL_CAN_Init+0x13c>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6812      	ldr	r2, [r2, #0]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	2110      	movs	r1, #16
 8001986:	430a      	orrs	r2, r1
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	e007      	b.n	800199c <HAL_CAN_Init+0x14c>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	2110      	movs	r1, #16
 8001998:	438a      	bics	r2, r1
 800199a:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (hcan->Init.RFLM == ENABLE)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d108      	bne.n	80019b6 <HAL_CAN_Init+0x166>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	687a      	ldr	r2, [r7, #4]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	6812      	ldr	r2, [r2, #0]
 80019ae:	2108      	movs	r1, #8
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	e007      	b.n	80019c6 <HAL_CAN_Init+0x176>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6812      	ldr	r2, [r2, #0]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	2108      	movs	r1, #8
 80019c2:	438a      	bics	r2, r1
 80019c4:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (hcan->Init.TXFP == ENABLE)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d108      	bne.n	80019e0 <HAL_CAN_Init+0x190>
    {
      SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	2104      	movs	r1, #4
 80019da:	430a      	orrs	r2, r1
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e007      	b.n	80019f0 <HAL_CAN_Init+0x1a0>
    }
    else
    {
      CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	2104      	movs	r1, #4
 80019ec:	438a      	bics	r2, r1
 80019ee:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6891      	ldr	r1, [r2, #8]
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	68d2      	ldr	r2, [r2, #12]
 80019fc:	4311      	orrs	r1, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6912      	ldr	r2, [r2, #16]
 8001a02:	4311      	orrs	r1, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	6952      	ldr	r2, [r2, #20]
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6852      	ldr	r2, [r2, #4]
 8001a0e:	3a01      	subs	r2, #1
 8001a10:	430a      	orrs	r2, r1
 8001a12:	61da      	str	r2, [r3, #28]
                                              hcan->Init.BS1            |
                                              hcan->Init.BS2            |
                                              (hcan->Init.Prescaler - 1U) ));

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	2101      	movs	r1, #1
 8001a20:	438a      	bics	r2, r1
 8001a22:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();   
 8001a24:	f7ff f9c8 	bl	8000db8 <HAL_GetTick>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	60bb      	str	r3, [r7, #8]
   
    /* Wait the acknowledge */
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001a2c:	e010      	b.n	8001a50 <HAL_CAN_Init+0x200>
    {
      if((HAL_GetTick()-tickstart) > CAN_TIMEOUT_VALUE)
 8001a2e:	f7ff f9c3 	bl	8000db8 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b0a      	cmp	r3, #10
 8001a3a:	d909      	bls.n	8001a50 <HAL_CAN_Init+0x200>
      {
         hcan->State= HAL_CAN_STATE_TIMEOUT;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	223d      	movs	r2, #61	; 0x3d
 8001a40:	2103      	movs	r1, #3
 8001a42:	5499      	strb	r1, [r3, r2]

       /* Process unlocked */
       __HAL_UNLOCK(hcan);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	223c      	movs	r2, #60	; 0x3c
 8001a48:	2100      	movs	r1, #0
 8001a4a:	5499      	strb	r1, [r3, r2]

       return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e01e      	b.n	8001a8e <HAL_CAN_Init+0x23e>
    while(HAL_IS_BIT_SET(hcan->Instance->MSR, CAN_MSR_INAK))
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2201      	movs	r2, #1
 8001a58:	4013      	ands	r3, r2
 8001a5a:	d1e8      	bne.n	8001a2e <HAL_CAN_Init+0x1de>
      }
    }

    /* Check acknowledged */
    if(HAL_IS_BIT_CLR(hcan->Instance->MSR, CAN_MSR_INAK))
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	4013      	ands	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_CAN_Init+0x21c>
    {
      status = CAN_INITSTATUS_SUCCESS;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
    }
  }
 
  if(status == CAN_INITSTATUS_SUCCESS)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <HAL_CAN_Init+0x234>
  {
    /* Set CAN error code to none */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_READY;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	223d      	movs	r2, #61	; 0x3d
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	5499      	strb	r1, [r3, r2]
  
    /* Return function status */
    return HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e004      	b.n	8001a8e <HAL_CAN_Init+0x23e>
  }
  else
  {
    /* Initialize the CAN state */
    hcan->State = HAL_CAN_STATE_ERROR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	223d      	movs	r2, #61	; 0x3d
 8001a88:	2104      	movs	r1, #4
 8001a8a:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
  }
}
 8001a8e:	0018      	movs	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	b004      	add	sp, #16
 8001a94:	bd80      	pop	{r7, pc}
	...

08001a98 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterConfTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef* hcan, CAN_FilterConfTypeDef* sFilterConfig)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_SCALE(sFilterConfig->FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(sFilterConfig->FilterActivation));
  assert_param(IS_CAN_BANKNUMBER(sFilterConfig->BankNumber));
  
  filternbrbitpos = (1U) << sFilterConfig->FilterNumber;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	409a      	lsls	r2, r3
 8001aae:	0013      	movs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  /* Select the start slave bank */
  MODIFY_REG(hcan->Instance->FMR                         ,
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	58cb      	ldr	r3, [r1, r3]
 8001ac0:	496d      	ldr	r1, [pc, #436]	; (8001c78 <HAL_CAN_ConfigFilter+0x1e0>)
 8001ac2:	4019      	ands	r1, r3
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac8:	021b      	lsls	r3, r3, #8
 8001aca:	430b      	orrs	r3, r1
 8001acc:	2101      	movs	r1, #1
 8001ace:	4319      	orrs	r1, r3
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	50d1      	str	r1, [r2, r3]
             CAN_FMR_CAN2SB                              ,
             CAN_FMR_FINIT                              |
             (uint32_t)(sFilterConfig->BankNumber << 8U)   );  /* Filter Deactivation */
  CLEAR_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6819      	ldr	r1, [r3, #0]
 8001ade:	2387      	movs	r3, #135	; 0x87
 8001ae0:	009b      	lsls	r3, r3, #2
 8001ae2:	58cb      	ldr	r3, [r1, r3]
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	43c9      	mvns	r1, r1
 8001ae8:	4019      	ands	r1, r3
 8001aea:	2387      	movs	r3, #135	; 0x87
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	50d1      	str	r1, [r2, r3]

  /* Filter Scale */
  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d12e      	bne.n	8001b56 <HAL_CAN_ConfigFilter+0xbe>
  {
    /* 16-bit scale for the filter */
    CLEAR_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6819      	ldr	r1, [r3, #0]
 8001b00:	2383      	movs	r3, #131	; 0x83
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	58cb      	ldr	r3, [r1, r3]
 8001b06:	68f9      	ldr	r1, [r7, #12]
 8001b08:	43c9      	mvns	r1, r1
 8001b0a:	4019      	ands	r1, r3
 8001b0c:	2383      	movs	r3, #131	; 0x83
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	50d1      	str	r1, [r2, r3]

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	6958      	ldr	r0, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	041b      	lsls	r3, r3, #16
 8001b26:	0c1b      	lsrs	r3, r3, #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b28:	4319      	orrs	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	3348      	adds	r3, #72	; 0x48
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	5099      	str	r1, [r3, r2]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6958      	ldr	r0, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	041a      	lsls	r2, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	041b      	lsls	r3, r3, #16
 8001b46:	0c1b      	lsrs	r3, r3, #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b48:	431a      	orrs	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	3348      	adds	r3, #72	; 0x48
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	18cb      	adds	r3, r1, r3
 8001b52:	3304      	adds	r3, #4
 8001b54:	601a      	str	r2, [r3, #0]
  }

  if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	69db      	ldr	r3, [r3, #28]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d12d      	bne.n	8001bba <HAL_CAN_ConfigFilter+0x122>
  {
    /* 32-bit scale for the filter */
    SET_BIT(hcan->Instance->FS1R, filternbrbitpos);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6819      	ldr	r1, [r3, #0]
 8001b66:	2383      	movs	r3, #131	; 0x83
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	58c9      	ldr	r1, [r1, r3]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4319      	orrs	r1, r3
 8001b70:	2383      	movs	r3, #131	; 0x83
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	50d1      	str	r1, [r2, r3]

    /* 32-bit identifier or First 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	6958      	ldr	r0, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	0c1b      	lsrs	r3, r3, #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b8c:	4319      	orrs	r1, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR1 = 
 8001b8e:	0003      	movs	r3, r0
 8001b90:	3348      	adds	r3, #72	; 0x48
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	5099      	str	r1, [r3, r2]

    /* 32-bit mask or Second 32-bit identifier */
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6958      	ldr	r0, [r3, #20]
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	041a      	lsls	r2, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	0c1b      	lsrs	r3, r3, #16
       ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001bac:	431a      	orrs	r2, r3
    hcan->Instance->sFilterRegister[sFilterConfig->FilterNumber].FR2 = 
 8001bae:	0003      	movs	r3, r0
 8001bb0:	3348      	adds	r3, #72	; 0x48
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	18cb      	adds	r3, r1, r3
 8001bb6:	3304      	adds	r3, #4
 8001bb8:	601a      	str	r2, [r3, #0]
  }

  /* Filter Mode */
  if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10d      	bne.n	8001bde <HAL_CAN_ConfigFilter+0x146>
  {
    /*Id/Mask mode for the filter*/
    CLEAR_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	2381      	movs	r3, #129	; 0x81
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	58cb      	ldr	r3, [r1, r3]
 8001bd0:	68f9      	ldr	r1, [r7, #12]
 8001bd2:	43c9      	mvns	r1, r1
 8001bd4:	4019      	ands	r1, r3
 8001bd6:	2381      	movs	r3, #129	; 0x81
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	50d1      	str	r1, [r2, r3]
 8001bdc:	e00b      	b.n	8001bf6 <HAL_CAN_ConfigFilter+0x15e>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    SET_BIT(hcan->Instance->FM1R, filternbrbitpos);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	2381      	movs	r3, #129	; 0x81
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	58c9      	ldr	r1, [r1, r3]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4319      	orrs	r1, r3
 8001bf0:	2381      	movs	r3, #129	; 0x81
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	50d1      	str	r1, [r2, r3]
  }

  /* Filter FIFO assignment */
  if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10d      	bne.n	8001c1a <HAL_CAN_ConfigFilter+0x182>
  {
    /* FIFO 0 assignation for the filter */
    CLEAR_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	2385      	movs	r3, #133	; 0x85
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	58cb      	ldr	r3, [r1, r3]
 8001c0c:	68f9      	ldr	r1, [r7, #12]
 8001c0e:	43c9      	mvns	r1, r1
 8001c10:	4019      	ands	r1, r3
 8001c12:	2385      	movs	r3, #133	; 0x85
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	50d1      	str	r1, [r2, r3]
 8001c18:	e00b      	b.n	8001c32 <HAL_CAN_ConfigFilter+0x19a>
  }
  else
  {
    /* FIFO 1 assignation for the filter */
    SET_BIT(hcan->Instance->FFA1R, filternbrbitpos);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6819      	ldr	r1, [r3, #0]
 8001c22:	2385      	movs	r3, #133	; 0x85
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	58c9      	ldr	r1, [r1, r3]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4319      	orrs	r1, r3
 8001c2c:	2385      	movs	r3, #133	; 0x85
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	50d1      	str	r1, [r2, r3]
  }
  
  /* Filter activation */
  if (sFilterConfig->FilterActivation == ENABLE)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6a1b      	ldr	r3, [r3, #32]
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d10b      	bne.n	8001c52 <HAL_CAN_ConfigFilter+0x1ba>
  {
    SET_BIT(hcan->Instance->FA1R, filternbrbitpos);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6819      	ldr	r1, [r3, #0]
 8001c42:	2387      	movs	r3, #135	; 0x87
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	58c9      	ldr	r1, [r1, r3]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	4319      	orrs	r1, r3
 8001c4c:	2387      	movs	r3, #135	; 0x87
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	50d1      	str	r1, [r2, r3]
  }

  /* Leave the initialisation mode for the filter */
  CLEAR_BIT(hcan->Instance->FMR, ((uint32_t)CAN_FMR_FINIT));
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6819      	ldr	r1, [r3, #0]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	58cb      	ldr	r3, [r1, r3]
 8001c60:	2101      	movs	r1, #1
 8001c62:	438b      	bics	r3, r1
 8001c64:	0019      	movs	r1, r3
 8001c66:	2380      	movs	r3, #128	; 0x80
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	50d1      	str	r1, [r2, r3]
  
  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	0018      	movs	r0, r3
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	ffffc0ff 	.word	0xffffc0ff

08001c7c <HAL_CAN_Transmit>:
  *         the configuration information for the specified CAN.  
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Transmit(CAN_HandleTypeDef* hcan, uint32_t Timeout)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t transmitmailbox = CAN_TXSTATUS_NOMAILBOX;
 8001c86:	2304      	movs	r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(hcan->pTxMsg->IDE));
  assert_param(IS_CAN_RTR(hcan->pTxMsg->RTR));
  assert_param(IS_CAN_DLC(hcan->pTxMsg->DLC));

  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	04db      	lsls	r3, r3, #19
 8001c98:	401a      	ands	r2, r3
 8001c9a:	2380      	movs	r3, #128	; 0x80
 8001c9c:	04db      	lsls	r3, r3, #19
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d014      	beq.n	8001ccc <HAL_CAN_Transmit+0x50>
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	2380      	movs	r3, #128	; 0x80
 8001caa:	051b      	lsls	r3, r3, #20
 8001cac:	401a      	ands	r2, r3
  if(((hcan->Instance->TSR&CAN_TSR_TME0) == CAN_TSR_TME0) || \
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	051b      	lsls	r3, r3, #20
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d00a      	beq.n	8001ccc <HAL_CAN_Transmit+0x50>
     ((hcan->Instance->TSR&CAN_TSR_TME2) == CAN_TSR_TME2))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	2380      	movs	r3, #128	; 0x80
 8001cbe:	055b      	lsls	r3, r3, #21
 8001cc0:	401a      	ands	r2, r3
     ((hcan->Instance->TSR&CAN_TSR_TME1) == CAN_TSR_TME1) || \
 8001cc2:	2380      	movs	r3, #128	; 0x80
 8001cc4:	055b      	lsls	r3, r3, #21
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d000      	beq.n	8001ccc <HAL_CAN_Transmit+0x50>
 8001cca:	e181      	b.n	8001fd0 <HAL_CAN_Transmit+0x354>
  {
    /* Process locked */
    __HAL_LOCK(hcan);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	223c      	movs	r2, #60	; 0x3c
 8001cd0:	5c9b      	ldrb	r3, [r3, r2]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_CAN_Transmit+0x5e>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e17f      	b.n	8001fda <HAL_CAN_Transmit+0x35e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	223c      	movs	r2, #60	; 0x3c
 8001cde:	2101      	movs	r1, #1
 8001ce0:	5499      	strb	r1, [r3, r2]

    /* Change CAN state */
    switch(hcan->State)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	223d      	movs	r2, #61	; 0x3d
 8001ce6:	5c9b      	ldrb	r3, [r3, r2]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b32      	cmp	r3, #50	; 0x32
 8001cec:	d008      	beq.n	8001d00 <HAL_CAN_Transmit+0x84>
 8001cee:	2b62      	cmp	r3, #98	; 0x62
 8001cf0:	d00b      	beq.n	8001d0a <HAL_CAN_Transmit+0x8e>
 8001cf2:	2b22      	cmp	r3, #34	; 0x22
 8001cf4:	d10e      	bne.n	8001d14 <HAL_CAN_Transmit+0x98>
    {
      case(HAL_CAN_STATE_BUSY_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	223d      	movs	r2, #61	; 0x3d
 8001cfa:	2142      	movs	r1, #66	; 0x42
 8001cfc:	5499      	strb	r1, [r3, r2]
          break;
 8001cfe:	e00e      	b.n	8001d1e <HAL_CAN_Transmit+0xa2>
      case(HAL_CAN_STATE_BUSY_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX1;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	223d      	movs	r2, #61	; 0x3d
 8001d04:	2152      	movs	r1, #82	; 0x52
 8001d06:	5499      	strb	r1, [r3, r2]
          break;
 8001d08:	e009      	b.n	8001d1e <HAL_CAN_Transmit+0xa2>
      case(HAL_CAN_STATE_BUSY_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_TX_RX0_RX1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	223d      	movs	r2, #61	; 0x3d
 8001d0e:	2172      	movs	r1, #114	; 0x72
 8001d10:	5499      	strb	r1, [r3, r2]
          break;
 8001d12:	e004      	b.n	8001d1e <HAL_CAN_Transmit+0xa2>
      default: /* HAL_CAN_STATE_READY */
          hcan->State = HAL_CAN_STATE_BUSY_TX;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	223d      	movs	r2, #61	; 0x3d
 8001d18:	2112      	movs	r1, #18
 8001d1a:	5499      	strb	r1, [r3, r2]
          break;
 8001d1c:	46c0      	nop			; (mov r8, r8)
    }

    /* Select one empty transmit mailbox */
    if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME0))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689a      	ldr	r2, [r3, #8]
 8001d24:	2380      	movs	r3, #128	; 0x80
 8001d26:	04db      	lsls	r3, r3, #19
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d002      	beq.n	8001d32 <HAL_CAN_Transmit+0xb6>
    {
      transmitmailbox = CAN_TXMAILBOX_0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	e00b      	b.n	8001d4a <HAL_CAN_Transmit+0xce>
    }
    else if (HAL_IS_BIT_SET(hcan->Instance->TSR, CAN_TSR_TME1))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	051b      	lsls	r3, r3, #20
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d002      	beq.n	8001d46 <HAL_CAN_Transmit+0xca>
    {
      transmitmailbox = CAN_TXMAILBOX_1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	e001      	b.n	8001d4a <HAL_CAN_Transmit+0xce>
    }
    else
    {
      transmitmailbox = CAN_TXMAILBOX_2;
 8001d46:	2302      	movs	r3, #2
 8001d48:	60fb      	str	r3, [r7, #12]
    }

    /* Set up the Id */
    hcan->Instance->sTxMailBox[transmitmailbox].TIR &= CAN_TI0R_TXRQ;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	3118      	adds	r1, #24
 8001d56:	0109      	lsls	r1, r1, #4
 8001d58:	58cb      	ldr	r3, [r1, r3]
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	4019      	ands	r1, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	3318      	adds	r3, #24
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	5099      	str	r1, [r3, r2]
    if (hcan->pTxMsg->IDE == CAN_ID_STD)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d115      	bne.n	8001d9c <HAL_CAN_Transmit+0x120>
    {
      assert_param(IS_CAN_STDID(hcan->pTxMsg->StdId));  
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	3118      	adds	r1, #24
 8001d7c:	0109      	lsls	r1, r1, #4
 8001d7e:	58c9      	ldr	r1, [r1, r3]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	0558      	lsls	r0, r3, #21
                                                           hcan->pTxMsg->RTR);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	68db      	ldr	r3, [r3, #12]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->StdId << CAN_TI0R_STID_Pos) | \
 8001d8e:	4303      	orrs	r3, r0
 8001d90:	4319      	orrs	r1, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	3318      	adds	r3, #24
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	5099      	str	r1, [r3, r2]
 8001d9a:	e018      	b.n	8001dce <HAL_CAN_Transmit+0x152>
    }
    else
    {
      assert_param(IS_CAN_EXTID(hcan->pTxMsg->ExtId));
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	68f9      	ldr	r1, [r7, #12]
 8001da6:	3118      	adds	r1, #24
 8001da8:	0109      	lsls	r1, r1, #4
 8001daa:	58c9      	ldr	r1, [r1, r3]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	00d8      	lsls	r0, r3, #3
                                                           hcan->pTxMsg->IDE | \
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db8:	689b      	ldr	r3, [r3, #8]
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8001dba:	4318      	orrs	r0, r3
                                                           hcan->pTxMsg->RTR);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	68db      	ldr	r3, [r3, #12]
                                                           hcan->pTxMsg->IDE | \
 8001dc2:	4303      	orrs	r3, r0
      hcan->Instance->sTxMailBox[transmitmailbox].TIR |= ((hcan->pTxMsg->ExtId << CAN_TI0R_EXID_Pos) | \
 8001dc4:	4319      	orrs	r1, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3318      	adds	r3, #24
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	5099      	str	r1, [r3, r2]
    }
    
    /* Set up the DLC */
    hcan->pTxMsg->DLC &= (uint8_t)0x0000000FU;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001dd6:	6912      	ldr	r2, [r2, #16]
 8001dd8:	210f      	movs	r1, #15
 8001dda:	400a      	ands	r2, r1
 8001ddc:	611a      	str	r2, [r3, #16]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR &= 0xFFFFFFF0U;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6819      	ldr	r1, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3318      	adds	r3, #24
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	18d3      	adds	r3, r2, r3
 8001dee:	3304      	adds	r3, #4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	220f      	movs	r2, #15
 8001df4:	4393      	bics	r3, r2
 8001df6:	001a      	movs	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3318      	adds	r3, #24
 8001dfc:	011b      	lsls	r3, r3, #4
 8001dfe:	18cb      	adds	r3, r1, r3
 8001e00:	3304      	adds	r3, #4
 8001e02:	601a      	str	r2, [r3, #0]
    hcan->Instance->sTxMailBox[transmitmailbox].TDTR |= hcan->pTxMsg->DLC;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6819      	ldr	r1, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	3318      	adds	r3, #24
 8001e10:	011b      	lsls	r3, r3, #4
 8001e12:	18d3      	adds	r3, r2, r3
 8001e14:	3304      	adds	r3, #4
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	691b      	ldr	r3, [r3, #16]
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3318      	adds	r3, #24
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	18cb      	adds	r3, r1, r3
 8001e28:	3304      	adds	r3, #4
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR, ((uint32_t)hcan->pTxMsg->Data[3] << CAN_TDL0R_DATA3_Pos) |
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	7ddb      	ldrb	r3, [r3, #23]
 8001e36:	061a      	lsls	r2, r3, #24
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3c:	7d9b      	ldrb	r3, [r3, #22]
 8001e3e:	041b      	lsls	r3, r3, #16
 8001e40:	431a      	orrs	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	7d5b      	ldrb	r3, [r3, #21]
 8001e48:	021b      	lsls	r3, r3, #8
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e50:	7d1b      	ldrb	r3, [r3, #20]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	68f9      	ldr	r1, [r7, #12]
 8001e56:	23c4      	movs	r3, #196	; 0xc4
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	0109      	lsls	r1, r1, #4
 8001e5c:	1841      	adds	r1, r0, r1
 8001e5e:	18cb      	adds	r3, r1, r3
 8001e60:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[2] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[1] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[0] << CAN_TDL0R_DATA0_Pos));
    WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR, ((uint32_t)hcan->pTxMsg->Data[7] << CAN_TDL0R_DATA3_Pos) |
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6818      	ldr	r0, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	7edb      	ldrb	r3, [r3, #27]
 8001e6c:	061a      	lsls	r2, r3, #24
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	7e9b      	ldrb	r3, [r3, #26]
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	7e5b      	ldrb	r3, [r3, #25]
 8001e7e:	021b      	lsls	r3, r3, #8
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	7e1b      	ldrb	r3, [r3, #24]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	68f9      	ldr	r1, [r7, #12]
 8001e8c:	23c6      	movs	r3, #198	; 0xc6
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	0109      	lsls	r1, r1, #4
 8001e92:	1841      	adds	r1, r0, r1
 8001e94:	18cb      	adds	r3, r1, r3
 8001e96:	601a      	str	r2, [r3, #0]
                                                                ((uint32_t)hcan->pTxMsg->Data[6] << CAN_TDL0R_DATA2_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[5] << CAN_TDL0R_DATA1_Pos) |
                                                                ((uint32_t)hcan->pTxMsg->Data[4] << CAN_TDL0R_DATA0_Pos));

    /* Request transmission */
    SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68f9      	ldr	r1, [r7, #12]
 8001ea2:	3118      	adds	r1, #24
 8001ea4:	0109      	lsls	r1, r1, #4
 8001ea6:	58cb      	ldr	r3, [r1, r3]
 8001ea8:	2101      	movs	r1, #1
 8001eaa:	4319      	orrs	r1, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	3318      	adds	r3, #24
 8001eb0:	011b      	lsls	r3, r3, #4
 8001eb2:	5099      	str	r1, [r3, r2]
  
    /* Get tick */
    tickstart = HAL_GetTick();   
 8001eb4:	f7fe ff80 	bl	8000db8 <HAL_GetTick>
 8001eb8:	0003      	movs	r3, r0
 8001eba:	60bb      	str	r3, [r7, #8]
  
    /* Check End of transmission flag */
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8001ebc:	e039      	b.n	8001f32 <HAL_CAN_Transmit+0x2b6>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	d036      	beq.n	8001f32 <HAL_CAN_Transmit+0x2b6>
      {
        if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <HAL_CAN_Transmit+0x25e>
 8001eca:	f7fe ff75 	bl	8000db8 <HAL_GetTick>
 8001ece:	0002      	movs	r2, r0
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	1ad2      	subs	r2, r2, r3
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d92b      	bls.n	8001f32 <HAL_CAN_Transmit+0x2b6>
        {
          hcan->State = HAL_CAN_STATE_TIMEOUT;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	223d      	movs	r2, #61	; 0x3d
 8001ede:	2103      	movs	r1, #3
 8001ee0:	5499      	strb	r1, [r3, r2]

          /* Cancel transmission */
          __HAL_CAN_CANCEL_TRANSMIT(hcan, transmitmailbox);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d108      	bne.n	8001efa <HAL_CAN_Transmit+0x27e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	6892      	ldr	r2, [r2, #8]
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	e015      	b.n	8001f26 <HAL_CAN_Transmit+0x2aa>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d109      	bne.n	8001f14 <HAL_CAN_Transmit+0x298>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	6812      	ldr	r2, [r2, #0]
 8001f08:	6892      	ldr	r2, [r2, #8]
 8001f0a:	2180      	movs	r1, #128	; 0x80
 8001f0c:	0209      	lsls	r1, r1, #8
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	e008      	b.n	8001f26 <HAL_CAN_Transmit+0x2aa>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	6892      	ldr	r2, [r2, #8]
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	0409      	lsls	r1, r1, #16
 8001f22:	430a      	orrs	r2, r1
 8001f24:	609a      	str	r2, [r3, #8]

          /* Process unlocked */
          __HAL_UNLOCK(hcan);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	223c      	movs	r2, #60	; 0x3c
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e053      	b.n	8001fda <HAL_CAN_Transmit+0x35e>
    while(!(__HAL_CAN_TRANSMIT_STATUS(hcan, transmitmailbox)))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d10b      	bne.n	8001f50 <HAL_CAN_Transmit+0x2d4>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	4a29      	ldr	r2, [pc, #164]	; (8001fe4 <HAL_CAN_Transmit+0x368>)
 8001f40:	4013      	ands	r3, r2
 8001f42:	4a29      	ldr	r2, [pc, #164]	; (8001fe8 <HAL_CAN_Transmit+0x36c>)
 8001f44:	4694      	mov	ip, r2
 8001f46:	4463      	add	r3, ip
 8001f48:	1e5a      	subs	r2, r3, #1
 8001f4a:	4193      	sbcs	r3, r2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e019      	b.n	8001f84 <HAL_CAN_Transmit+0x308>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d10b      	bne.n	8001f6e <HAL_CAN_Transmit+0x2f2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_CAN_Transmit+0x370>)
 8001f5e:	4013      	ands	r3, r2
 8001f60:	4a23      	ldr	r2, [pc, #140]	; (8001ff0 <HAL_CAN_Transmit+0x374>)
 8001f62:	4694      	mov	ip, r2
 8001f64:	4463      	add	r3, ip
 8001f66:	1e5a      	subs	r2, r3, #1
 8001f68:	4193      	sbcs	r3, r2
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	e00a      	b.n	8001f84 <HAL_CAN_Transmit+0x308>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	4a1f      	ldr	r2, [pc, #124]	; (8001ff4 <HAL_CAN_Transmit+0x378>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <HAL_CAN_Transmit+0x37c>)
 8001f7a:	4694      	mov	ip, r2
 8001f7c:	4463      	add	r3, ip
 8001f7e:	1e5a      	subs	r2, r3, #1
 8001f80:	4193      	sbcs	r3, r2
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d19a      	bne.n	8001ebe <HAL_CAN_Transmit+0x242>
        }
      }
    }

    /* Change CAN state */
    switch(hcan->State)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	223d      	movs	r2, #61	; 0x3d
 8001f8c:	5c9b      	ldrb	r3, [r3, r2]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b52      	cmp	r3, #82	; 0x52
 8001f92:	d008      	beq.n	8001fa6 <HAL_CAN_Transmit+0x32a>
 8001f94:	2b72      	cmp	r3, #114	; 0x72
 8001f96:	d00b      	beq.n	8001fb0 <HAL_CAN_Transmit+0x334>
 8001f98:	2b42      	cmp	r3, #66	; 0x42
 8001f9a:	d10e      	bne.n	8001fba <HAL_CAN_Transmit+0x33e>
    {
      case(HAL_CAN_STATE_BUSY_TX_RX0):
          hcan->State = HAL_CAN_STATE_BUSY_RX0;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	223d      	movs	r2, #61	; 0x3d
 8001fa0:	2122      	movs	r1, #34	; 0x22
 8001fa2:	5499      	strb	r1, [r3, r2]
          break;
 8001fa4:	e00e      	b.n	8001fc4 <HAL_CAN_Transmit+0x348>
      case(HAL_CAN_STATE_BUSY_TX_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	223d      	movs	r2, #61	; 0x3d
 8001faa:	2132      	movs	r1, #50	; 0x32
 8001fac:	5499      	strb	r1, [r3, r2]
          break;
 8001fae:	e009      	b.n	8001fc4 <HAL_CAN_Transmit+0x348>
      case(HAL_CAN_STATE_BUSY_TX_RX0_RX1):
          hcan->State = HAL_CAN_STATE_BUSY_RX0_RX1;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	223d      	movs	r2, #61	; 0x3d
 8001fb4:	2162      	movs	r1, #98	; 0x62
 8001fb6:	5499      	strb	r1, [r3, r2]
          break;
 8001fb8:	e004      	b.n	8001fc4 <HAL_CAN_Transmit+0x348>
      default: /* HAL_CAN_STATE_BUSY_TX */
          hcan->State = HAL_CAN_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	223d      	movs	r2, #61	; 0x3d
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]
          break;
 8001fc2:	46c0      	nop			; (mov r8, r8)
    }

    /* Process unlocked */
    __HAL_UNLOCK(hcan);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	223c      	movs	r2, #60	; 0x3c
 8001fc8:	2100      	movs	r1, #0
 8001fca:	5499      	strb	r1, [r3, r2]
    
    /* Return function status */
    return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	e004      	b.n	8001fda <HAL_CAN_Transmit+0x35e>
  }
  else
  {
    /* Change CAN state */
    hcan->State = HAL_CAN_STATE_ERROR; 
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	223d      	movs	r2, #61	; 0x3d
 8001fd4:	2104      	movs	r1, #4
 8001fd6:	5499      	strb	r1, [r3, r2]

    /* Return function status */
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
  }
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b004      	add	sp, #16
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	04000001 	.word	0x04000001
 8001fe8:	fbffffff 	.word	0xfbffffff
 8001fec:	08000100 	.word	0x08000100
 8001ff0:	f7ffff00 	.word	0xf7ffff00
 8001ff4:	10010000 	.word	0x10010000
 8001ff8:	efff0000 	.word	0xefff0000

08001ffc <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	0002      	movs	r2, r0
 8002004:	1dfb      	adds	r3, r7, #7
 8002006:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <NVIC_EnableIRQ+0x28>)
 800200a:	1dfa      	adds	r2, r7, #7
 800200c:	7812      	ldrb	r2, [r2, #0]
 800200e:	0011      	movs	r1, r2
 8002010:	221f      	movs	r2, #31
 8002012:	400a      	ands	r2, r1
 8002014:	2101      	movs	r1, #1
 8002016:	4091      	lsls	r1, r2
 8002018:	000a      	movs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b002      	add	sp, #8
 8002022:	bd80      	pop	{r7, pc}
 8002024:	e000e100 	.word	0xe000e100

08002028 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b5b0      	push	{r4, r5, r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	0002      	movs	r2, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b7f      	cmp	r3, #127	; 0x7f
 800203c:	d932      	bls.n	80020a4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800203e:	4c2f      	ldr	r4, [pc, #188]	; (80020fc <NVIC_SetPriority+0xd4>)
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	001a      	movs	r2, r3
 8002046:	230f      	movs	r3, #15
 8002048:	4013      	ands	r3, r2
 800204a:	3b08      	subs	r3, #8
 800204c:	0899      	lsrs	r1, r3, #2
 800204e:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <NVIC_SetPriority+0xd4>)
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	0018      	movs	r0, r3
 8002056:	230f      	movs	r3, #15
 8002058:	4003      	ands	r3, r0
 800205a:	3b08      	subs	r3, #8
 800205c:	089b      	lsrs	r3, r3, #2
 800205e:	3306      	adds	r3, #6
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	18d3      	adds	r3, r2, r3
 8002064:	3304      	adds	r3, #4
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	1dfa      	adds	r2, r7, #7
 800206a:	7812      	ldrb	r2, [r2, #0]
 800206c:	0010      	movs	r0, r2
 800206e:	2203      	movs	r2, #3
 8002070:	4002      	ands	r2, r0
 8002072:	00d2      	lsls	r2, r2, #3
 8002074:	20ff      	movs	r0, #255	; 0xff
 8002076:	4090      	lsls	r0, r2
 8002078:	0002      	movs	r2, r0
 800207a:	43d2      	mvns	r2, r2
 800207c:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	019b      	lsls	r3, r3, #6
 8002082:	20ff      	movs	r0, #255	; 0xff
 8002084:	4018      	ands	r0, r3
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	001d      	movs	r5, r3
 800208c:	2303      	movs	r3, #3
 800208e:	402b      	ands	r3, r5
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4098      	lsls	r0, r3
 8002094:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002096:	431a      	orrs	r2, r3
 8002098:	1d8b      	adds	r3, r1, #6
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	18e3      	adds	r3, r4, r3
 800209e:	3304      	adds	r3, #4
 80020a0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020a2:	e027      	b.n	80020f4 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020a4:	4c16      	ldr	r4, [pc, #88]	; (8002100 <NVIC_SetPriority+0xd8>)
 80020a6:	1dfb      	adds	r3, r7, #7
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	b25b      	sxtb	r3, r3
 80020ac:	089b      	lsrs	r3, r3, #2
 80020ae:	4914      	ldr	r1, [pc, #80]	; (8002100 <NVIC_SetPriority+0xd8>)
 80020b0:	1dfa      	adds	r2, r7, #7
 80020b2:	7812      	ldrb	r2, [r2, #0]
 80020b4:	b252      	sxtb	r2, r2
 80020b6:	0892      	lsrs	r2, r2, #2
 80020b8:	32c0      	adds	r2, #192	; 0xc0
 80020ba:	0092      	lsls	r2, r2, #2
 80020bc:	5852      	ldr	r2, [r2, r1]
 80020be:	1df9      	adds	r1, r7, #7
 80020c0:	7809      	ldrb	r1, [r1, #0]
 80020c2:	0008      	movs	r0, r1
 80020c4:	2103      	movs	r1, #3
 80020c6:	4001      	ands	r1, r0
 80020c8:	00c9      	lsls	r1, r1, #3
 80020ca:	20ff      	movs	r0, #255	; 0xff
 80020cc:	4088      	lsls	r0, r1
 80020ce:	0001      	movs	r1, r0
 80020d0:	43c9      	mvns	r1, r1
 80020d2:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	0192      	lsls	r2, r2, #6
 80020d8:	20ff      	movs	r0, #255	; 0xff
 80020da:	4010      	ands	r0, r2
 80020dc:	1dfa      	adds	r2, r7, #7
 80020de:	7812      	ldrb	r2, [r2, #0]
 80020e0:	0015      	movs	r5, r2
 80020e2:	2203      	movs	r2, #3
 80020e4:	402a      	ands	r2, r5
 80020e6:	00d2      	lsls	r2, r2, #3
 80020e8:	4090      	lsls	r0, r2
 80020ea:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ec:	430a      	orrs	r2, r1
 80020ee:	33c0      	adds	r3, #192	; 0xc0
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	511a      	str	r2, [r3, r4]
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bdb0      	pop	{r4, r5, r7, pc}
 80020fc:	e000ed00 	.word	0xe000ed00
 8002100:	e000e100 	.word	0xe000e100

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	4a0c      	ldr	r2, [pc, #48]	; (8002144 <SysTick_Config+0x40>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002116:	2301      	movs	r3, #1
 8002118:	e010      	b.n	800213c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211a:	4b0b      	ldr	r3, [pc, #44]	; (8002148 <SysTick_Config+0x44>)
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	3a01      	subs	r2, #1
 8002120:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002122:	2301      	movs	r3, #1
 8002124:	425b      	negs	r3, r3
 8002126:	2103      	movs	r1, #3
 8002128:	0018      	movs	r0, r3
 800212a:	f7ff ff7d 	bl	8002028 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <SysTick_Config+0x44>)
 8002130:	2200      	movs	r2, #0
 8002132:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SysTick_Config+0x44>)
 8002136:	2207      	movs	r2, #7
 8002138:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800213a:	2300      	movs	r3, #0
}
 800213c:	0018      	movs	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	b002      	add	sp, #8
 8002142:	bd80      	pop	{r7, pc}
 8002144:	00ffffff 	.word	0x00ffffff
 8002148:	e000e010 	.word	0xe000e010

0800214c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	230f      	movs	r3, #15
 8002158:	18fb      	adds	r3, r7, r3
 800215a:	1c02      	adds	r2, r0, #0
 800215c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	230f      	movs	r3, #15
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	b25b      	sxtb	r3, r3
 8002168:	0011      	movs	r1, r2
 800216a:	0018      	movs	r0, r3
 800216c:	f7ff ff5c 	bl	8002028 <NVIC_SetPriority>
}
 8002170:	46c0      	nop			; (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b004      	add	sp, #16
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	0002      	movs	r2, r0
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002184:	1dfb      	adds	r3, r7, #7
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	b25b      	sxtb	r3, r3
 800218a:	0018      	movs	r0, r3
 800218c:	f7ff ff36 	bl	8001ffc <NVIC_EnableIRQ>
}
 8002190:	46c0      	nop			; (mov r8, r8)
 8002192:	46bd      	mov	sp, r7
 8002194:	b002      	add	sp, #8
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0018      	movs	r0, r3
 80021a4:	f7ff ffae 	bl	8002104 <SysTick_Config>
 80021a8:	0003      	movs	r3, r0
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b002      	add	sp, #8
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	d106      	bne.n	80021d0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80021c2:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80021c4:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	2104      	movs	r1, #4
 80021ca:	430a      	orrs	r2, r1
 80021cc:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80021ce:	e005      	b.n	80021dc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 80021d4:	6812      	ldr	r2, [r2, #0]
 80021d6:	2104      	movs	r1, #4
 80021d8:	438a      	bics	r2, r1
 80021da:	601a      	str	r2, [r3, #0]
}
 80021dc:	46c0      	nop			; (mov r8, r8)
 80021de:	46bd      	mov	sp, r7
 80021e0:	b002      	add	sp, #8
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	e000e010 	.word	0xe000e010

080021e8 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80021ec:	f000 f803 	bl	80021f6 <HAL_SYSTICK_Callback>
}
 80021f0:	46c0      	nop			; (mov r8, r8)
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}

08002200 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800220e:	2300      	movs	r3, #0
 8002210:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8002216:	e155      	b.n	80024c4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2101      	movs	r1, #1
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	4091      	lsls	r1, r2
 8002222:	000a      	movs	r2, r1
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d100      	bne.n	8002230 <HAL_GPIO_Init+0x30>
 800222e:	e146      	b.n	80024be <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d003      	beq.n	8002240 <HAL_GPIO_Init+0x40>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	2b12      	cmp	r3, #18
 800223e:	d123      	bne.n	8002288 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	08da      	lsrs	r2, r3, #3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	3208      	adds	r2, #8
 8002248:	0092      	lsls	r2, r2, #2
 800224a:	58d3      	ldr	r3, [r2, r3]
 800224c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2207      	movs	r2, #7
 8002252:	4013      	ands	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	220f      	movs	r2, #15
 8002258:	409a      	lsls	r2, r3
 800225a:	0013      	movs	r3, r2
 800225c:	43da      	mvns	r2, r3
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	4013      	ands	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	2107      	movs	r1, #7
 800226c:	400b      	ands	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	409a      	lsls	r2, r3
 8002272:	0013      	movs	r3, r2
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4313      	orrs	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	08da      	lsrs	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3208      	adds	r2, #8
 8002282:	0092      	lsls	r2, r2, #2
 8002284:	6939      	ldr	r1, [r7, #16]
 8002286:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	005b      	lsls	r3, r3, #1
 8002292:	2203      	movs	r2, #3
 8002294:	409a      	lsls	r2, r3
 8002296:	0013      	movs	r3, r2
 8002298:	43da      	mvns	r2, r3
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	401a      	ands	r2, r3
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	409a      	lsls	r2, r3
 80022ae:	0013      	movs	r3, r2
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d00b      	beq.n	80022dc <HAL_GPIO_Init+0xdc>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d007      	beq.n	80022dc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d0:	2b11      	cmp	r3, #17
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b12      	cmp	r3, #18
 80022da:	d130      	bne.n	800233e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	409a      	lsls	r2, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	43da      	mvns	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	409a      	lsls	r2, r3
 80022fe:	0013      	movs	r3, r2
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	693a      	ldr	r2, [r7, #16]
 800230a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002312:	2201      	movs	r2, #1
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	409a      	lsls	r2, r3
 8002318:	0013      	movs	r3, r2
 800231a:	43da      	mvns	r2, r3
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	4013      	ands	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	2201      	movs	r2, #1
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
 8002330:	0013      	movs	r3, r2
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	409a      	lsls	r2, r3
 800234c:	0013      	movs	r3, r2
 800234e:	43da      	mvns	r2, r3
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	409a      	lsls	r2, r3
 8002360:	0013      	movs	r3, r2
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	2380      	movs	r3, #128	; 0x80
 8002374:	055b      	lsls	r3, r3, #21
 8002376:	4013      	ands	r3, r2
 8002378:	d100      	bne.n	800237c <HAL_GPIO_Init+0x17c>
 800237a:	e0a0      	b.n	80024be <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237c:	4b57      	ldr	r3, [pc, #348]	; (80024dc <HAL_GPIO_Init+0x2dc>)
 800237e:	4a57      	ldr	r2, [pc, #348]	; (80024dc <HAL_GPIO_Init+0x2dc>)
 8002380:	6992      	ldr	r2, [r2, #24]
 8002382:	2101      	movs	r1, #1
 8002384:	430a      	orrs	r2, r1
 8002386:	619a      	str	r2, [r3, #24]
 8002388:	4b54      	ldr	r3, [pc, #336]	; (80024dc <HAL_GPIO_Init+0x2dc>)
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	2201      	movs	r2, #1
 800238e:	4013      	ands	r3, r2
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8002394:	4a52      	ldr	r2, [pc, #328]	; (80024e0 <HAL_GPIO_Init+0x2e0>)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	589b      	ldr	r3, [r3, r2]
 80023a0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	2203      	movs	r2, #3
 80023a6:	4013      	ands	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	220f      	movs	r2, #15
 80023ac:	409a      	lsls	r2, r3
 80023ae:	0013      	movs	r3, r2
 80023b0:	43da      	mvns	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	2390      	movs	r3, #144	; 0x90
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	429a      	cmp	r2, r3
 80023c0:	d019      	beq.n	80023f6 <HAL_GPIO_Init+0x1f6>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a47      	ldr	r2, [pc, #284]	; (80024e4 <HAL_GPIO_Init+0x2e4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d013      	beq.n	80023f2 <HAL_GPIO_Init+0x1f2>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a46      	ldr	r2, [pc, #280]	; (80024e8 <HAL_GPIO_Init+0x2e8>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00d      	beq.n	80023ee <HAL_GPIO_Init+0x1ee>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a45      	ldr	r2, [pc, #276]	; (80024ec <HAL_GPIO_Init+0x2ec>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d007      	beq.n	80023ea <HAL_GPIO_Init+0x1ea>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a44      	ldr	r2, [pc, #272]	; (80024f0 <HAL_GPIO_Init+0x2f0>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d101      	bne.n	80023e6 <HAL_GPIO_Init+0x1e6>
 80023e2:	2304      	movs	r3, #4
 80023e4:	e008      	b.n	80023f8 <HAL_GPIO_Init+0x1f8>
 80023e6:	2305      	movs	r3, #5
 80023e8:	e006      	b.n	80023f8 <HAL_GPIO_Init+0x1f8>
 80023ea:	2303      	movs	r3, #3
 80023ec:	e004      	b.n	80023f8 <HAL_GPIO_Init+0x1f8>
 80023ee:	2302      	movs	r3, #2
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_Init+0x1f8>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <HAL_GPIO_Init+0x1f8>
 80023f6:	2300      	movs	r3, #0
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	2103      	movs	r1, #3
 80023fc:	400a      	ands	r2, r1
 80023fe:	0092      	lsls	r2, r2, #2
 8002400:	4093      	lsls	r3, r2
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002408:	4935      	ldr	r1, [pc, #212]	; (80024e0 <HAL_GPIO_Init+0x2e0>)
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	089b      	lsrs	r3, r3, #2
 800240e:	3302      	adds	r3, #2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002416:	4b37      	ldr	r3, [pc, #220]	; (80024f4 <HAL_GPIO_Init+0x2f4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43da      	mvns	r2, r3
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	2380      	movs	r3, #128	; 0x80
 800242c:	025b      	lsls	r3, r3, #9
 800242e:	4013      	ands	r3, r2
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800243a:	4b2e      	ldr	r3, [pc, #184]	; (80024f4 <HAL_GPIO_Init+0x2f4>)
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8002440:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <HAL_GPIO_Init+0x2f4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	43da      	mvns	r2, r3
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	2380      	movs	r3, #128	; 0x80
 8002456:	029b      	lsls	r3, r3, #10
 8002458:	4013      	ands	r3, r2
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002464:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <HAL_GPIO_Init+0x2f4>)
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246a:	4b22      	ldr	r3, [pc, #136]	; (80024f4 <HAL_GPIO_Init+0x2f4>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	43da      	mvns	r2, r3
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	2380      	movs	r3, #128	; 0x80
 8002480:	035b      	lsls	r3, r3, #13
 8002482:	4013      	ands	r3, r2
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_GPIO_Init+0x2f4>)
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002494:	4b17      	ldr	r3, [pc, #92]	; (80024f4 <HAL_GPIO_Init+0x2f4>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	43da      	mvns	r2, r3
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4013      	ands	r3, r2
 80024a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	039b      	lsls	r3, r3, #14
 80024ac:	4013      	ands	r3, r2
 80024ae:	d003      	beq.n	80024b8 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <HAL_GPIO_Init+0x2f4>)
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	3301      	adds	r3, #1
 80024c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	40da      	lsrs	r2, r3
 80024cc:	1e13      	subs	r3, r2, #0
 80024ce:	d000      	beq.n	80024d2 <HAL_GPIO_Init+0x2d2>
 80024d0:	e6a2      	b.n	8002218 <HAL_GPIO_Init+0x18>
  } 
}
 80024d2:	46c0      	nop			; (mov r8, r8)
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b006      	add	sp, #24
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010000 	.word	0x40010000
 80024e4:	48000400 	.word	0x48000400
 80024e8:	48000800 	.word	0x48000800
 80024ec:	48000c00 	.word	0x48000c00
 80024f0:	48001000 	.word	0x48001000
 80024f4:	40010400 	.word	0x40010400

080024f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2201      	movs	r2, #1
 800250a:	4013      	ands	r3, r2
 800250c:	d100      	bne.n	8002510 <HAL_RCC_OscConfig+0x18>
 800250e:	e08d      	b.n	800262c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002510:	4bc5      	ldr	r3, [pc, #788]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	220c      	movs	r2, #12
 8002516:	4013      	ands	r3, r2
 8002518:	2b04      	cmp	r3, #4
 800251a:	d00e      	beq.n	800253a <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800251c:	4bc2      	ldr	r3, [pc, #776]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	220c      	movs	r2, #12
 8002522:	4013      	ands	r3, r2
 8002524:	2b08      	cmp	r3, #8
 8002526:	d116      	bne.n	8002556 <HAL_RCC_OscConfig+0x5e>
 8002528:	4bbf      	ldr	r3, [pc, #764]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	23c0      	movs	r3, #192	; 0xc0
 800252e:	025b      	lsls	r3, r3, #9
 8002530:	401a      	ands	r2, r3
 8002532:	2380      	movs	r3, #128	; 0x80
 8002534:	025b      	lsls	r3, r3, #9
 8002536:	429a      	cmp	r2, r3
 8002538:	d10d      	bne.n	8002556 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800253a:	4bbb      	ldr	r3, [pc, #748]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	029b      	lsls	r3, r3, #10
 8002542:	4013      	ands	r3, r2
 8002544:	d100      	bne.n	8002548 <HAL_RCC_OscConfig+0x50>
 8002546:	e070      	b.n	800262a <HAL_RCC_OscConfig+0x132>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d000      	beq.n	8002552 <HAL_RCC_OscConfig+0x5a>
 8002550:	e06b      	b.n	800262a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e327      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d107      	bne.n	800256e <HAL_RCC_OscConfig+0x76>
 800255e:	4bb2      	ldr	r3, [pc, #712]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002560:	4ab1      	ldr	r2, [pc, #708]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	2180      	movs	r1, #128	; 0x80
 8002566:	0249      	lsls	r1, r1, #9
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	e02f      	b.n	80025ce <HAL_RCC_OscConfig+0xd6>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10c      	bne.n	8002590 <HAL_RCC_OscConfig+0x98>
 8002576:	4bac      	ldr	r3, [pc, #688]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002578:	4aab      	ldr	r2, [pc, #684]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	49ab      	ldr	r1, [pc, #684]	; (800282c <HAL_RCC_OscConfig+0x334>)
 800257e:	400a      	ands	r2, r1
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	4ba9      	ldr	r3, [pc, #676]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002584:	4aa8      	ldr	r2, [pc, #672]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	49a9      	ldr	r1, [pc, #676]	; (8002830 <HAL_RCC_OscConfig+0x338>)
 800258a:	400a      	ands	r2, r1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e01e      	b.n	80025ce <HAL_RCC_OscConfig+0xd6>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b05      	cmp	r3, #5
 8002596:	d10e      	bne.n	80025b6 <HAL_RCC_OscConfig+0xbe>
 8002598:	4ba3      	ldr	r3, [pc, #652]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800259a:	4aa3      	ldr	r2, [pc, #652]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800259c:	6812      	ldr	r2, [r2, #0]
 800259e:	2180      	movs	r1, #128	; 0x80
 80025a0:	02c9      	lsls	r1, r1, #11
 80025a2:	430a      	orrs	r2, r1
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	4ba0      	ldr	r3, [pc, #640]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80025a8:	4a9f      	ldr	r2, [pc, #636]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80025aa:	6812      	ldr	r2, [r2, #0]
 80025ac:	2180      	movs	r1, #128	; 0x80
 80025ae:	0249      	lsls	r1, r1, #9
 80025b0:	430a      	orrs	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e00b      	b.n	80025ce <HAL_RCC_OscConfig+0xd6>
 80025b6:	4b9c      	ldr	r3, [pc, #624]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80025b8:	4a9b      	ldr	r2, [pc, #620]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	499b      	ldr	r1, [pc, #620]	; (800282c <HAL_RCC_OscConfig+0x334>)
 80025be:	400a      	ands	r2, r1
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	4b99      	ldr	r3, [pc, #612]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80025c4:	4a98      	ldr	r2, [pc, #608]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	4999      	ldr	r1, [pc, #612]	; (8002830 <HAL_RCC_OscConfig+0x338>)
 80025ca:	400a      	ands	r2, r1
 80025cc:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d014      	beq.n	8002600 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d6:	f7fe fbef 	bl	8000db8 <HAL_GetTick>
 80025da:	0003      	movs	r3, r0
 80025dc:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e0:	f7fe fbea 	bl	8000db8 <HAL_GetTick>
 80025e4:	0002      	movs	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b64      	cmp	r3, #100	; 0x64
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e2d9      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b8d      	ldr	r3, [pc, #564]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	2380      	movs	r3, #128	; 0x80
 80025f8:	029b      	lsls	r3, r3, #10
 80025fa:	4013      	ands	r3, r2
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe8>
 80025fe:	e015      	b.n	800262c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002600:	f7fe fbda 	bl	8000db8 <HAL_GetTick>
 8002604:	0003      	movs	r3, r0
 8002606:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800260a:	f7fe fbd5 	bl	8000db8 <HAL_GetTick>
 800260e:	0002      	movs	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b64      	cmp	r3, #100	; 0x64
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e2c4      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800261c:	4b82      	ldr	r3, [pc, #520]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	4013      	ands	r3, r2
 8002626:	d1f0      	bne.n	800260a <HAL_RCC_OscConfig+0x112>
 8002628:	e000      	b.n	800262c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2202      	movs	r2, #2
 8002632:	4013      	ands	r3, r2
 8002634:	d100      	bne.n	8002638 <HAL_RCC_OscConfig+0x140>
 8002636:	e06c      	b.n	8002712 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002638:	4b7b      	ldr	r3, [pc, #492]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	220c      	movs	r2, #12
 800263e:	4013      	ands	r3, r2
 8002640:	d00e      	beq.n	8002660 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002642:	4b79      	ldr	r3, [pc, #484]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	220c      	movs	r2, #12
 8002648:	4013      	ands	r3, r2
 800264a:	2b08      	cmp	r3, #8
 800264c:	d11f      	bne.n	800268e <HAL_RCC_OscConfig+0x196>
 800264e:	4b76      	ldr	r3, [pc, #472]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	23c0      	movs	r3, #192	; 0xc0
 8002654:	025b      	lsls	r3, r3, #9
 8002656:	401a      	ands	r2, r3
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	021b      	lsls	r3, r3, #8
 800265c:	429a      	cmp	r2, r3
 800265e:	d116      	bne.n	800268e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002660:	4b71      	ldr	r3, [pc, #452]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2202      	movs	r2, #2
 8002666:	4013      	ands	r3, r2
 8002668:	d005      	beq.n	8002676 <HAL_RCC_OscConfig+0x17e>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d001      	beq.n	8002676 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e297      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002676:	4a6c      	ldr	r2, [pc, #432]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002678:	4b6b      	ldr	r3, [pc, #428]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	21f8      	movs	r1, #248	; 0xf8
 800267e:	438b      	bics	r3, r1
 8002680:	0019      	movs	r1, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	430b      	orrs	r3, r1
 800268a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268c:	e041      	b.n	8002712 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d024      	beq.n	80026e0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002696:	4b64      	ldr	r3, [pc, #400]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002698:	4a63      	ldr	r2, [pc, #396]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	430a      	orrs	r2, r1
 80026a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a2:	f7fe fb89 	bl	8000db8 <HAL_GetTick>
 80026a6:	0003      	movs	r3, r0
 80026a8:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ac:	f7fe fb84 	bl	8000db8 <HAL_GetTick>
 80026b0:	0002      	movs	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e273      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b5a      	ldr	r3, [pc, #360]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2202      	movs	r2, #2
 80026c4:	4013      	ands	r3, r2
 80026c6:	d0f1      	beq.n	80026ac <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026c8:	4a57      	ldr	r2, [pc, #348]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80026ca:	4b57      	ldr	r3, [pc, #348]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	21f8      	movs	r1, #248	; 0xf8
 80026d0:	438b      	bics	r3, r1
 80026d2:	0019      	movs	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	430b      	orrs	r3, r1
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e018      	b.n	8002712 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e0:	4b51      	ldr	r3, [pc, #324]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80026e2:	4a51      	ldr	r2, [pc, #324]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	2101      	movs	r1, #1
 80026e8:	438a      	bics	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ec:	f7fe fb64 	bl	8000db8 <HAL_GetTick>
 80026f0:	0003      	movs	r3, r0
 80026f2:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026f4:	e008      	b.n	8002708 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026f6:	f7fe fb5f 	bl	8000db8 <HAL_GetTick>
 80026fa:	0002      	movs	r2, r0
 80026fc:	693b      	ldr	r3, [r7, #16]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e24e      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002708:	4b47      	ldr	r3, [pc, #284]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d1f1      	bne.n	80026f6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2208      	movs	r2, #8
 8002718:	4013      	ands	r3, r2
 800271a:	d036      	beq.n	800278a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d019      	beq.n	8002758 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002724:	4b40      	ldr	r3, [pc, #256]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002726:	4a40      	ldr	r2, [pc, #256]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002728:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800272a:	2101      	movs	r1, #1
 800272c:	430a      	orrs	r2, r1
 800272e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7fe fb42 	bl	8000db8 <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273a:	f7fe fb3d 	bl	8000db8 <HAL_GetTick>
 800273e:	0002      	movs	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e22c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800274c:	4b36      	ldr	r3, [pc, #216]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d0f1      	beq.n	800273a <HAL_RCC_OscConfig+0x242>
 8002756:	e018      	b.n	800278a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002758:	4b33      	ldr	r3, [pc, #204]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800275a:	4a33      	ldr	r2, [pc, #204]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800275c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800275e:	2101      	movs	r1, #1
 8002760:	438a      	bics	r2, r1
 8002762:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7fe fb28 	bl	8000db8 <HAL_GetTick>
 8002768:	0003      	movs	r3, r0
 800276a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800276e:	f7fe fb23 	bl	8000db8 <HAL_GetTick>
 8002772:	0002      	movs	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e212      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	4b29      	ldr	r3, [pc, #164]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 8002782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002784:	2202      	movs	r2, #2
 8002786:	4013      	ands	r3, r2
 8002788:	d1f1      	bne.n	800276e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2204      	movs	r2, #4
 8002790:	4013      	ands	r3, r2
 8002792:	d100      	bne.n	8002796 <HAL_RCC_OscConfig+0x29e>
 8002794:	e0b6      	b.n	8002904 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002796:	2317      	movs	r3, #23
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800279e:	4b22      	ldr	r3, [pc, #136]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80027a0:	69da      	ldr	r2, [r3, #28]
 80027a2:	2380      	movs	r3, #128	; 0x80
 80027a4:	055b      	lsls	r3, r3, #21
 80027a6:	4013      	ands	r3, r2
 80027a8:	d111      	bne.n	80027ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027aa:	4b1f      	ldr	r3, [pc, #124]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80027ac:	4a1e      	ldr	r2, [pc, #120]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80027ae:	69d2      	ldr	r2, [r2, #28]
 80027b0:	2180      	movs	r1, #128	; 0x80
 80027b2:	0549      	lsls	r1, r1, #21
 80027b4:	430a      	orrs	r2, r1
 80027b6:	61da      	str	r2, [r3, #28]
 80027b8:	4b1b      	ldr	r3, [pc, #108]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	055b      	lsls	r3, r3, #21
 80027c0:	4013      	ands	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
 80027c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027c6:	2317      	movs	r3, #23
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b19      	ldr	r3, [pc, #100]	; (8002834 <HAL_RCC_OscConfig+0x33c>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	d11a      	bne.n	8002810 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027da:	4b16      	ldr	r3, [pc, #88]	; (8002834 <HAL_RCC_OscConfig+0x33c>)
 80027dc:	4a15      	ldr	r2, [pc, #84]	; (8002834 <HAL_RCC_OscConfig+0x33c>)
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	2180      	movs	r1, #128	; 0x80
 80027e2:	0049      	lsls	r1, r1, #1
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e8:	f7fe fae6 	bl	8000db8 <HAL_GetTick>
 80027ec:	0003      	movs	r3, r0
 80027ee:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027f2:	f7fe fae1 	bl	8000db8 <HAL_GetTick>
 80027f6:	0002      	movs	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b64      	cmp	r3, #100	; 0x64
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8002800:	2303      	movs	r3, #3
 8002802:	e1d0      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_OscConfig+0x33c>)
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4013      	ands	r3, r2
 800280e:	d0f0      	beq.n	80027f2 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d10f      	bne.n	8002838 <HAL_RCC_OscConfig+0x340>
 8002818:	4b03      	ldr	r3, [pc, #12]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800281a:	4a03      	ldr	r2, [pc, #12]	; (8002828 <HAL_RCC_OscConfig+0x330>)
 800281c:	6a12      	ldr	r2, [r2, #32]
 800281e:	2101      	movs	r1, #1
 8002820:	430a      	orrs	r2, r1
 8002822:	621a      	str	r2, [r3, #32]
 8002824:	e036      	b.n	8002894 <HAL_RCC_OscConfig+0x39c>
 8002826:	46c0      	nop			; (mov r8, r8)
 8002828:	40021000 	.word	0x40021000
 800282c:	fffeffff 	.word	0xfffeffff
 8002830:	fffbffff 	.word	0xfffbffff
 8002834:	40007000 	.word	0x40007000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10c      	bne.n	800285a <HAL_RCC_OscConfig+0x362>
 8002840:	4bc9      	ldr	r3, [pc, #804]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002842:	4ac9      	ldr	r2, [pc, #804]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002844:	6a12      	ldr	r2, [r2, #32]
 8002846:	2101      	movs	r1, #1
 8002848:	438a      	bics	r2, r1
 800284a:	621a      	str	r2, [r3, #32]
 800284c:	4bc6      	ldr	r3, [pc, #792]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 800284e:	4ac6      	ldr	r2, [pc, #792]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002850:	6a12      	ldr	r2, [r2, #32]
 8002852:	2104      	movs	r1, #4
 8002854:	438a      	bics	r2, r1
 8002856:	621a      	str	r2, [r3, #32]
 8002858:	e01c      	b.n	8002894 <HAL_RCC_OscConfig+0x39c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b05      	cmp	r3, #5
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x384>
 8002862:	4bc1      	ldr	r3, [pc, #772]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002864:	4ac0      	ldr	r2, [pc, #768]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002866:	6a12      	ldr	r2, [r2, #32]
 8002868:	2104      	movs	r1, #4
 800286a:	430a      	orrs	r2, r1
 800286c:	621a      	str	r2, [r3, #32]
 800286e:	4bbe      	ldr	r3, [pc, #760]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002870:	4abd      	ldr	r2, [pc, #756]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002872:	6a12      	ldr	r2, [r2, #32]
 8002874:	2101      	movs	r1, #1
 8002876:	430a      	orrs	r2, r1
 8002878:	621a      	str	r2, [r3, #32]
 800287a:	e00b      	b.n	8002894 <HAL_RCC_OscConfig+0x39c>
 800287c:	4bba      	ldr	r3, [pc, #744]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 800287e:	4aba      	ldr	r2, [pc, #744]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002880:	6a12      	ldr	r2, [r2, #32]
 8002882:	2101      	movs	r1, #1
 8002884:	438a      	bics	r2, r1
 8002886:	621a      	str	r2, [r3, #32]
 8002888:	4bb7      	ldr	r3, [pc, #732]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 800288a:	4ab7      	ldr	r2, [pc, #732]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 800288c:	6a12      	ldr	r2, [r2, #32]
 800288e:	2104      	movs	r1, #4
 8002890:	438a      	bics	r2, r1
 8002892:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d014      	beq.n	80028c6 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289c:	f7fe fa8c 	bl	8000db8 <HAL_GetTick>
 80028a0:	0003      	movs	r3, r0
 80028a2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a4:	e009      	b.n	80028ba <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a6:	f7fe fa87 	bl	8000db8 <HAL_GetTick>
 80028aa:	0002      	movs	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	4aae      	ldr	r2, [pc, #696]	; (8002b6c <HAL_RCC_OscConfig+0x674>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e175      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ba:	4bab      	ldr	r3, [pc, #684]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	2202      	movs	r2, #2
 80028c0:	4013      	ands	r3, r2
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x3ae>
 80028c4:	e013      	b.n	80028ee <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028c6:	f7fe fa77 	bl	8000db8 <HAL_GetTick>
 80028ca:	0003      	movs	r3, r0
 80028cc:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ce:	e009      	b.n	80028e4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe fa72 	bl	8000db8 <HAL_GetTick>
 80028d4:	0002      	movs	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	4aa4      	ldr	r2, [pc, #656]	; (8002b6c <HAL_RCC_OscConfig+0x674>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e160      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028e4:	4ba0      	ldr	r3, [pc, #640]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	2202      	movs	r2, #2
 80028ea:	4013      	ands	r3, r2
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028ee:	2317      	movs	r3, #23
 80028f0:	18fb      	adds	r3, r7, r3
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d105      	bne.n	8002904 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028f8:	4b9b      	ldr	r3, [pc, #620]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 80028fa:	4a9b      	ldr	r2, [pc, #620]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 80028fc:	69d2      	ldr	r2, [r2, #28]
 80028fe:	499c      	ldr	r1, [pc, #624]	; (8002b70 <HAL_RCC_OscConfig+0x678>)
 8002900:	400a      	ands	r2, r1
 8002902:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2210      	movs	r2, #16
 800290a:	4013      	ands	r3, r2
 800290c:	d063      	beq.n	80029d6 <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d12a      	bne.n	800296c <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002916:	4b94      	ldr	r3, [pc, #592]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002918:	4a93      	ldr	r2, [pc, #588]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 800291a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800291c:	2104      	movs	r1, #4
 800291e:	430a      	orrs	r2, r1
 8002920:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002922:	4b91      	ldr	r3, [pc, #580]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002924:	4a90      	ldr	r2, [pc, #576]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002926:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002928:	2101      	movs	r1, #1
 800292a:	430a      	orrs	r2, r1
 800292c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800292e:	f7fe fa43 	bl	8000db8 <HAL_GetTick>
 8002932:	0003      	movs	r3, r0
 8002934:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002938:	f7fe fa3e 	bl	8000db8 <HAL_GetTick>
 800293c:	0002      	movs	r2, r0
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e12d      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800294a:	4b87      	ldr	r3, [pc, #540]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 800294c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294e:	2202      	movs	r2, #2
 8002950:	4013      	ands	r3, r2
 8002952:	d0f1      	beq.n	8002938 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002954:	4a84      	ldr	r2, [pc, #528]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002956:	4b84      	ldr	r3, [pc, #528]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800295a:	21f8      	movs	r1, #248	; 0xf8
 800295c:	438b      	bics	r3, r1
 800295e:	0019      	movs	r1, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	00db      	lsls	r3, r3, #3
 8002966:	430b      	orrs	r3, r1
 8002968:	6353      	str	r3, [r2, #52]	; 0x34
 800296a:	e034      	b.n	80029d6 <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	3305      	adds	r3, #5
 8002972:	d111      	bne.n	8002998 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002974:	4b7c      	ldr	r3, [pc, #496]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002976:	4a7c      	ldr	r2, [pc, #496]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002978:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800297a:	2104      	movs	r1, #4
 800297c:	438a      	bics	r2, r1
 800297e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002980:	4a79      	ldr	r2, [pc, #484]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002982:	4b79      	ldr	r3, [pc, #484]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002986:	21f8      	movs	r1, #248	; 0xf8
 8002988:	438b      	bics	r3, r1
 800298a:	0019      	movs	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	699b      	ldr	r3, [r3, #24]
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	430b      	orrs	r3, r1
 8002994:	6353      	str	r3, [r2, #52]	; 0x34
 8002996:	e01e      	b.n	80029d6 <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002998:	4b73      	ldr	r3, [pc, #460]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 800299a:	4a73      	ldr	r2, [pc, #460]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 800299c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800299e:	2104      	movs	r1, #4
 80029a0:	430a      	orrs	r2, r1
 80029a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80029a4:	4b70      	ldr	r3, [pc, #448]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 80029a6:	4a70      	ldr	r2, [pc, #448]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 80029a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029aa:	2101      	movs	r1, #1
 80029ac:	438a      	bics	r2, r1
 80029ae:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b0:	f7fe fa02 	bl	8000db8 <HAL_GetTick>
 80029b4:	0003      	movs	r3, r0
 80029b6:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029ba:	f7fe f9fd 	bl	8000db8 <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e0ec      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80029cc:	4b66      	ldr	r3, [pc, #408]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	2202      	movs	r2, #2
 80029d2:	4013      	ands	r3, r2
 80029d4:	d1f1      	bne.n	80029ba <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	2220      	movs	r2, #32
 80029dc:	4013      	ands	r3, r2
 80029de:	d05c      	beq.n	8002a9a <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80029e0:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	220c      	movs	r2, #12
 80029e6:	4013      	ands	r3, r2
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	d00e      	beq.n	8002a0a <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029ec:	4b5e      	ldr	r3, [pc, #376]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	220c      	movs	r2, #12
 80029f2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d114      	bne.n	8002a22 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80029f8:	4b5b      	ldr	r3, [pc, #364]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	23c0      	movs	r3, #192	; 0xc0
 80029fe:	025b      	lsls	r3, r3, #9
 8002a00:	401a      	ands	r2, r3
 8002a02:	23c0      	movs	r3, #192	; 0xc0
 8002a04:	025b      	lsls	r3, r3, #9
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d10b      	bne.n	8002a22 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002a0a:	4b57      	ldr	r3, [pc, #348]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002a0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	025b      	lsls	r3, r3, #9
 8002a12:	4013      	ands	r3, r2
 8002a14:	d040      	beq.n	8002a98 <HAL_RCC_OscConfig+0x5a0>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d03c      	beq.n	8002a98 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e0c1      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d01b      	beq.n	8002a62 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002a2a:	4b4f      	ldr	r3, [pc, #316]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002a2c:	4a4e      	ldr	r2, [pc, #312]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002a2e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a30:	2180      	movs	r1, #128	; 0x80
 8002a32:	0249      	lsls	r1, r1, #9
 8002a34:	430a      	orrs	r2, r1
 8002a36:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7fe f9be 	bl	8000db8 <HAL_GetTick>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a42:	f7fe f9b9 	bl	8000db8 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e0a8      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002a54:	4b44      	ldr	r3, [pc, #272]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002a56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	025b      	lsls	r3, r3, #9
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCC_OscConfig+0x54a>
 8002a60:	e01b      	b.n	8002a9a <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002a62:	4b41      	ldr	r3, [pc, #260]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002a64:	4a40      	ldr	r2, [pc, #256]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002a66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a68:	4942      	ldr	r1, [pc, #264]	; (8002b74 <HAL_RCC_OscConfig+0x67c>)
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6e:	f7fe f9a3 	bl	8000db8 <HAL_GetTick>
 8002a72:	0003      	movs	r3, r0
 8002a74:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a78:	f7fe f99e 	bl	8000db8 <HAL_GetTick>
 8002a7c:	0002      	movs	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e08d      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002a8a:	4b37      	ldr	r3, [pc, #220]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002a8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a8e:	2380      	movs	r3, #128	; 0x80
 8002a90:	025b      	lsls	r3, r3, #9
 8002a92:	4013      	ands	r3, r2
 8002a94:	d1f0      	bne.n	8002a78 <HAL_RCC_OscConfig+0x580>
 8002a96:	e000      	b.n	8002a9a <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002a98:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d100      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x5ac>
 8002aa2:	e07f      	b.n	8002ba4 <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa4:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	220c      	movs	r2, #12
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d100      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x5ba>
 8002ab0:	e076      	b.n	8002ba0 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d14b      	bne.n	8002b52 <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aba:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002abc:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	492d      	ldr	r1, [pc, #180]	; (8002b78 <HAL_RCC_OscConfig+0x680>)
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe f977 	bl	8000db8 <HAL_GetTick>
 8002aca:	0003      	movs	r3, r0
 8002acc:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe f972 	bl	8000db8 <HAL_GetTick>
 8002ad4:	0002      	movs	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e061      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae2:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	2380      	movs	r3, #128	; 0x80
 8002ae8:	049b      	lsls	r3, r3, #18
 8002aea:	4013      	ands	r3, r2
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aee:	4a1e      	ldr	r2, [pc, #120]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af4:	210f      	movs	r1, #15
 8002af6:	438b      	bics	r3, r1
 8002af8:	0019      	movs	r1, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	430b      	orrs	r3, r1
 8002b00:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002b02:	4a19      	ldr	r2, [pc, #100]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002b04:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	491c      	ldr	r1, [pc, #112]	; (8002b7c <HAL_RCC_OscConfig+0x684>)
 8002b0a:	4019      	ands	r1, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	4303      	orrs	r3, r0
 8002b16:	430b      	orrs	r3, r1
 8002b18:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002b1c:	4a12      	ldr	r2, [pc, #72]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	2180      	movs	r1, #128	; 0x80
 8002b22:	0449      	lsls	r1, r1, #17
 8002b24:	430a      	orrs	r2, r1
 8002b26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fe f946 	bl	8000db8 <HAL_GetTick>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b32:	f7fe f941 	bl	8000db8 <HAL_GetTick>
 8002b36:	0002      	movs	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e030      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b44:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	2380      	movs	r3, #128	; 0x80
 8002b4a:	049b      	lsls	r3, r3, #18
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x63a>
 8002b50:	e028      	b.n	8002ba4 <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002b54:	4a04      	ldr	r2, [pc, #16]	; (8002b68 <HAL_RCC_OscConfig+0x670>)
 8002b56:	6812      	ldr	r2, [r2, #0]
 8002b58:	4907      	ldr	r1, [pc, #28]	; (8002b78 <HAL_RCC_OscConfig+0x680>)
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe f92b 	bl	8000db8 <HAL_GetTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b66:	e014      	b.n	8002b92 <HAL_RCC_OscConfig+0x69a>
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	00001388 	.word	0x00001388
 8002b70:	efffffff 	.word	0xefffffff
 8002b74:	fffeffff 	.word	0xfffeffff
 8002b78:	feffffff 	.word	0xfeffffff
 8002b7c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe f91a 	bl	8000db8 <HAL_GetTick>
 8002b84:	0002      	movs	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e009      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b92:	4b07      	ldr	r3, [pc, #28]	; (8002bb0 <HAL_RCC_OscConfig+0x6b8>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	049b      	lsls	r3, r3, #18
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x688>
 8002b9e:	e001      	b.n	8002ba4 <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b006      	add	sp, #24
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002bc2:	4b7a      	ldr	r3, [pc, #488]	; (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	401a      	ands	r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d211      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd0:	4b76      	ldr	r3, [pc, #472]	; (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002bd2:	4a76      	ldr	r2, [pc, #472]	; (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002bd4:	6812      	ldr	r2, [r2, #0]
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	438a      	bics	r2, r1
 8002bda:	0011      	movs	r1, r2
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002be2:	4b72      	ldr	r3, [pc, #456]	; (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2201      	movs	r2, #1
 8002be8:	401a      	ands	r2, r3
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d001      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	e0d7      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	d009      	beq.n	8002c12 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bfe:	4a6c      	ldr	r2, [pc, #432]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c00:	4b6b      	ldr	r3, [pc, #428]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	21f0      	movs	r1, #240	; 0xf0
 8002c06:	438b      	bics	r3, r1
 8002c08:	0019      	movs	r1, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	430b      	orrs	r3, r1
 8002c10:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d100      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x6a>
 8002c1c:	e089      	b.n	8002d32 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d107      	bne.n	8002c36 <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c26:	4b62      	ldr	r3, [pc, #392]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	2380      	movs	r3, #128	; 0x80
 8002c2c:	029b      	lsls	r3, r3, #10
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d120      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e0b6      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3e:	4b5c      	ldr	r3, [pc, #368]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	2380      	movs	r3, #128	; 0x80
 8002c44:	049b      	lsls	r3, r3, #18
 8002c46:	4013      	ands	r3, r2
 8002c48:	d114      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0aa      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002c56:	4b56      	ldr	r3, [pc, #344]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5a:	2380      	movs	r3, #128	; 0x80
 8002c5c:	025b      	lsls	r3, r3, #9
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d108      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e09e      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c66:	4b52      	ldr	r3, [pc, #328]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e097      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c74:	4a4e      	ldr	r2, [pc, #312]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c76:	4b4e      	ldr	r3, [pc, #312]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2103      	movs	r1, #3
 8002c7c:	438b      	bics	r3, r1
 8002c7e:	0019      	movs	r1, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c88:	f7fe f896 	bl	8000db8 <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d111      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c98:	e009      	b.n	8002cae <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c9a:	f7fe f88d 	bl	8000db8 <HAL_GetTick>
 8002c9e:	0002      	movs	r2, r0
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	4a43      	ldr	r2, [pc, #268]	; (8002db4 <HAL_RCC_ClockConfig+0x200>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e07a      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cae:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	220c      	movs	r2, #12
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d1ef      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xe6>
 8002cba:	e03a      	b.n	8002d32 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d111      	bne.n	8002ce8 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc4:	e009      	b.n	8002cda <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc6:	f7fe f877 	bl	8000db8 <HAL_GetTick>
 8002cca:	0002      	movs	r2, r0
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <HAL_RCC_ClockConfig+0x200>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e064      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cda:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	220c      	movs	r2, #12
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d1ef      	bne.n	8002cc6 <HAL_RCC_ClockConfig+0x112>
 8002ce6:	e024      	b.n	8002d32 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d11b      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8002cf0:	e009      	b.n	8002d06 <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf2:	f7fe f861 	bl	8000db8 <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	4a2d      	ldr	r2, [pc, #180]	; (8002db4 <HAL_RCC_ClockConfig+0x200>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e04e      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8002d06:	4b2a      	ldr	r3, [pc, #168]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	220c      	movs	r2, #12
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	d1ef      	bne.n	8002cf2 <HAL_RCC_ClockConfig+0x13e>
 8002d12:	e00e      	b.n	8002d32 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d14:	f7fe f850 	bl	8000db8 <HAL_GetTick>
 8002d18:	0002      	movs	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	4a25      	ldr	r2, [pc, #148]	; (8002db4 <HAL_RCC_ClockConfig+0x200>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d901      	bls.n	8002d28 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e03d      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d28:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	220c      	movs	r2, #12
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002d32:	4b1e      	ldr	r3, [pc, #120]	; (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	401a      	ands	r2, r3
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d911      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d40:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002d42:	4a1a      	ldr	r2, [pc, #104]	; (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	2101      	movs	r1, #1
 8002d48:	438a      	bics	r2, r1
 8002d4a:	0011      	movs	r1, r2
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <HAL_RCC_ClockConfig+0x1f8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	401a      	ands	r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d001      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e01f      	b.n	8002da4 <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2204      	movs	r2, #4
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d008      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d6e:	4a10      	ldr	r2, [pc, #64]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4910      	ldr	r1, [pc, #64]	; (8002db8 <HAL_RCC_ClockConfig+0x204>)
 8002d76:	4019      	ands	r1, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d80:	f000 f820 	bl	8002dc4 <HAL_RCC_GetSysClockFreq>
 8002d84:	0001      	movs	r1, r0
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_RCC_ClockConfig+0x1fc>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	220f      	movs	r2, #15
 8002d8e:	4013      	ands	r3, r2
 8002d90:	4a0a      	ldr	r2, [pc, #40]	; (8002dbc <HAL_RCC_ClockConfig+0x208>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	000a      	movs	r2, r1
 8002d96:	40da      	lsrs	r2, r3
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_RCC_ClockConfig+0x20c>)
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d9c:	2000      	movs	r0, #0
 8002d9e:	f7fd ffe3 	bl	8000d68 <HAL_InitTick>
  
  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b004      	add	sp, #16
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40022000 	.word	0x40022000
 8002db0:	40021000 	.word	0x40021000
 8002db4:	00001388 	.word	0x00001388
 8002db8:	fffff8ff 	.word	0xfffff8ff
 8002dbc:	08004260 	.word	0x08004260
 8002dc0:	20000000 	.word	0x20000000

08002dc4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dc4:	b590      	push	{r4, r7, lr}
 8002dc6:	b08f      	sub	sp, #60	; 0x3c
 8002dc8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002dca:	2314      	movs	r3, #20
 8002dcc:	18fb      	adds	r3, r7, r3
 8002dce:	4a37      	ldr	r2, [pc, #220]	; (8002eac <HAL_RCC_GetSysClockFreq+0xe8>)
 8002dd0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dd2:	c313      	stmia	r3!, {r0, r1, r4}
 8002dd4:	6812      	ldr	r2, [r2, #0]
 8002dd6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	4a35      	ldr	r2, [pc, #212]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0xec>)
 8002ddc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dde:	c313      	stmia	r3!, {r0, r1, r4}
 8002de0:	6812      	ldr	r2, [r2, #0]
 8002de2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de8:	2300      	movs	r3, #0
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dec:	2300      	movs	r3, #0
 8002dee:	637b      	str	r3, [r7, #52]	; 0x34
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002df8:	4b2e      	ldr	r3, [pc, #184]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	220c      	movs	r2, #12
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d006      	beq.n	8002e16 <HAL_RCC_GetSysClockFreq+0x52>
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d043      	beq.n	8002e94 <HAL_RCC_GetSysClockFreq+0xd0>
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	d144      	bne.n	8002e9a <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e10:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e12:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e14:	e044      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	0c9b      	lsrs	r3, r3, #18
 8002e1a:	220f      	movs	r2, #15
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	2214      	movs	r2, #20
 8002e20:	18ba      	adds	r2, r7, r2
 8002e22:	5cd3      	ldrb	r3, [r2, r3]
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002e26:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e2a:	220f      	movs	r2, #15
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	1d3a      	adds	r2, r7, #4
 8002e30:	5cd3      	ldrb	r3, [r2, r3]
 8002e32:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e36:	23c0      	movs	r3, #192	; 0xc0
 8002e38:	025b      	lsls	r3, r3, #9
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	2380      	movs	r3, #128	; 0x80
 8002e3e:	025b      	lsls	r3, r3, #9
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d109      	bne.n	8002e58 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002e44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e46:	481c      	ldr	r0, [pc, #112]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e48:	f7fd f95e 	bl	8000108 <__udivsi3>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	001a      	movs	r2, r3
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	4353      	muls	r3, r2
 8002e54:	637b      	str	r3, [r7, #52]	; 0x34
 8002e56:	e01a      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e5a:	23c0      	movs	r3, #192	; 0xc0
 8002e5c:	025b      	lsls	r3, r3, #9
 8002e5e:	401a      	ands	r2, r3
 8002e60:	23c0      	movs	r3, #192	; 0xc0
 8002e62:	025b      	lsls	r3, r3, #9
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d109      	bne.n	8002e7c <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8002e68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e6a:	4814      	ldr	r0, [pc, #80]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e6c:	f7fd f94c 	bl	8000108 <__udivsi3>
 8002e70:	0003      	movs	r3, r0
 8002e72:	001a      	movs	r2, r3
 8002e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e76:	4353      	muls	r3, r2
 8002e78:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7a:	e008      	b.n	8002e8e <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8002e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e7e:	480e      	ldr	r0, [pc, #56]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e80:	f7fd f942 	bl	8000108 <__udivsi3>
 8002e84:	0003      	movs	r3, r0
 8002e86:	001a      	movs	r2, r3
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	4353      	muls	r3, r2
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8002e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e92:	e005      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e96:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e98:	e002      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e9a:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e9c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e9e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ea2:	0018      	movs	r0, r3
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	b00f      	add	sp, #60	; 0x3c
 8002ea8:	bd90      	pop	{r4, r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	08004170 	.word	0x08004170
 8002eb0:	08004180 	.word	0x08004180
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	007a1200 	.word	0x007a1200
 8002ebc:	02dc6c00 	.word	0x02dc6c00

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	20000000 	.word	0x20000000

08002ed4 <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e01e      	b.n	8002f24 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	223d      	movs	r2, #61	; 0x3d
 8002eea:	5c9b      	ldrb	r3, [r3, r2]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d107      	bne.n	8002f02 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	223c      	movs	r2, #60	; 0x3c
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	0018      	movs	r0, r3
 8002efe:	f001 f849 	bl	8003f94 <HAL_TIM_Base_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	223d      	movs	r2, #61	; 0x3d
 8002f06:	2102      	movs	r1, #2
 8002f08:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	3304      	adds	r3, #4
 8002f12:	0019      	movs	r1, r3
 8002f14:	0010      	movs	r0, r2
 8002f16:	f000 fa7b 	bl	8003410 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	223d      	movs	r2, #61	; 0x3d
 8002f1e:	2101      	movs	r1, #1
 8002f20:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	0018      	movs	r0, r3
 8002f26:	46bd      	mov	sp, r7
 8002f28:	b002      	add	sp, #8
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	68d2      	ldr	r2, [r2, #12]
 8002f3e:	2101      	movs	r1, #1
 8002f40:	430a      	orrs	r2, r1
 8002f42:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6812      	ldr	r2, [r2, #0]
 8002f4c:	6812      	ldr	r2, [r2, #0]
 8002f4e:	2101      	movs	r1, #1
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	0018      	movs	r0, r3
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	b002      	add	sp, #8
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b082      	sub	sp, #8
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d124      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x60>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d11d      	bne.n	8002fbe <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2203      	movs	r2, #3
 8002f88:	4252      	negs	r2, r2
 8002f8a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2203      	movs	r2, #3
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 fa1d 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 8002fa6:	e007      	b.n	8002fb8 <HAL_TIM_IRQHandler+0x5a>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 fa10 	bl	80033d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 fa1c 	bl	80033f0 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d125      	bne.n	8003018 <HAL_TIM_IRQHandler+0xba>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	2204      	movs	r2, #4
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d11e      	bne.n	8003018 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2205      	movs	r2, #5
 8002fe0:	4252      	negs	r2, r2
 8002fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699a      	ldr	r2, [r3, #24]
 8002ff0:	23c0      	movs	r3, #192	; 0xc0
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d004      	beq.n	8003002 <HAL_TIM_IRQHandler+0xa4>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	f000 f9f0 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 8003000:	e007      	b.n	8003012 <HAL_TIM_IRQHandler+0xb4>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	0018      	movs	r0, r3
 8003006:	f000 f9e3 	bl	80033d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f000 f9ef 	bl	80033f0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	2208      	movs	r2, #8
 8003020:	4013      	ands	r3, r2
 8003022:	2b08      	cmp	r3, #8
 8003024:	d124      	bne.n	8003070 <HAL_TIM_IRQHandler+0x112>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2208      	movs	r2, #8
 800302e:	4013      	ands	r3, r2
 8003030:	2b08      	cmp	r3, #8
 8003032:	d11d      	bne.n	8003070 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2209      	movs	r2, #9
 800303a:	4252      	negs	r2, r2
 800303c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2204      	movs	r2, #4
 8003042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	2203      	movs	r2, #3
 800304c:	4013      	ands	r3, r2
 800304e:	d004      	beq.n	800305a <HAL_TIM_IRQHandler+0xfc>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	0018      	movs	r0, r3
 8003054:	f000 f9c4 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 8003058:	e007      	b.n	800306a <HAL_TIM_IRQHandler+0x10c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f000 f9b7 	bl	80033d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	0018      	movs	r0, r3
 8003066:	f000 f9c3 	bl	80033f0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	2210      	movs	r2, #16
 8003078:	4013      	ands	r3, r2
 800307a:	2b10      	cmp	r3, #16
 800307c:	d125      	bne.n	80030ca <HAL_TIM_IRQHandler+0x16c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2210      	movs	r2, #16
 8003086:	4013      	ands	r3, r2
 8003088:	2b10      	cmp	r3, #16
 800308a:	d11e      	bne.n	80030ca <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2211      	movs	r2, #17
 8003092:	4252      	negs	r2, r2
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2208      	movs	r2, #8
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	23c0      	movs	r3, #192	; 0xc0
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	4013      	ands	r3, r2
 80030a8:	d004      	beq.n	80030b4 <HAL_TIM_IRQHandler+0x156>
      {
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 f997 	bl	80033e0 <HAL_TIM_IC_CaptureCallback>
 80030b2:	e007      	b.n	80030c4 <HAL_TIM_IRQHandler+0x166>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 f98a 	bl	80033d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 f996 	bl	80033f0 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	2201      	movs	r2, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d10f      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x19a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	2201      	movs	r2, #1
 80030e0:	4013      	ands	r3, r2
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d108      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2202      	movs	r2, #2
 80030ec:	4252      	negs	r2, r2
 80030ee:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	0018      	movs	r0, r3
 80030f4:	f000 f964 	bl	80033c0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	2280      	movs	r2, #128	; 0x80
 8003100:	4013      	ands	r3, r2
 8003102:	2b80      	cmp	r3, #128	; 0x80
 8003104:	d10f      	bne.n	8003126 <HAL_TIM_IRQHandler+0x1c8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	4013      	ands	r3, r2
 8003110:	2b80      	cmp	r3, #128	; 0x80
 8003112:	d108      	bne.n	8003126 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2281      	movs	r2, #129	; 0x81
 800311a:	4252      	negs	r2, r2
 800311c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 fb76 	bl	8003812 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2240      	movs	r2, #64	; 0x40
 800312e:	4013      	ands	r3, r2
 8003130:	2b40      	cmp	r3, #64	; 0x40
 8003132:	d10f      	bne.n	8003154 <HAL_TIM_IRQHandler+0x1f6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2240      	movs	r2, #64	; 0x40
 800313c:	4013      	ands	r3, r2
 800313e:	2b40      	cmp	r3, #64	; 0x40
 8003140:	d108      	bne.n	8003154 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2241      	movs	r2, #65	; 0x41
 8003148:	4252      	negs	r2, r2
 800314a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f956 	bl	8003400 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	2220      	movs	r2, #32
 800315c:	4013      	ands	r3, r2
 800315e:	2b20      	cmp	r3, #32
 8003160:	d10f      	bne.n	8003182 <HAL_TIM_IRQHandler+0x224>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	4013      	ands	r3, r2
 800316c:	2b20      	cmp	r3, #32
 800316e:	d108      	bne.n	8003182 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2221      	movs	r2, #33	; 0x21
 8003176:	4252      	negs	r2, r2
 8003178:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	0018      	movs	r0, r3
 800317e:	f000 fb40 	bl	8003802 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8003182:	46c0      	nop			; (mov r8, r8)
 8003184:	46bd      	mov	sp, r7
 8003186:	b002      	add	sp, #8
 8003188:	bd80      	pop	{r7, pc}
	...

0800318c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(htim);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	223c      	movs	r2, #60	; 0x3c
 800319e:	5c9b      	ldrb	r3, [r3, r2]
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d101      	bne.n	80031a8 <HAL_TIM_ConfigClockSource+0x1c>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e0ca      	b.n	800333e <HAL_TIM_ConfigClockSource+0x1b2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	223c      	movs	r2, #60	; 0x3c
 80031ac:	2101      	movs	r1, #1
 80031ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	223d      	movs	r2, #61	; 0x3d
 80031b4:	2102      	movs	r1, #2
 80031b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2277      	movs	r2, #119	; 0x77
 80031c4:	4393      	bics	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4a5f      	ldr	r2, [pc, #380]	; (8003348 <HAL_TIM_ConfigClockSource+0x1bc>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d100      	bne.n	80031e2 <HAL_TIM_ConfigClockSource+0x56>
 80031e0:	e078      	b.n	80032d4 <HAL_TIM_ConfigClockSource+0x148>
 80031e2:	d80e      	bhi.n	8003202 <HAL_TIM_ConfigClockSource+0x76>
 80031e4:	2b10      	cmp	r3, #16
 80031e6:	d100      	bne.n	80031ea <HAL_TIM_ConfigClockSource+0x5e>
 80031e8:	e08b      	b.n	8003302 <HAL_TIM_ConfigClockSource+0x176>
 80031ea:	d803      	bhi.n	80031f4 <HAL_TIM_ConfigClockSource+0x68>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d100      	bne.n	80031f2 <HAL_TIM_ConfigClockSource+0x66>
 80031f0:	e080      	b.n	80032f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;

  default:
    break;
 80031f2:	e09b      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 80031f4:	2b20      	cmp	r3, #32
 80031f6:	d100      	bne.n	80031fa <HAL_TIM_ConfigClockSource+0x6e>
 80031f8:	e08a      	b.n	8003310 <HAL_TIM_ConfigClockSource+0x184>
 80031fa:	2b30      	cmp	r3, #48	; 0x30
 80031fc:	d100      	bne.n	8003200 <HAL_TIM_ConfigClockSource+0x74>
 80031fe:	e08e      	b.n	800331e <HAL_TIM_ConfigClockSource+0x192>
    break;
 8003200:	e094      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8003202:	2b70      	cmp	r3, #112	; 0x70
 8003204:	d017      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0xaa>
 8003206:	d804      	bhi.n	8003212 <HAL_TIM_ConfigClockSource+0x86>
 8003208:	2b50      	cmp	r3, #80	; 0x50
 800320a:	d043      	beq.n	8003294 <HAL_TIM_ConfigClockSource+0x108>
 800320c:	2b60      	cmp	r3, #96	; 0x60
 800320e:	d051      	beq.n	80032b4 <HAL_TIM_ConfigClockSource+0x128>
    break;
 8003210:	e08c      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
  switch (sClockSourceConfig->ClockSource)
 8003212:	2280      	movs	r2, #128	; 0x80
 8003214:	0152      	lsls	r2, r2, #5
 8003216:	4293      	cmp	r3, r2
 8003218:	d004      	beq.n	8003224 <HAL_TIM_ConfigClockSource+0x98>
 800321a:	2280      	movs	r2, #128	; 0x80
 800321c:	0192      	lsls	r2, r2, #6
 800321e:	4293      	cmp	r3, r2
 8003220:	d024      	beq.n	800326c <HAL_TIM_ConfigClockSource+0xe0>
    break;
 8003222:	e083      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6812      	ldr	r2, [r2, #0]
 800322c:	6892      	ldr	r2, [r2, #8]
 800322e:	2107      	movs	r1, #7
 8003230:	438a      	bics	r2, r1
 8003232:	609a      	str	r2, [r3, #8]
    break;
 8003234:	e07a      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6899      	ldr	r1, [r3, #8]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	f000 fa77 	bl	8003738 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2277      	movs	r2, #119	; 0x77
 8003256:	4393      	bics	r3, r2
 8003258:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2277      	movs	r2, #119	; 0x77
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	609a      	str	r2, [r3, #8]
    break;
 800326a:	e05f      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ETR_SetConfig(htim->Instance,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6818      	ldr	r0, [r3, #0]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	6899      	ldr	r1, [r3, #8]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	f000 fa5c 	bl	8003738 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6812      	ldr	r2, [r2, #0]
 8003288:	6892      	ldr	r2, [r2, #8]
 800328a:	2180      	movs	r1, #128	; 0x80
 800328c:	01c9      	lsls	r1, r1, #7
 800328e:	430a      	orrs	r2, r1
 8003290:	609a      	str	r2, [r3, #8]
    break;
 8003292:	e04b      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	6859      	ldr	r1, [r3, #4]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	001a      	movs	r2, r3
 80032a2:	f000 f9c0 	bl	8003626 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2150      	movs	r1, #80	; 0x50
 80032ac:	0018      	movs	r0, r3
 80032ae:	f000 fa23 	bl	80036f8 <TIM_ITRx_SetConfig>
    break;
 80032b2:	e03b      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6859      	ldr	r1, [r3, #4]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	001a      	movs	r2, r3
 80032c2:	f000 f9e3 	bl	800368c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2160      	movs	r1, #96	; 0x60
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 fa13 	bl	80036f8 <TIM_ITRx_SetConfig>
    break;
 80032d2:	e02b      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	001a      	movs	r2, r3
 80032e2:	f000 f9a0 	bl	8003626 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2140      	movs	r1, #64	; 0x40
 80032ec:	0018      	movs	r0, r3
 80032ee:	f000 fa03 	bl	80036f8 <TIM_ITRx_SetConfig>
    break;
 80032f2:	e01b      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2100      	movs	r1, #0
 80032fa:	0018      	movs	r0, r3
 80032fc:	f000 f9fc 	bl	80036f8 <TIM_ITRx_SetConfig>
    break;
 8003300:	e014      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2110      	movs	r1, #16
 8003308:	0018      	movs	r0, r3
 800330a:	f000 f9f5 	bl	80036f8 <TIM_ITRx_SetConfig>
    break;
 800330e:	e00d      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2120      	movs	r1, #32
 8003316:	0018      	movs	r0, r3
 8003318:	f000 f9ee 	bl	80036f8 <TIM_ITRx_SetConfig>
    break;
 800331c:	e006      	b.n	800332c <HAL_TIM_ConfigClockSource+0x1a0>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2130      	movs	r1, #48	; 0x30
 8003324:	0018      	movs	r0, r3
 8003326:	f000 f9e7 	bl	80036f8 <TIM_ITRx_SetConfig>
    break;
 800332a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	223d      	movs	r2, #61	; 0x3d
 8003330:	2101      	movs	r1, #1
 8003332:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	223c      	movs	r2, #60	; 0x3c
 8003338:	2100      	movs	r1, #0
 800333a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	0018      	movs	r0, r3
 8003340:	46bd      	mov	sp, r7
 8003342:	b004      	add	sp, #16
 8003344:	bd80      	pop	{r7, pc}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	ffff00ff 	.word	0xffff00ff

0800334c <HAL_TIM_SlaveConfigSynchronization>:
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223c      	movs	r2, #60	; 0x3c
 800335a:	5c9b      	ldrb	r3, [r3, r2]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIM_SlaveConfigSynchronization+0x18>
 8003360:	2302      	movs	r3, #2
 8003362:	e026      	b.n	80033b2 <HAL_TIM_SlaveConfigSynchronization+0x66>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223c      	movs	r2, #60	; 0x3c
 8003368:	2101      	movs	r1, #1
 800336a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	223d      	movs	r2, #61	; 0x3d
 8003370:	2102      	movs	r1, #2
 8003372:	5499      	strb	r1, [r3, r2]

  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	0011      	movs	r1, r2
 800337a:	0018      	movs	r0, r3
 800337c:	f000 f8ca 	bl	8003514 <TIM_SlaveTimer_SetConfig>

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	68d2      	ldr	r2, [r2, #12]
 800338a:	2140      	movs	r1, #64	; 0x40
 800338c:	438a      	bics	r2, r1
 800338e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	68d2      	ldr	r2, [r2, #12]
 800339a:	4908      	ldr	r1, [pc, #32]	; (80033bc <HAL_TIM_SlaveConfigSynchronization+0x70>)
 800339c:	400a      	ands	r2, r1
 800339e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	223d      	movs	r2, #61	; 0x3d
 80033a4:	2101      	movs	r1, #1
 80033a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	223c      	movs	r2, #60	; 0x3c
 80033ac:	2100      	movs	r1, #0
 80033ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
    }
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b002      	add	sp, #8
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	46c0      	nop			; (mov r8, r8)
 80033bc:	ffffbfff 	.word	0xffffbfff

080033c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */

}
 80033c8:	46c0      	nop			; (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b002      	add	sp, #8
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033e8:	46c0      	nop			; (mov r8, r8)
 80033ea:	46bd      	mov	sp, r7
 80033ec:	b002      	add	sp, #8
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033f8:	46c0      	nop			; (mov r8, r8)
 80033fa:	46bd      	mov	sp, r7
 80033fc:	b002      	add	sp, #8
 80033fe:	bd80      	pop	{r7, pc}

08003400 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003408:	46c0      	nop			; (mov r8, r8)
 800340a:	46bd      	mov	sp, r7
 800340c:	b002      	add	sp, #8
 800340e:	bd80      	pop	{r7, pc}

08003410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 800341a:	2300      	movs	r3, #0
 800341c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a34      	ldr	r2, [pc, #208]	; (80034f8 <TIM_Base_SetConfig+0xe8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d008      	beq.n	800343e <TIM_Base_SetConfig+0x2e>
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	2380      	movs	r3, #128	; 0x80
 8003430:	05db      	lsls	r3, r3, #23
 8003432:	429a      	cmp	r2, r3
 8003434:	d003      	beq.n	800343e <TIM_Base_SetConfig+0x2e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a30      	ldr	r2, [pc, #192]	; (80034fc <TIM_Base_SetConfig+0xec>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d108      	bne.n	8003450 <TIM_Base_SetConfig+0x40>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2270      	movs	r2, #112	; 0x70
 8003442:	4393      	bics	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	4313      	orrs	r3, r2
 800344e:	60fb      	str	r3, [r7, #12]
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a29      	ldr	r2, [pc, #164]	; (80034f8 <TIM_Base_SetConfig+0xe8>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d018      	beq.n	800348a <TIM_Base_SetConfig+0x7a>
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	05db      	lsls	r3, r3, #23
 800345e:	429a      	cmp	r2, r3
 8003460:	d013      	beq.n	800348a <TIM_Base_SetConfig+0x7a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a25      	ldr	r2, [pc, #148]	; (80034fc <TIM_Base_SetConfig+0xec>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00f      	beq.n	800348a <TIM_Base_SetConfig+0x7a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a24      	ldr	r2, [pc, #144]	; (8003500 <TIM_Base_SetConfig+0xf0>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d00b      	beq.n	800348a <TIM_Base_SetConfig+0x7a>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a23      	ldr	r2, [pc, #140]	; (8003504 <TIM_Base_SetConfig+0xf4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d007      	beq.n	800348a <TIM_Base_SetConfig+0x7a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a22      	ldr	r2, [pc, #136]	; (8003508 <TIM_Base_SetConfig+0xf8>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d003      	beq.n	800348a <TIM_Base_SetConfig+0x7a>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a21      	ldr	r2, [pc, #132]	; (800350c <TIM_Base_SetConfig+0xfc>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d108      	bne.n	800349c <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4a20      	ldr	r2, [pc, #128]	; (8003510 <TIM_Base_SetConfig+0x100>)
 800348e:	4013      	ands	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	4313      	orrs	r3, r2
 800349a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2280      	movs	r2, #128	; 0x80
 80034a0:	4393      	bics	r3, r2
 80034a2:	001a      	movs	r2, r3
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <TIM_Base_SetConfig+0xe8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d00b      	beq.n	80034e2 <TIM_Base_SetConfig+0xd2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a0d      	ldr	r2, [pc, #52]	; (8003504 <TIM_Base_SetConfig+0xf4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d007      	beq.n	80034e2 <TIM_Base_SetConfig+0xd2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a0c      	ldr	r2, [pc, #48]	; (8003508 <TIM_Base_SetConfig+0xf8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d003      	beq.n	80034e2 <TIM_Base_SetConfig+0xd2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a0b      	ldr	r2, [pc, #44]	; (800350c <TIM_Base_SetConfig+0xfc>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d103      	bne.n	80034ea <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	615a      	str	r2, [r3, #20]
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b004      	add	sp, #16
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40012c00 	.word	0x40012c00
 80034fc:	40000400 	.word	0x40000400
 8003500:	40002000 	.word	0x40002000
 8003504:	40014000 	.word	0x40014000
 8003508:	40014400 	.word	0x40014400
 800350c:	40014800 	.word	0x40014800
 8003510:	fffffcff 	.word	0xfffffcff

08003514 <TIM_SlaveTimer_SetConfig>:
  TIMx->CCER = tmpccer;
}

static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
  uint32_t tmpccmr1 = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2270      	movs	r2, #112	; 0x70
 8003536:	4393      	bics	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	2207      	movs	r2, #7
 8003548:	4393      	bics	r3, r2
 800354a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2b30      	cmp	r3, #48	; 0x30
 8003564:	d054      	beq.n	8003610 <TIM_SlaveTimer_SetConfig+0xfc>
 8003566:	d806      	bhi.n	8003576 <TIM_SlaveTimer_SetConfig+0x62>
 8003568:	2b10      	cmp	r3, #16
 800356a:	d053      	beq.n	8003614 <TIM_SlaveTimer_SetConfig+0x100>
 800356c:	2b20      	cmp	r3, #32
 800356e:	d053      	beq.n	8003618 <TIM_SlaveTimer_SetConfig+0x104>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d053      	beq.n	800361c <TIM_SlaveTimer_SetConfig+0x108>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
    }
    break;

  default:
    break;
 8003574:	e053      	b.n	800361e <TIM_SlaveTimer_SetConfig+0x10a>
  switch (sSlaveConfig->InputTrigger)
 8003576:	2b50      	cmp	r3, #80	; 0x50
 8003578:	d036      	beq.n	80035e8 <TIM_SlaveTimer_SetConfig+0xd4>
 800357a:	d802      	bhi.n	8003582 <TIM_SlaveTimer_SetConfig+0x6e>
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d010      	beq.n	80035a2 <TIM_SlaveTimer_SetConfig+0x8e>
    break;
 8003580:	e04d      	b.n	800361e <TIM_SlaveTimer_SetConfig+0x10a>
  switch (sSlaveConfig->InputTrigger)
 8003582:	2b60      	cmp	r3, #96	; 0x60
 8003584:	d03a      	beq.n	80035fc <TIM_SlaveTimer_SetConfig+0xe8>
 8003586:	2b70      	cmp	r3, #112	; 0x70
 8003588:	d000      	beq.n	800358c <TIM_SlaveTimer_SetConfig+0x78>
    break;
 800358a:	e048      	b.n	800361e <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_ETR_SetConfig(htim->Instance,
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6818      	ldr	r0, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68d9      	ldr	r1, [r3, #12]
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	f000 f8cc 	bl	8003738 <TIM_ETR_SetConfig>
    break;
 80035a0:	e03d      	b.n	800361e <TIM_SlaveTimer_SetConfig+0x10a>
      tmpccer = htim->Instance->CCER;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	6812      	ldr	r2, [r2, #0]
 80035b2:	6a12      	ldr	r2, [r2, #32]
 80035b4:	2101      	movs	r1, #1
 80035b6:	438a      	bics	r2, r1
 80035b8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	613b      	str	r3, [r7, #16]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	22f0      	movs	r2, #240	; 0xf0
 80035c6:	4393      	bics	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCMR1 = tmpccmr1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
    break;
 80035e6:	e01a      	b.n	800361e <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6818      	ldr	r0, [r3, #0]
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	6899      	ldr	r1, [r3, #8]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	001a      	movs	r2, r3
 80035f6:	f000 f816 	bl	8003626 <TIM_TI1_ConfigInputStage>
    break;
 80035fa:	e010      	b.n	800361e <TIM_SlaveTimer_SetConfig+0x10a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6818      	ldr	r0, [r3, #0]
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	001a      	movs	r2, r3
 800360a:	f000 f83f 	bl	800368c <TIM_TI2_ConfigInputStage>
    break;
 800360e:	e006      	b.n	800361e <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	e004      	b.n	800361e <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 8003614:	46c0      	nop			; (mov r8, r8)
 8003616:	e002      	b.n	800361e <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 8003618:	46c0      	nop			; (mov r8, r8)
 800361a:	e000      	b.n	800361e <TIM_SlaveTimer_SetConfig+0x10a>
    break;
 800361c:	46c0      	nop			; (mov r8, r8)
  }
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b006      	add	sp, #24
 8003624:	bd80      	pop	{r7, pc}

08003626 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003626:	b580      	push	{r7, lr}
 8003628:	b086      	sub	sp, #24
 800362a:	af00      	add	r7, sp, #0
 800362c:	60f8      	str	r0, [r7, #12]
 800362e:	60b9      	str	r1, [r7, #8]
 8003630:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	2201      	movs	r2, #1
 8003646:	4393      	bics	r3, r2
 8003648:	001a      	movs	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	22f0      	movs	r2, #240	; 0xf0
 8003658:	4393      	bics	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	220a      	movs	r2, #10
 800366a:	4393      	bics	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4313      	orrs	r3, r2
 8003674:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	621a      	str	r2, [r3, #32]
}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	b006      	add	sp, #24
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	2210      	movs	r2, #16
 80036a6:	4393      	bics	r3, r2
 80036a8:	001a      	movs	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	4a0d      	ldr	r2, [pc, #52]	; (80036f4 <TIM_TI2_ConfigInputStage+0x68>)
 80036be:	4013      	ands	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	031b      	lsls	r3, r3, #12
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	22a0      	movs	r2, #160	; 0xa0
 80036d0:	4393      	bics	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	011b      	lsls	r3, r3, #4
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	621a      	str	r2, [r3, #32]
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	b006      	add	sp, #24
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	ffff0fff 	.word	0xffff0fff

080036f8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2 : Filtered Timer Input 2
  *            @arg TIM_TS_ETRF : External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	000a      	movs	r2, r1
 8003702:	1cbb      	adds	r3, r7, #2
 8003704:	801a      	strh	r2, [r3, #0]
  uint32_t tmpsmcr = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	60fb      	str	r3, [r7, #12]

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2270      	movs	r2, #112	; 0x70
 8003714:	4393      	bics	r3, r2
 8003716:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8003718:	1cbb      	adds	r3, r7, #2
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	2207      	movs	r2, #7
 800371e:	4313      	orrs	r3, r2
 8003720:	b29b      	uxth	r3, r3
 8003722:	001a      	movs	r2, r3
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	609a      	str	r2, [r3, #8]
}
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b004      	add	sp, #16
 8003736:	bd80      	pop	{r7, pc}

08003738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4a09      	ldr	r2, [pc, #36]	; (8003778 <TIM_ETR_SetConfig+0x40>)
 8003754:	4013      	ands	r3, r2
 8003756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	021a      	lsls	r2, r3, #8
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	431a      	orrs	r2, r3
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	4313      	orrs	r3, r2
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	609a      	str	r2, [r3, #8]
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b006      	add	sp, #24
 8003776:	bd80      	pop	{r7, pc}
 8003778:	ffff00ff 	.word	0xffff00ff

0800377c <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	223c      	movs	r2, #60	; 0x3c
 800378a:	5c9b      	ldrb	r3, [r3, r2]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003790:	2302      	movs	r3, #2
 8003792:	e032      	b.n	80037fa <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	223c      	movs	r2, #60	; 0x3c
 8003798:	2101      	movs	r1, #1
 800379a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	223d      	movs	r2, #61	; 0x3d
 80037a0:	2102      	movs	r1, #2
 80037a2:	5499      	strb	r1, [r3, r2]

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	6852      	ldr	r2, [r2, #4]
 80037ae:	2170      	movs	r1, #112	; 0x70
 80037b0:	438a      	bics	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	6851      	ldr	r1, [r2, #4]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	430a      	orrs	r2, r1
 80037c4:	605a      	str	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6812      	ldr	r2, [r2, #0]
 80037ce:	6892      	ldr	r2, [r2, #8]
 80037d0:	2180      	movs	r1, #128	; 0x80
 80037d2:	438a      	bics	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	6812      	ldr	r2, [r2, #0]
 80037de:	6891      	ldr	r1, [r2, #8]
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	6852      	ldr	r2, [r2, #4]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	223d      	movs	r2, #61	; 0x3d
 80037ec:	2101      	movs	r1, #1
 80037ee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	223c      	movs	r2, #60	; 0x3c
 80037f4:	2100      	movs	r1, #0
 80037f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	0018      	movs	r0, r3
 80037fc:	46bd      	mov	sp, r7
 80037fe:	b002      	add	sp, #8
 8003800:	bd80      	pop	{r7, pc}

08003802 <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	b002      	add	sp, #8
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	46bd      	mov	sp, r7
 800381e:	b002      	add	sp, #8
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <main>:
/**
 * @brief  The application entry point.
 *
 * @retval None
 */
int main(void) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0

	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800382a:	f7fd fa89 	bl	8000d40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800382e:	f000 f841 	bl	80038b4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003832:	f000 f9ad 	bl	8003b90 <MX_GPIO_Init>
	MX_ADC_Init();
 8003836:	f000 f891 	bl	800395c <MX_ADC_Init>
	MX_TIM2_Init();
 800383a:	f000 f939 	bl	8003ab0 <MX_TIM2_Init>
	MX_CAN_Init();
 800383e:	f000 f8f9 	bl	8003a34 <MX_CAN_Init>
	/* USER CODE BEGIN 2 */
	InitBattery();
 8003842:	f000 fa29 	bl	8003c98 <InitBattery>
//		}
//		while (1) {
//			HAL_CAN_Transmit(&hcan, 10);
//		}

		if (TimerIntFlag == 1) {
 8003846:	4b18      	ldr	r3, [pc, #96]	; (80038a8 <main+0x84>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b01      	cmp	r3, #1
 800384c:	d1fb      	bne.n	8003846 <main+0x22>
			TimerIntFlag = 0;
 800384e:	4b16      	ldr	r3, [pc, #88]	; (80038a8 <main+0x84>)
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
			BatteryMonitor.GetReadings();
 8003854:	4b15      	ldr	r3, [pc, #84]	; (80038ac <main+0x88>)
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	4798      	blx	r3
			for (int i = 0; i < 4; i++) {
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
 800385e:	e019      	b.n	8003894 <main+0x70>
				hcan.pTxMsg->Data[i] = BatteryMonitor.Current.CanData[i];
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <main+0x8c>)
 8003862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003864:	4911      	ldr	r1, [pc, #68]	; (80038ac <main+0x88>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	18cb      	adds	r3, r1, r3
 800386a:	3304      	adds	r3, #4
 800386c:	7819      	ldrb	r1, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	18d3      	adds	r3, r2, r3
 8003872:	3314      	adds	r3, #20
 8003874:	1c0a      	adds	r2, r1, #0
 8003876:	701a      	strb	r2, [r3, #0]
				hcan.pTxMsg->Data[i + 4] = BatteryMonitor.Voltage.CanData[i];
 8003878:	4b0d      	ldr	r3, [pc, #52]	; (80038b0 <main+0x8c>)
 800387a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3304      	adds	r3, #4
 8003880:	480a      	ldr	r0, [pc, #40]	; (80038ac <main+0x88>)
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	1841      	adds	r1, r0, r1
 8003886:	7809      	ldrb	r1, [r1, #0]
 8003888:	18d3      	adds	r3, r2, r3
 800388a:	1c0a      	adds	r2, r1, #0
 800388c:	751a      	strb	r2, [r3, #20]
			for (int i = 0; i < 4; i++) {
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3301      	adds	r3, #1
 8003892:	607b      	str	r3, [r7, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b03      	cmp	r3, #3
 8003898:	dde2      	ble.n	8003860 <main+0x3c>
			}
			HAL_CAN_Transmit(&hcan, 10);
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <main+0x8c>)
 800389c:	210a      	movs	r1, #10
 800389e:	0018      	movs	r0, r3
 80038a0:	f7fe f9ec 	bl	8001c7c <HAL_CAN_Transmit>
		if (TimerIntFlag == 1) {
 80038a4:	e7cf      	b.n	8003846 <main+0x22>
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	20000020 	.word	0x20000020
 80038ac:	2000013c 	.word	0x2000013c
 80038b0:	20000028 	.word	0x20000028

080038b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b092      	sub	sp, #72	; 0x48
 80038b8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_ClkInitTypeDef RCC_ClkInitStruct;

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038ba:	2314      	movs	r3, #20
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	2202      	movs	r2, #2
 80038c0:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038c2:	2314      	movs	r3, #20
 80038c4:	18fb      	adds	r3, r7, r3
 80038c6:	2201      	movs	r2, #1
 80038c8:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSICalibrationValue = 16;
 80038ca:	2314      	movs	r3, #20
 80038cc:	18fb      	adds	r3, r7, r3
 80038ce:	2210      	movs	r2, #16
 80038d0:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80038d2:	2314      	movs	r3, #20
 80038d4:	18fb      	adds	r3, r7, r3
 80038d6:	2200      	movs	r2, #0
 80038d8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80038da:	2314      	movs	r3, #20
 80038dc:	18fb      	adds	r3, r7, r3
 80038de:	0018      	movs	r0, r3
 80038e0:	f7fe fe0a 	bl	80024f8 <HAL_RCC_OscConfig>
 80038e4:	1e03      	subs	r3, r0, #0
 80038e6:	d004      	beq.n	80038f2 <SystemClock_Config+0x3e>
		_Error_Handler(__FILE__, __LINE__);
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <SystemClock_Config+0xa4>)
 80038ea:	21b2      	movs	r1, #178	; 0xb2
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 faaf 	bl	8003e50 <_Error_Handler>
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80038f2:	1d3b      	adds	r3, r7, #4
 80038f4:	2207      	movs	r2, #7
 80038f6:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80038f8:	1d3b      	adds	r3, r7, #4
 80038fa:	2200      	movs	r2, #0
 80038fc:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	2200      	movs	r2, #0
 8003902:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	2200      	movs	r2, #0
 8003908:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 800390a:	1d3b      	adds	r3, r7, #4
 800390c:	2100      	movs	r1, #0
 800390e:	0018      	movs	r0, r3
 8003910:	f7ff f950 	bl	8002bb4 <HAL_RCC_ClockConfig>
 8003914:	1e03      	subs	r3, r0, #0
 8003916:	d004      	beq.n	8003922 <SystemClock_Config+0x6e>
		_Error_Handler(__FILE__, __LINE__);
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <SystemClock_Config+0xa4>)
 800391a:	21be      	movs	r1, #190	; 0xbe
 800391c:	0018      	movs	r0, r3
 800391e:	f000 fa97 	bl	8003e50 <_Error_Handler>
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8003922:	f7ff facd 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8003926:	0002      	movs	r2, r0
 8003928:	23fa      	movs	r3, #250	; 0xfa
 800392a:	0099      	lsls	r1, r3, #2
 800392c:	0010      	movs	r0, r2
 800392e:	f7fc fbeb 	bl	8000108 <__udivsi3>
 8003932:	0003      	movs	r3, r0
 8003934:	0018      	movs	r0, r3
 8003936:	f7fe fc2f 	bl	8002198 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800393a:	2004      	movs	r0, #4
 800393c:	f7fe fc3a 	bl	80021b4 <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003940:	2301      	movs	r3, #1
 8003942:	425b      	negs	r3, r3
 8003944:	2200      	movs	r2, #0
 8003946:	2100      	movs	r1, #0
 8003948:	0018      	movs	r0, r3
 800394a:	f7fe fbff 	bl	800214c <HAL_NVIC_SetPriority>
}
 800394e:	46c0      	nop			; (mov r8, r8)
 8003950:	46bd      	mov	sp, r7
 8003952:	b012      	add	sp, #72	; 0x48
 8003954:	bd80      	pop	{r7, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	08004190 	.word	0x08004190

0800395c <MX_ADC_Init>:

/* ADC init function */
static void MX_ADC_Init(void) {
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig;

	/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8003962:	4b31      	ldr	r3, [pc, #196]	; (8003a28 <MX_ADC_Init+0xcc>)
 8003964:	4a31      	ldr	r2, [pc, #196]	; (8003a2c <MX_ADC_Init+0xd0>)
 8003966:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003968:	4b2f      	ldr	r3, [pc, #188]	; (8003a28 <MX_ADC_Init+0xcc>)
 800396a:	2280      	movs	r2, #128	; 0x80
 800396c:	05d2      	lsls	r2, r2, #23
 800396e:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003970:	4b2d      	ldr	r3, [pc, #180]	; (8003a28 <MX_ADC_Init+0xcc>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003976:	4b2c      	ldr	r3, [pc, #176]	; (8003a28 <MX_ADC_Init+0xcc>)
 8003978:	2200      	movs	r2, #0
 800397a:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800397c:	4b2a      	ldr	r3, [pc, #168]	; (8003a28 <MX_ADC_Init+0xcc>)
 800397e:	2201      	movs	r2, #1
 8003980:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003982:	4b29      	ldr	r3, [pc, #164]	; (8003a28 <MX_ADC_Init+0xcc>)
 8003984:	2204      	movs	r2, #4
 8003986:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = DISABLE;
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <MX_ADC_Init+0xcc>)
 800398a:	2200      	movs	r2, #0
 800398c:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800398e:	4b26      	ldr	r3, [pc, #152]	; (8003a28 <MX_ADC_Init+0xcc>)
 8003990:	2200      	movs	r2, #0
 8003992:	61da      	str	r2, [r3, #28]
	hadc.Init.ContinuousConvMode = DISABLE;
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <MX_ADC_Init+0xcc>)
 8003996:	2200      	movs	r2, #0
 8003998:	621a      	str	r2, [r3, #32]
	hadc.Init.DiscontinuousConvMode = ENABLE;
 800399a:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <MX_ADC_Init+0xcc>)
 800399c:	2201      	movs	r2, #1
 800399e:	625a      	str	r2, [r3, #36]	; 0x24
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80039a0:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <MX_ADC_Init+0xcc>)
 80039a2:	22c2      	movs	r2, #194	; 0xc2
 80039a4:	32ff      	adds	r2, #255	; 0xff
 80039a6:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80039a8:	4b1f      	ldr	r3, [pc, #124]	; (8003a28 <MX_ADC_Init+0xcc>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc.Init.DMAContinuousRequests = DISABLE;
 80039ae:	4b1e      	ldr	r3, [pc, #120]	; (8003a28 <MX_ADC_Init+0xcc>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
	hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80039b4:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <MX_ADC_Init+0xcc>)
 80039b6:	2201      	movs	r2, #1
 80039b8:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80039ba:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <MX_ADC_Init+0xcc>)
 80039bc:	0018      	movs	r0, r3
 80039be:	f7fd fa05 	bl	8000dcc <HAL_ADC_Init>
 80039c2:	1e03      	subs	r3, r0, #0
 80039c4:	d004      	beq.n	80039d0 <MX_ADC_Init+0x74>
		_Error_Handler(__FILE__, __LINE__);
 80039c6:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <MX_ADC_Init+0xd4>)
 80039c8:	21e3      	movs	r1, #227	; 0xe3
 80039ca:	0018      	movs	r0, r3
 80039cc:	f000 fa40 	bl	8003e50 <_Error_Handler>
	}

	/**Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80039d0:	1d3b      	adds	r3, r7, #4
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]
	sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80039d6:	1d3b      	adds	r3, r7, #4
 80039d8:	2280      	movs	r2, #128	; 0x80
 80039da:	0152      	lsls	r2, r2, #5
 80039dc:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	2201      	movs	r2, #1
 80039e2:	609a      	str	r2, [r3, #8]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 80039e4:	1d3a      	adds	r2, r7, #4
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <MX_ADC_Init+0xcc>)
 80039e8:	0011      	movs	r1, r2
 80039ea:	0018      	movs	r0, r3
 80039ec:	f7fd fc5e 	bl	80012ac <HAL_ADC_ConfigChannel>
 80039f0:	1e03      	subs	r3, r0, #0
 80039f2:	d004      	beq.n	80039fe <MX_ADC_Init+0xa2>
		_Error_Handler(__FILE__, __LINE__);
 80039f4:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <MX_ADC_Init+0xd4>)
 80039f6:	21ec      	movs	r1, #236	; 0xec
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 fa29 	bl	8003e50 <_Error_Handler>
	}

	/**Configure for the selected ADC regular channel to be converted.
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80039fe:	1d3b      	adds	r3, r7, #4
 8003a00:	2201      	movs	r2, #1
 8003a02:	601a      	str	r2, [r3, #0]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8003a04:	1d3a      	adds	r2, r7, #4
 8003a06:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <MX_ADC_Init+0xcc>)
 8003a08:	0011      	movs	r1, r2
 8003a0a:	0018      	movs	r0, r3
 8003a0c:	f7fd fc4e 	bl	80012ac <HAL_ADC_ConfigChannel>
 8003a10:	1e03      	subs	r3, r0, #0
 8003a12:	d004      	beq.n	8003a1e <MX_ADC_Init+0xc2>
		_Error_Handler(__FILE__, __LINE__);
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <MX_ADC_Init+0xd4>)
 8003a16:	21f3      	movs	r1, #243	; 0xf3
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f000 fa19 	bl	8003e50 <_Error_Handler>
	}

}
 8003a1e:	46c0      	nop			; (mov r8, r8)
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b004      	add	sp, #16
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	200000cc 	.word	0x200000cc
 8003a2c:	40012400 	.word	0x40012400
 8003a30:	08004190 	.word	0x08004190

08003a34 <MX_CAN_Init>:

/* CAN init function */
static void MX_CAN_Init(void) {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0

	hcan.Instance = CAN;
 8003a38:	4b1a      	ldr	r3, [pc, #104]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a3a:	4a1b      	ldr	r2, [pc, #108]	; (8003aa8 <MX_CAN_Init+0x74>)
 8003a3c:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 5;
 8003a3e:	4b19      	ldr	r3, [pc, #100]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a40:	2205      	movs	r2, #5
 8003a42:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8003a44:	4b17      	ldr	r3, [pc, #92]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	609a      	str	r2, [r3, #8]
	hcan.Init.SJW = CAN_SJW_1TQ;
 8003a4a:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	60da      	str	r2, [r3, #12]
	hcan.Init.BS1 = CAN_BS1_6TQ;
 8003a50:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a52:	22a0      	movs	r2, #160	; 0xa0
 8003a54:	02d2      	lsls	r2, r2, #11
 8003a56:	611a      	str	r2, [r3, #16]
	hcan.Init.BS2 = CAN_BS2_1TQ;
 8003a58:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	615a      	str	r2, [r3, #20]
	hcan.Init.TTCM = DISABLE;
 8003a5e:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	619a      	str	r2, [r3, #24]
	hcan.Init.ABOM = DISABLE;
 8003a64:	4b0f      	ldr	r3, [pc, #60]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
	hcan.Init.AWUM = DISABLE;
 8003a6a:	4b0e      	ldr	r3, [pc, #56]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	621a      	str	r2, [r3, #32]
	hcan.Init.NART = DISABLE;
 8003a70:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
	hcan.Init.RFLM = DISABLE;
 8003a76:	4b0b      	ldr	r3, [pc, #44]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	629a      	str	r2, [r3, #40]	; 0x28
	hcan.Init.TXFP = DISABLE;
 8003a7c:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8003a82:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <MX_CAN_Init+0x70>)
 8003a84:	0018      	movs	r0, r3
 8003a86:	f7fd fee3 	bl	8001850 <HAL_CAN_Init>
 8003a8a:	1e03      	subs	r3, r0, #0
 8003a8c:	d006      	beq.n	8003a9c <MX_CAN_Init+0x68>
		_Error_Handler(__FILE__, __LINE__);
 8003a8e:	2384      	movs	r3, #132	; 0x84
 8003a90:	005a      	lsls	r2, r3, #1
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <MX_CAN_Init+0x78>)
 8003a94:	0011      	movs	r1, r2
 8003a96:	0018      	movs	r0, r3
 8003a98:	f000 f9da 	bl	8003e50 <_Error_Handler>
	}

}
 8003a9c:	46c0      	nop			; (mov r8, r8)
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	20000028 	.word	0x20000028
 8003aa8:	40006400 	.word	0x40006400
 8003aac:	08004190 	.word	0x08004190

08003ab0 <MX_TIM2_Init>:

/* TIM2 init function */
static void MX_TIM2_Init(void) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08c      	sub	sp, #48	; 0x30
 8003ab4:	af00      	add	r7, sp, #0

	TIM_ClockConfigTypeDef sClockSourceConfig;
	TIM_SlaveConfigTypeDef sSlaveConfig;
	TIM_MasterConfigTypeDef sMasterConfig;

	htim2.Instance = TIM2;
 8003ab6:	4b34      	ldr	r3, [pc, #208]	; (8003b88 <MX_TIM2_Init+0xd8>)
 8003ab8:	2280      	movs	r2, #128	; 0x80
 8003aba:	05d2      	lsls	r2, r2, #23
 8003abc:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 128;
 8003abe:	4b32      	ldr	r3, [pc, #200]	; (8003b88 <MX_TIM2_Init+0xd8>)
 8003ac0:	2280      	movs	r2, #128	; 0x80
 8003ac2:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac4:	4b30      	ldr	r3, [pc, #192]	; (8003b88 <MX_TIM2_Init+0xd8>)
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65536;
 8003aca:	4b2f      	ldr	r3, [pc, #188]	; (8003b88 <MX_TIM2_Init+0xd8>)
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	0252      	lsls	r2, r2, #9
 8003ad0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad2:	4b2d      	ldr	r3, [pc, #180]	; (8003b88 <MX_TIM2_Init+0xd8>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ad8:	4b2b      	ldr	r3, [pc, #172]	; (8003b88 <MX_TIM2_Init+0xd8>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003ade:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <MX_TIM2_Init+0xd8>)
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff f9f7 	bl	8002ed4 <HAL_TIM_Base_Init>
 8003ae6:	1e03      	subs	r3, r0, #0
 8003ae8:	d007      	beq.n	8003afa <MX_TIM2_Init+0x4a>
		_Error_Handler(__FILE__, __LINE__);
 8003aea:	231c      	movs	r3, #28
 8003aec:	33ff      	adds	r3, #255	; 0xff
 8003aee:	001a      	movs	r2, r3
 8003af0:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <MX_TIM2_Init+0xdc>)
 8003af2:	0011      	movs	r1, r2
 8003af4:	0018      	movs	r0, r3
 8003af6:	f000 f9ab 	bl	8003e50 <_Error_Handler>
	}

	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003afa:	2320      	movs	r3, #32
 8003afc:	18fb      	adds	r3, r7, r3
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	0152      	lsls	r2, r2, #5
 8003b02:	601a      	str	r2, [r3, #0]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003b04:	2320      	movs	r3, #32
 8003b06:	18fa      	adds	r2, r7, r3
 8003b08:	4b1f      	ldr	r3, [pc, #124]	; (8003b88 <MX_TIM2_Init+0xd8>)
 8003b0a:	0011      	movs	r1, r2
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f7ff fb3d 	bl	800318c <HAL_TIM_ConfigClockSource>
 8003b12:	1e03      	subs	r3, r0, #0
 8003b14:	d006      	beq.n	8003b24 <MX_TIM2_Init+0x74>
		_Error_Handler(__FILE__, __LINE__);
 8003b16:	2390      	movs	r3, #144	; 0x90
 8003b18:	005a      	lsls	r2, r3, #1
 8003b1a:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <MX_TIM2_Init+0xdc>)
 8003b1c:	0011      	movs	r1, r2
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f000 f996 	bl	8003e50 <_Error_Handler>
	}

	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8003b24:	230c      	movs	r3, #12
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
	sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003b2c:	230c      	movs	r3, #12
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	2200      	movs	r2, #0
 8003b32:	605a      	str	r2, [r3, #4]
	if (HAL_TIM_SlaveConfigSynchronization(&htim2, &sSlaveConfig) != HAL_OK) {
 8003b34:	230c      	movs	r3, #12
 8003b36:	18fa      	adds	r2, r7, r3
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <MX_TIM2_Init+0xd8>)
 8003b3a:	0011      	movs	r1, r2
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f7ff fc05 	bl	800334c <HAL_TIM_SlaveConfigSynchronization>
 8003b42:	1e03      	subs	r3, r0, #0
 8003b44:	d006      	beq.n	8003b54 <MX_TIM2_Init+0xa4>
		_Error_Handler(__FILE__, __LINE__);
 8003b46:	2393      	movs	r3, #147	; 0x93
 8003b48:	005a      	lsls	r2, r3, #1
 8003b4a:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <MX_TIM2_Init+0xdc>)
 8003b4c:	0011      	movs	r1, r2
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 f97e 	bl	8003e50 <_Error_Handler>
	}

	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b54:	1d3b      	adds	r3, r7, #4
 8003b56:	2220      	movs	r2, #32
 8003b58:	601a      	str	r2, [r3, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b5a:	1d3b      	adds	r3, r7, #4
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	605a      	str	r2, [r3, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003b60:	1d3a      	adds	r2, r7, #4
 8003b62:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <MX_TIM2_Init+0xd8>)
 8003b64:	0011      	movs	r1, r2
 8003b66:	0018      	movs	r0, r3
 8003b68:	f7ff fe08 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 8003b6c:	1e03      	subs	r3, r0, #0
 8003b6e:	d007      	beq.n	8003b80 <MX_TIM2_Init+0xd0>
			!= HAL_OK) {
		_Error_Handler(__FILE__, __LINE__);
 8003b70:	232e      	movs	r3, #46	; 0x2e
 8003b72:	33ff      	adds	r3, #255	; 0xff
 8003b74:	001a      	movs	r2, r3
 8003b76:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <MX_TIM2_Init+0xdc>)
 8003b78:	0011      	movs	r1, r2
 8003b7a:	0018      	movs	r0, r3
 8003b7c:	f000 f968 	bl	8003e50 <_Error_Handler>
	}

}
 8003b80:	46c0      	nop			; (mov r8, r8)
 8003b82:	46bd      	mov	sp, r7
 8003b84:	b00c      	add	sp, #48	; 0x30
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000070 	.word	0x20000070
 8003b8c:	08004190 	.word	0x08004190

08003b90 <MX_GPIO_Init>:

/** Pinout Configuration
 */
static void MX_GPIO_Init(void) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE()
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <MX_GPIO_Init+0x48>)
 8003b98:	4a0f      	ldr	r2, [pc, #60]	; (8003bd8 <MX_GPIO_Init+0x48>)
 8003b9a:	6952      	ldr	r2, [r2, #20]
 8003b9c:	2180      	movs	r1, #128	; 0x80
 8003b9e:	0289      	lsls	r1, r1, #10
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	615a      	str	r2, [r3, #20]
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	; (8003bd8 <MX_GPIO_Init+0x48>)
 8003ba6:	695a      	ldr	r2, [r3, #20]
 8003ba8:	2380      	movs	r3, #128	; 0x80
 8003baa:	029b      	lsls	r3, r3, #10
 8003bac:	4013      	ands	r3, r2
 8003bae:	607b      	str	r3, [r7, #4]
 8003bb0:	687b      	ldr	r3, [r7, #4]
	;
	__HAL_RCC_GPIOB_CLK_ENABLE()
 8003bb2:	4b09      	ldr	r3, [pc, #36]	; (8003bd8 <MX_GPIO_Init+0x48>)
 8003bb4:	4a08      	ldr	r2, [pc, #32]	; (8003bd8 <MX_GPIO_Init+0x48>)
 8003bb6:	6952      	ldr	r2, [r2, #20]
 8003bb8:	2180      	movs	r1, #128	; 0x80
 8003bba:	02c9      	lsls	r1, r1, #11
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	615a      	str	r2, [r3, #20]
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <MX_GPIO_Init+0x48>)
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	02db      	lsls	r3, r3, #11
 8003bc8:	4013      	ands	r3, r2
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	683b      	ldr	r3, [r7, #0]
	;

}
 8003bce:	46c0      	nop			; (mov r8, r8)
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	b002      	add	sp, #8
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	40021000 	.word	0x40021000

08003bdc <CanSetup>:

/* USER CODE BEGIN 4 */

void CanSetup() {
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
	if (DEBUG) {
		hcan.Instance->MCR = 0x60;
 8003be0:	4b28      	ldr	r3, [pc, #160]	; (8003c84 <CanSetup+0xa8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2260      	movs	r2, #96	; 0x60
 8003be6:	601a      	str	r2, [r3, #0]
	}

	hcan.pTxMsg = &TxMessage;
 8003be8:	4b26      	ldr	r3, [pc, #152]	; (8003c84 <CanSetup+0xa8>)
 8003bea:	4a27      	ldr	r2, [pc, #156]	; (8003c88 <CanSetup+0xac>)
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
	hcan.pRxMsg = &RxMessage;
 8003bee:	4b25      	ldr	r3, [pc, #148]	; (8003c84 <CanSetup+0xa8>)
 8003bf0:	4a26      	ldr	r2, [pc, #152]	; (8003c8c <CanSetup+0xb0>)
 8003bf2:	635a      	str	r2, [r3, #52]	; 0x34

	/*##-2- Configure the CAN Filter ###########################################*/
	rxFilter.FilterNumber = 0;
 8003bf4:	4b26      	ldr	r3, [pc, #152]	; (8003c90 <CanSetup+0xb4>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	615a      	str	r2, [r3, #20]
	rxFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8003bfa:	4b25      	ldr	r3, [pc, #148]	; (8003c90 <CanSetup+0xb4>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	619a      	str	r2, [r3, #24]
	rxFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8003c00:	4b23      	ldr	r3, [pc, #140]	; (8003c90 <CanSetup+0xb4>)
 8003c02:	2201      	movs	r2, #1
 8003c04:	61da      	str	r2, [r3, #28]
	rxFilter.FilterIdHigh = 0x0000;
 8003c06:	4b22      	ldr	r3, [pc, #136]	; (8003c90 <CanSetup+0xb4>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
	rxFilter.FilterIdLow = CAN_MOTHERBOARD_ID;
 8003c0c:	4b20      	ldr	r3, [pc, #128]	; (8003c90 <CanSetup+0xb4>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	605a      	str	r2, [r3, #4]
	rxFilter.FilterMaskIdHigh = 0x0000;
 8003c12:	4b1f      	ldr	r3, [pc, #124]	; (8003c90 <CanSetup+0xb4>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
	rxFilter.FilterMaskIdLow = 0x0000;
 8003c18:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <CanSetup+0xb4>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	60da      	str	r2, [r3, #12]
	rxFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8003c1e:	4b1c      	ldr	r3, [pc, #112]	; (8003c90 <CanSetup+0xb4>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	611a      	str	r2, [r3, #16]
	rxFilter.FilterActivation = DISABLE;
 8003c24:	4b1a      	ldr	r3, [pc, #104]	; (8003c90 <CanSetup+0xb4>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	621a      	str	r2, [r3, #32]
	rxFilter.BankNumber = 14;
 8003c2a:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <CanSetup+0xb4>)
 8003c2c:	220e      	movs	r2, #14
 8003c2e:	625a      	str	r2, [r3, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan, &rxFilter) != HAL_OK) {
 8003c30:	4a17      	ldr	r2, [pc, #92]	; (8003c90 <CanSetup+0xb4>)
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <CanSetup+0xa8>)
 8003c34:	0011      	movs	r1, r2
 8003c36:	0018      	movs	r0, r3
 8003c38:	f7fd ff2e 	bl	8001a98 <HAL_CAN_ConfigFilter>
 8003c3c:	1e03      	subs	r3, r0, #0
 8003c3e:	d006      	beq.n	8003c4e <CanSetup+0x72>
		/* Filter configuration Error */
		Error_Handler();
 8003c40:	23ab      	movs	r3, #171	; 0xab
 8003c42:	005a      	lsls	r2, r3, #1
 8003c44:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <CanSetup+0xb8>)
 8003c46:	0011      	movs	r1, r2
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f000 f901 	bl	8003e50 <_Error_Handler>
	}

	hcan.pTxMsg->StdId = CAN_TX_ID; /*Specifies the standard identifier. This parameter must be a number between Min_Data
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <CanSetup+0xa8>)
 8003c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c52:	2209      	movs	r2, #9
 8003c54:	601a      	str	r2, [r3, #0]
	 = 0 and Max_Data = 0x7FF.*/
	hcan.pTxMsg->ExtId = 0x00; /*Specifies the extended identifier. This parameter must be a number between
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <CanSetup+0xa8>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	605a      	str	r2, [r3, #4]
	 Min_Data = 0 and Max_Data = 0x1FFFFFFF.*/
	hcan.pTxMsg->RTR = CAN_RTR_DATA; /*Specifies the type of identifier for the message that will be transmitted. This parameter
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <CanSetup+0xa8>)
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	2200      	movs	r2, #0
 8003c64:	60da      	str	r2, [r3, #12]
	 can be a value of CAN_identifier_type*/
	hcan.pTxMsg->IDE = CAN_ID_STD; /*Specifies the type of frame for the received message. This parameter can be a value
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <CanSetup+0xa8>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	609a      	str	r2, [r3, #8]
	 of CAN_remote_transmission_request*/
	hcan.pTxMsg->DLC = 8; /*Specifies the length of the frame that will be transmitted. This parameter must be a number between
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <CanSetup+0xa8>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	2208      	movs	r2, #8
 8003c74:	611a      	str	r2, [r3, #16]
	 Min_Data = 0 and Max_Data = 8. */
	hcan.pTxMsg->Data[0] = 0; /*Contains the data to be transmitted. This parameter must be a number between
 8003c76:	4b03      	ldr	r3, [pc, #12]	; (8003c84 <CanSetup+0xa8>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	751a      	strb	r2, [r3, #20]
	 Min_Data = 0 and Max_Data = 0xFF.*/
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000028 	.word	0x20000028
 8003c88:	200000b0 	.word	0x200000b0
 8003c8c:	20000118 	.word	0x20000118
 8003c90:	20000148 	.word	0x20000148
 8003c94:	08004190 	.word	0x08004190

08003c98 <InitBattery>:

void InitBattery() {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
	CanSetup();
 8003c9c:	f7ff ff9e 	bl	8003bdc <CanSetup>
	HAL_ADCEx_Calibration_Start(&hadc);
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <InitBattery+0x24>)
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f7fd fd3a 	bl	800171c <HAL_ADCEx_Calibration_Start>
	BatteryMonitor.GetReadings = &GetVoltageCurrent;
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <InitBattery+0x28>)
 8003caa:	4a06      	ldr	r2, [pc, #24]	; (8003cc4 <InitBattery+0x2c>)
 8003cac:	609a      	str	r2, [r3, #8]
	HAL_TIM_Base_Start_IT(&htim2);
 8003cae:	4b06      	ldr	r3, [pc, #24]	; (8003cc8 <InitBattery+0x30>)
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7ff f93b 	bl	8002f2c <HAL_TIM_Base_Start_IT>
}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	200000cc 	.word	0x200000cc
 8003cc0:	2000013c 	.word	0x2000013c
 8003cc4:	08003ccd 	.word	0x08003ccd
 8003cc8:	20000070 	.word	0x20000070

08003ccc <GetVoltageCurrent>:

void GetVoltageCurrent() {
 8003ccc:	b590      	push	{r4, r7, lr}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
	BatteryMonitor.Current.Diagnostic = 0;
 8003cd2:	4b56      	ldr	r3, [pc, #344]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	605a      	str	r2, [r3, #4]
	BatteryMonitor.Voltage.Diagnostic = 0;
 8003cd8:	4b54      	ldr	r3, [pc, #336]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	601a      	str	r2, [r3, #0]
	int LpfTaps = 5000;
 8003cde:	4b54      	ldr	r3, [pc, #336]	; (8003e30 <GetVoltageCurrent+0x164>)
 8003ce0:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < LpfTaps; i++) {
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	607b      	str	r3, [r7, #4]
 8003ce6:	e041      	b.n	8003d6c <GetVoltageCurrent+0xa0>
		HAL_ADC_Start(&hadc);
 8003ce8:	4b52      	ldr	r3, [pc, #328]	; (8003e34 <GetVoltageCurrent+0x168>)
 8003cea:	0018      	movs	r0, r3
 8003cec:	f7fd f9ac 	bl	8001048 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc, 10) != HAL_OK)
 8003cf0:	46c0      	nop			; (mov r8, r8)
 8003cf2:	4b50      	ldr	r3, [pc, #320]	; (8003e34 <GetVoltageCurrent+0x168>)
 8003cf4:	210a      	movs	r1, #10
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f7fd fa3c 	bl	8001174 <HAL_ADC_PollForConversion>
 8003cfc:	1e03      	subs	r3, r0, #0
 8003cfe:	d1f8      	bne.n	8003cf2 <GetVoltageCurrent+0x26>
			;
		BatteryMonitor.Current.Diagnostic += (float) (HAL_ADC_GetValue(&hadc));
 8003d00:	4b4c      	ldr	r3, [pc, #304]	; (8003e34 <GetVoltageCurrent+0x168>)
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7fd fac6 	bl	8001294 <HAL_ADC_GetValue>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	0018      	movs	r0, r3
 8003d0c:	f7fc ffb4 	bl	8000c78 <__aeabi_ui2f>
 8003d10:	1c02      	adds	r2, r0, #0
 8003d12:	4b46      	ldr	r3, [pc, #280]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	1c11      	adds	r1, r2, #0
 8003d18:	1c18      	adds	r0, r3, #0
 8003d1a:	f7fc fabb 	bl	8000294 <__aeabi_fadd>
 8003d1e:	1c03      	adds	r3, r0, #0
 8003d20:	1c1a      	adds	r2, r3, #0
 8003d22:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003d24:	605a      	str	r2, [r3, #4]

		HAL_ADC_Start(&hadc);
 8003d26:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <GetVoltageCurrent+0x168>)
 8003d28:	0018      	movs	r0, r3
 8003d2a:	f7fd f98d 	bl	8001048 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc, 10) != HAL_OK)
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <GetVoltageCurrent+0x168>)
 8003d32:	210a      	movs	r1, #10
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7fd fa1d 	bl	8001174 <HAL_ADC_PollForConversion>
 8003d3a:	1e03      	subs	r3, r0, #0
 8003d3c:	d1f8      	bne.n	8003d30 <GetVoltageCurrent+0x64>
			;
		BatteryMonitor.Voltage.Diagnostic += (float) (HAL_ADC_GetValue(&hadc));
 8003d3e:	4b3d      	ldr	r3, [pc, #244]	; (8003e34 <GetVoltageCurrent+0x168>)
 8003d40:	0018      	movs	r0, r3
 8003d42:	f7fd faa7 	bl	8001294 <HAL_ADC_GetValue>
 8003d46:	0003      	movs	r3, r0
 8003d48:	0018      	movs	r0, r3
 8003d4a:	f7fc ff95 	bl	8000c78 <__aeabi_ui2f>
 8003d4e:	1c02      	adds	r2, r0, #0
 8003d50:	4b36      	ldr	r3, [pc, #216]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	1c11      	adds	r1, r2, #0
 8003d56:	1c18      	adds	r0, r3, #0
 8003d58:	f7fc fa9c 	bl	8000294 <__aeabi_fadd>
 8003d5c:	1c03      	adds	r3, r0, #0
 8003d5e:	1c1a      	adds	r2, r3, #0
 8003d60:	4b32      	ldr	r3, [pc, #200]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003d62:	601a      	str	r2, [r3, #0]
		asm(" nop");
 8003d64:	46c0      	nop			; (mov r8, r8)
	for (int i = 0; i < LpfTaps; i++) {
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	dbb9      	blt.n	8003ce8 <GetVoltageCurrent+0x1c>
	}
	HAL_ADC_Stop(&hadc);
 8003d74:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <GetVoltageCurrent+0x168>)
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7fd f9ba 	bl	80010f0 <HAL_ADC_Stop>

	BatteryMonitor.Voltage.Diagnostic /= (float) LpfTaps;
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003d7e:	681c      	ldr	r4, [r3, #0]
 8003d80:	6838      	ldr	r0, [r7, #0]
 8003d82:	f7fc ff29 	bl	8000bd8 <__aeabi_i2f>
 8003d86:	1c03      	adds	r3, r0, #0
 8003d88:	1c19      	adds	r1, r3, #0
 8003d8a:	1c20      	adds	r0, r4, #0
 8003d8c:	f7fc fc14 	bl	80005b8 <__aeabi_fdiv>
 8003d90:	1c03      	adds	r3, r0, #0
 8003d92:	1c1a      	adds	r2, r3, #0
 8003d94:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003d96:	601a      	str	r2, [r3, #0]
	BatteryMonitor.Voltage.Diagnostic = ((BatteryMonitor.Voltage.Diagnostic)
 8003d98:	4b24      	ldr	r3, [pc, #144]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
			/ AdcMax) * Vref; //Vres_ref !=
 8003d9c:	4926      	ldr	r1, [pc, #152]	; (8003e38 <GetVoltageCurrent+0x16c>)
 8003d9e:	1c18      	adds	r0, r3, #0
 8003da0:	f7fc fc0a 	bl	80005b8 <__aeabi_fdiv>
 8003da4:	1c03      	adds	r3, r0, #0
 8003da6:	4925      	ldr	r1, [pc, #148]	; (8003e3c <GetVoltageCurrent+0x170>)
 8003da8:	1c18      	adds	r0, r3, #0
 8003daa:	f7fc fdf5 	bl	8000998 <__aeabi_fmul>
 8003dae:	1c03      	adds	r3, r0, #0
 8003db0:	1c1a      	adds	r2, r3, #0
	BatteryMonitor.Voltage.Diagnostic = ((BatteryMonitor.Voltage.Diagnostic)
 8003db2:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003db4:	601a      	str	r2, [r3, #0]
	BatteryMonitor.Voltage.Diagnostic = ((RESISTOR1 + RESISTOR2_V1)
			/ (RESISTOR2_V1)) * (BatteryMonitor.Voltage.Diagnostic);
 8003db6:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4921      	ldr	r1, [pc, #132]	; (8003e40 <GetVoltageCurrent+0x174>)
 8003dbc:	1c18      	adds	r0, r3, #0
 8003dbe:	f7fc fdeb 	bl	8000998 <__aeabi_fmul>
 8003dc2:	1c03      	adds	r3, r0, #0
 8003dc4:	1c1a      	adds	r2, r3, #0
	BatteryMonitor.Voltage.Diagnostic = ((RESISTOR1 + RESISTOR2_V1)
 8003dc6:	4b19      	ldr	r3, [pc, #100]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003dc8:	601a      	str	r2, [r3, #0]

	BatteryMonitor.Current.Diagnostic /= (float) LpfTaps;
 8003dca:	4b18      	ldr	r3, [pc, #96]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003dcc:	685c      	ldr	r4, [r3, #4]
 8003dce:	6838      	ldr	r0, [r7, #0]
 8003dd0:	f7fc ff02 	bl	8000bd8 <__aeabi_i2f>
 8003dd4:	1c03      	adds	r3, r0, #0
 8003dd6:	1c19      	adds	r1, r3, #0
 8003dd8:	1c20      	adds	r0, r4, #0
 8003dda:	f7fc fbed 	bl	80005b8 <__aeabi_fdiv>
 8003dde:	1c03      	adds	r3, r0, #0
 8003de0:	1c1a      	adds	r2, r3, #0
 8003de2:	4b12      	ldr	r3, [pc, #72]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003de4:	605a      	str	r2, [r3, #4]
	if (BatteryMonitor.Current.Diagnostic < 30.0f) {
 8003de6:	4b11      	ldr	r3, [pc, #68]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4916      	ldr	r1, [pc, #88]	; (8003e44 <GetVoltageCurrent+0x178>)
 8003dec:	1c18      	adds	r0, r3, #0
 8003dee:	f7fc fa29 	bl	8000244 <__aeabi_fcmplt>
 8003df2:	1e03      	subs	r3, r0, #0
 8003df4:	d004      	beq.n	8003e00 <GetVoltageCurrent+0x134>
//		BatteryMonitor.Current.Diagnostic = 0.07653f
//				* (BatteryMonitor.Current.Diagnostic) - 1.813f;
		//Values in this range are not accurate or precise enough so output is discrete 0
		BatteryMonitor.Current.Diagnostic = 0;
 8003df6:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	605a      	str	r2, [r3, #4]
		asm(" nop");
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	e00f      	b.n	8003e20 <GetVoltageCurrent+0x154>
	} else {
//		BatteryMonitor.Current.Diagnostic = 0.01595f
//				* (BatteryMonitor.Current.Diagnostic) - 0.04889f + 0.08f;
		BatteryMonitor.Current.Diagnostic = 0.01604f
				* (BatteryMonitor.Current.Diagnostic) + 0.02f;
 8003e00:	4b0a      	ldr	r3, [pc, #40]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	4910      	ldr	r1, [pc, #64]	; (8003e48 <GetVoltageCurrent+0x17c>)
 8003e06:	1c18      	adds	r0, r3, #0
 8003e08:	f7fc fdc6 	bl	8000998 <__aeabi_fmul>
 8003e0c:	1c03      	adds	r3, r0, #0
 8003e0e:	490f      	ldr	r1, [pc, #60]	; (8003e4c <GetVoltageCurrent+0x180>)
 8003e10:	1c18      	adds	r0, r3, #0
 8003e12:	f7fc fa3f 	bl	8000294 <__aeabi_fadd>
 8003e16:	1c03      	adds	r3, r0, #0
 8003e18:	1c1a      	adds	r2, r3, #0
		BatteryMonitor.Current.Diagnostic = 0.01604f
 8003e1a:	4b04      	ldr	r3, [pc, #16]	; (8003e2c <GetVoltageCurrent+0x160>)
 8003e1c:	605a      	str	r2, [r3, #4]
		asm(" nop");
 8003e1e:	46c0      	nop			; (mov r8, r8)
	}
	asm(" nop");
 8003e20:	46c0      	nop			; (mov r8, r8)
}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b003      	add	sp, #12
 8003e28:	bd90      	pop	{r4, r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	2000013c 	.word	0x2000013c
 8003e30:	00001388 	.word	0x00001388
 8003e34:	200000cc 	.word	0x200000cc
 8003e38:	457ff000 	.word	0x457ff000
 8003e3c:	40533333 	.word	0x40533333
 8003e40:	40ff5c29 	.word	0x40ff5c29
 8003e44:	41f00000 	.word	0x41f00000
 8003e48:	3c836651 	.word	0x3c836651
 8003e4c:	3ca3d70a 	.word	0x3ca3d70a

08003e50 <_Error_Handler>:
 *
 *
 * @param  line: The line in file as a number.
 * @retval None
 */
void _Error_Handler(char *file, int line) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8003e5a:	e7fe      	b.n	8003e5a <_Error_Handler+0xa>

08003e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_MspInit+0x50>)
 8003e64:	4a11      	ldr	r2, [pc, #68]	; (8003eac <HAL_MspInit+0x50>)
 8003e66:	6992      	ldr	r2, [r2, #24]
 8003e68:	2101      	movs	r1, #1
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	619a      	str	r2, [r3, #24]
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <HAL_MspInit+0x50>)
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2201      	movs	r2, #1
 8003e74:	4013      	ands	r3, r2
 8003e76:	607b      	str	r3, [r7, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8003e7a:	2305      	movs	r3, #5
 8003e7c:	425b      	negs	r3, r3
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	0018      	movs	r0, r3
 8003e84:	f7fe f962 	bl	800214c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003e88:	2302      	movs	r3, #2
 8003e8a:	425b      	negs	r3, r3
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2100      	movs	r1, #0
 8003e90:	0018      	movs	r0, r3
 8003e92:	f7fe f95b 	bl	800214c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003e96:	2301      	movs	r3, #1
 8003e98:	425b      	negs	r3, r3
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	0018      	movs	r0, r3
 8003ea0:	f7fe f954 	bl	800214c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	b002      	add	sp, #8
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	40021000 	.word	0x40021000

08003eb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b088      	sub	sp, #32
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hadc->Instance==ADC1)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <HAL_ADC_MspInit+0x60>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d121      	bne.n	8003f06 <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003ec2:	4b14      	ldr	r3, [pc, #80]	; (8003f14 <HAL_ADC_MspInit+0x64>)
 8003ec4:	4a13      	ldr	r2, [pc, #76]	; (8003f14 <HAL_ADC_MspInit+0x64>)
 8003ec6:	6992      	ldr	r2, [r2, #24]
 8003ec8:	2180      	movs	r1, #128	; 0x80
 8003eca:	0089      	lsls	r1, r1, #2
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	619a      	str	r2, [r3, #24]
 8003ed0:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <HAL_ADC_MspInit+0x64>)
 8003ed2:	699a      	ldr	r2, [r3, #24]
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]
 8003edc:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ede:	230c      	movs	r3, #12
 8003ee0:	18fb      	adds	r3, r7, r3
 8003ee2:	2203      	movs	r2, #3
 8003ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	18fb      	adds	r3, r7, r3
 8003eea:	2203      	movs	r2, #3
 8003eec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eee:	230c      	movs	r3, #12
 8003ef0:	18fb      	adds	r3, r7, r3
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef6:	230c      	movs	r3, #12
 8003ef8:	18fa      	adds	r2, r7, r3
 8003efa:	2390      	movs	r3, #144	; 0x90
 8003efc:	05db      	lsls	r3, r3, #23
 8003efe:	0011      	movs	r1, r2
 8003f00:	0018      	movs	r0, r3
 8003f02:	f7fe f97d 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f06:	46c0      	nop			; (mov r8, r8)
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	b008      	add	sp, #32
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	40012400 	.word	0x40012400
 8003f14:	40021000 	.word	0x40021000

08003f18 <HAL_CAN_MspInit>:
  }

}

void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hcan->Instance==CAN)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <HAL_CAN_MspInit+0x70>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d129      	bne.n	8003f7e <HAL_CAN_MspInit+0x66>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <HAL_CAN_MspInit+0x74>)
 8003f2c:	4a17      	ldr	r2, [pc, #92]	; (8003f8c <HAL_CAN_MspInit+0x74>)
 8003f2e:	69d2      	ldr	r2, [r2, #28]
 8003f30:	2180      	movs	r1, #128	; 0x80
 8003f32:	0489      	lsls	r1, r1, #18
 8003f34:	430a      	orrs	r2, r1
 8003f36:	61da      	str	r2, [r3, #28]
 8003f38:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_CAN_MspInit+0x74>)
 8003f3a:	69da      	ldr	r2, [r3, #28]
 8003f3c:	2380      	movs	r3, #128	; 0x80
 8003f3e:	049b      	lsls	r3, r3, #18
 8003f40:	4013      	ands	r3, r2
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	68bb      	ldr	r3, [r7, #8]
  
    /**CAN GPIO Configuration    
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003f46:	230c      	movs	r3, #12
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	22c0      	movs	r2, #192	; 0xc0
 8003f4c:	0092      	lsls	r2, r2, #2
 8003f4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f50:	230c      	movs	r3, #12
 8003f52:	18fb      	adds	r3, r7, r3
 8003f54:	2202      	movs	r2, #2
 8003f56:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f58:	230c      	movs	r3, #12
 8003f5a:	18fb      	adds	r3, r7, r3
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003f60:	230c      	movs	r3, #12
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	2203      	movs	r2, #3
 8003f66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 8003f68:	230c      	movs	r3, #12
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	2204      	movs	r2, #4
 8003f6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f70:	230c      	movs	r3, #12
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	4a06      	ldr	r2, [pc, #24]	; (8003f90 <HAL_CAN_MspInit+0x78>)
 8003f76:	0019      	movs	r1, r3
 8003f78:	0010      	movs	r0, r2
 8003f7a:	f7fe f941 	bl	8002200 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8003f7e:	46c0      	nop			; (mov r8, r8)
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b008      	add	sp, #32
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	40006400 	.word	0x40006400
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	48000400 	.word	0x48000400

08003f94 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]

  if(htim_base->Instance==TIM2)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	2380      	movs	r3, #128	; 0x80
 8003fa2:	05db      	lsls	r3, r3, #23
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d113      	bne.n	8003fd0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003fa8:	4b0b      	ldr	r3, [pc, #44]	; (8003fd8 <HAL_TIM_Base_MspInit+0x44>)
 8003faa:	4a0b      	ldr	r2, [pc, #44]	; (8003fd8 <HAL_TIM_Base_MspInit+0x44>)
 8003fac:	69d2      	ldr	r2, [r2, #28]
 8003fae:	2101      	movs	r1, #1
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	61da      	str	r2, [r3, #28]
 8003fb4:	4b08      	ldr	r3, [pc, #32]	; (8003fd8 <HAL_TIM_Base_MspInit+0x44>)
 8003fb6:	69db      	ldr	r3, [r3, #28]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4013      	ands	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	200f      	movs	r0, #15
 8003fc6:	f7fe f8c1 	bl	800214c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003fca:	200f      	movs	r0, #15
 8003fcc:	f7fe f8d4 	bl	8002178 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b004      	add	sp, #16
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40021000 	.word	0x40021000

08003fdc <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003fe0:	46c0      	nop			; (mov r8, r8)
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fea:	e7fe      	b.n	8003fea <HardFault_Handler+0x4>

08003fec <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}

08003ff6 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004004:	f7fc fecc 	bl	8000da0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8004008:	f7fe f8ee 	bl	80021e8 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800400c:	46c0      	nop			; (mov r8, r8)
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  TimerIntFlag = 1;
 8004018:	4b04      	ldr	r3, [pc, #16]	; (800402c <TIM2_IRQHandler+0x18>)
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800401e:	4b04      	ldr	r3, [pc, #16]	; (8004030 <TIM2_IRQHandler+0x1c>)
 8004020:	0018      	movs	r0, r3
 8004022:	f7fe ff9c 	bl	8002f5e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	20000020 	.word	0x20000020
 8004030:	20000070 	.word	0x20000070

08004034 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8004038:	4b1a      	ldr	r3, [pc, #104]	; (80040a4 <SystemInit+0x70>)
 800403a:	4a1a      	ldr	r2, [pc, #104]	; (80040a4 <SystemInit+0x70>)
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	2101      	movs	r1, #1
 8004040:	430a      	orrs	r2, r1
 8004042:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004044:	4b17      	ldr	r3, [pc, #92]	; (80040a4 <SystemInit+0x70>)
 8004046:	4a17      	ldr	r2, [pc, #92]	; (80040a4 <SystemInit+0x70>)
 8004048:	6852      	ldr	r2, [r2, #4]
 800404a:	4917      	ldr	r1, [pc, #92]	; (80040a8 <SystemInit+0x74>)
 800404c:	400a      	ands	r2, r1
 800404e:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8004050:	4b14      	ldr	r3, [pc, #80]	; (80040a4 <SystemInit+0x70>)
 8004052:	4a14      	ldr	r2, [pc, #80]	; (80040a4 <SystemInit+0x70>)
 8004054:	6812      	ldr	r2, [r2, #0]
 8004056:	4915      	ldr	r1, [pc, #84]	; (80040ac <SystemInit+0x78>)
 8004058:	400a      	ands	r2, r1
 800405a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <SystemInit+0x70>)
 800405e:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <SystemInit+0x70>)
 8004060:	6812      	ldr	r2, [r2, #0]
 8004062:	4913      	ldr	r1, [pc, #76]	; (80040b0 <SystemInit+0x7c>)
 8004064:	400a      	ands	r2, r1
 8004066:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <SystemInit+0x70>)
 800406a:	4a0e      	ldr	r2, [pc, #56]	; (80040a4 <SystemInit+0x70>)
 800406c:	6852      	ldr	r2, [r2, #4]
 800406e:	4911      	ldr	r1, [pc, #68]	; (80040b4 <SystemInit+0x80>)
 8004070:	400a      	ands	r2, r1
 8004072:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <SystemInit+0x70>)
 8004076:	4a0b      	ldr	r2, [pc, #44]	; (80040a4 <SystemInit+0x70>)
 8004078:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800407a:	210f      	movs	r1, #15
 800407c:	438a      	bics	r2, r1
 800407e:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined (STM32F072xB) || defined (STM32F078xx)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW, USBSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFCFE2CU;
 8004080:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <SystemInit+0x70>)
 8004082:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <SystemInit+0x70>)
 8004084:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004086:	490c      	ldr	r1, [pc, #48]	; (80040b8 <SystemInit+0x84>)
 8004088:	400a      	ands	r2, r1
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 800408c:	4b05      	ldr	r3, [pc, #20]	; (80040a4 <SystemInit+0x70>)
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <SystemInit+0x70>)
 8004090:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004092:	2101      	movs	r1, #1
 8004094:	438a      	bics	r2, r1
 8004096:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004098:	4b02      	ldr	r3, [pc, #8]	; (80040a4 <SystemInit+0x70>)
 800409a:	2200      	movs	r2, #0
 800409c:	609a      	str	r2, [r3, #8]

}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}
 80040a4:	40021000 	.word	0x40021000
 80040a8:	08ffb80c 	.word	0x08ffb80c
 80040ac:	fef6ffff 	.word	0xfef6ffff
 80040b0:	fffbffff 	.word	0xfffbffff
 80040b4:	ffc0ffff 	.word	0xffc0ffff
 80040b8:	fffcfe2c 	.word	0xfffcfe2c

080040bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040bc:	480d      	ldr	r0, [pc, #52]	; (80040f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040c0:	480d      	ldr	r0, [pc, #52]	; (80040f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80040c2:	490e      	ldr	r1, [pc, #56]	; (80040fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80040c4:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <LoopForever+0xe>)
  movs r3, #0
 80040c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040c8:	e002      	b.n	80040d0 <LoopCopyDataInit>

080040ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040ce:	3304      	adds	r3, #4

080040d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040d4:	d3f9      	bcc.n	80040ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040d6:	4a0b      	ldr	r2, [pc, #44]	; (8004104 <LoopForever+0x12>)
  ldr r4, =_ebss
 80040d8:	4c0b      	ldr	r4, [pc, #44]	; (8004108 <LoopForever+0x16>)
  movs r3, #0
 80040da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80040dc:	e001      	b.n	80040e2 <LoopFillZerobss>

080040de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80040de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80040e0:	3204      	adds	r2, #4

080040e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80040e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80040e4:	d3fb      	bcc.n	80040de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80040e6:	f7ff ffa5 	bl	8004034 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80040ea:	f000 f811 	bl	8004110 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80040ee:	f7ff fb99 	bl	8003824 <main>

080040f2 <LoopForever>:

LoopForever:
    b LoopForever
 80040f2:	e7fe      	b.n	80040f2 <LoopForever>
  ldr   r0, =_estack
 80040f4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80040f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80040fc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8004100:	08004278 	.word	0x08004278
  ldr r2, =_sbss
 8004104:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8004108:	20000170 	.word	0x20000170

0800410c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800410c:	e7fe      	b.n	800410c <ADC1_COMP_IRQHandler>
	...

08004110 <__libc_init_array>:
 8004110:	b570      	push	{r4, r5, r6, lr}
 8004112:	2600      	movs	r6, #0
 8004114:	4d0c      	ldr	r5, [pc, #48]	; (8004148 <__libc_init_array+0x38>)
 8004116:	4c0d      	ldr	r4, [pc, #52]	; (800414c <__libc_init_array+0x3c>)
 8004118:	1b64      	subs	r4, r4, r5
 800411a:	10a4      	asrs	r4, r4, #2
 800411c:	42a6      	cmp	r6, r4
 800411e:	d109      	bne.n	8004134 <__libc_init_array+0x24>
 8004120:	2600      	movs	r6, #0
 8004122:	f000 f819 	bl	8004158 <_init>
 8004126:	4d0a      	ldr	r5, [pc, #40]	; (8004150 <__libc_init_array+0x40>)
 8004128:	4c0a      	ldr	r4, [pc, #40]	; (8004154 <__libc_init_array+0x44>)
 800412a:	1b64      	subs	r4, r4, r5
 800412c:	10a4      	asrs	r4, r4, #2
 800412e:	42a6      	cmp	r6, r4
 8004130:	d105      	bne.n	800413e <__libc_init_array+0x2e>
 8004132:	bd70      	pop	{r4, r5, r6, pc}
 8004134:	00b3      	lsls	r3, r6, #2
 8004136:	58eb      	ldr	r3, [r5, r3]
 8004138:	4798      	blx	r3
 800413a:	3601      	adds	r6, #1
 800413c:	e7ee      	b.n	800411c <__libc_init_array+0xc>
 800413e:	00b3      	lsls	r3, r6, #2
 8004140:	58eb      	ldr	r3, [r5, r3]
 8004142:	4798      	blx	r3
 8004144:	3601      	adds	r6, #1
 8004146:	e7f2      	b.n	800412e <__libc_init_array+0x1e>
 8004148:	08004270 	.word	0x08004270
 800414c:	08004270 	.word	0x08004270
 8004150:	08004270 	.word	0x08004270
 8004154:	08004274 	.word	0x08004274

08004158 <_init>:
 8004158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800415e:	bc08      	pop	{r3}
 8004160:	469e      	mov	lr, r3
 8004162:	4770      	bx	lr

08004164 <_fini>:
 8004164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800416a:	bc08      	pop	{r3}
 800416c:	469e      	mov	lr, r3
 800416e:	4770      	bx	lr
